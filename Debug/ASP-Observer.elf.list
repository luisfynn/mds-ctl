
ASP-Observer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .shell_cmd    00000018  080042c4  080042c4  000142c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .init_array   00000004  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000510  20000000  080042e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001478  20000510  080047f4  00020510  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001988  080047f4  00021988  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020510  2**0
                  CONTENTS, READONLY
 10 .debug_line   00006382  00000000  00000000  00020539  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00010f1a  00000000  00000000  000268bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000034cb  00000000  00000000  000377d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c68  00000000  00000000  0003aca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fc8  00000000  00000000  0003b908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00008e3b  00000000  00000000  0003c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000044db  00000000  00000000  0004570b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00049be6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000241c  00000000  00000000  00049c64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000510 	.word	0x20000510
 8000128:	00000000 	.word	0x00000000
 800012c:	0800407c 	.word	0x0800407c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000514 	.word	0x20000514
 8000148:	0800407c 	.word	0x0800407c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000170:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000172:	e003      	b.n	800017c <LoopCopyDataInit>

08000174 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000174:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000176:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000178:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800017a:	3104      	adds	r1, #4

0800017c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800017c:	480a      	ldr	r0, [pc, #40]	; (80001a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800017e:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000180:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000182:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000184:	d3f6      	bcc.n	8000174 <CopyDataInit>
  ldr r2, =_sbss
 8000186:	4a0a      	ldr	r2, [pc, #40]	; (80001b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000188:	e002      	b.n	8000190 <LoopFillZerobss>

0800018a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800018a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800018c:	f842 3b04 	str.w	r3, [r2], #4

08000190 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000190:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000192:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000194:	d3f9      	bcc.n	800018a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000196:	f000 f811 	bl	80001bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800019a:	f003 fba5 	bl	80038e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800019e:	f002 fc8b 	bl	8002ab8 <main>
  bx lr
 80001a2:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80001a4:	080042e4 	.word	0x080042e4
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80001a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80001ac:	20000510 	.word	0x20000510
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80001b0:	20000510 	.word	0x20000510
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80001b4:	20001988 	.word	0x20001988

080001b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001b8:	e7fe      	b.n	80001b8 <ADC1_IRQHandler>
	...

080001bc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001bc:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <SystemInit+0x40>)
 80001be:	681a      	ldr	r2, [r3, #0]
 80001c0:	f042 0201 	orr.w	r2, r2, #1
 80001c4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80001c6:	6859      	ldr	r1, [r3, #4]
 80001c8:	4a0d      	ldr	r2, [pc, #52]	; (8000200 <SystemInit+0x44>)
 80001ca:	400a      	ands	r2, r1
 80001cc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80001d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80001d8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80001e0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80001e2:	685a      	ldr	r2, [r3, #4]
 80001e4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80001e8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80001ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80001ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <SystemInit+0x48>)
 80001f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000
 8000200:	f8ff0000 	.word	0xf8ff0000
 8000204:	e000ed00 	.word	0xe000ed00

08000208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000208:	b510      	push	{r4, lr}
 800020a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800020c:	f000 fe8a 	bl	8000f24 <HAL_RCC_GetHCLKFreq>
 8000210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000214:	fbb0 f0f3 	udiv	r0, r0, r3
 8000218:	f000 f9fe 	bl	8000618 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800021c:	2200      	movs	r2, #0
 800021e:	4621      	mov	r1, r4
 8000220:	f04f 30ff 	mov.w	r0, #4294967295
 8000224:	f000 f9b8 	bl	8000598 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000228:	2000      	movs	r0, #0
 800022a:	bd10      	pop	{r4, pc}

0800022c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800022e:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000230:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000232:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000234:	f043 0310 	orr.w	r3, r3, #16
 8000238:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800023a:	f000 f99b 	bl	8000574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023e:	200f      	movs	r0, #15
 8000240:	f7ff ffe2 	bl	8000208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000244:	f003 f974 	bl	8003530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000248:	2000      	movs	r0, #0
 800024a:	bd08      	pop	{r3, pc}
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000250:	4a02      	ldr	r2, [pc, #8]	; (800025c <HAL_IncTick+0xc>)
 8000252:	6813      	ldr	r3, [r2, #0]
 8000254:	3301      	adds	r3, #1
 8000256:	6013      	str	r3, [r2, #0]
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	2000052c 	.word	0x2000052c

08000260 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000260:	4b01      	ldr	r3, [pc, #4]	; (8000268 <HAL_GetTick+0x8>)
 8000262:	6818      	ldr	r0, [r3, #0]
}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	2000052c 	.word	0x2000052c

0800026c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800026c:	b513      	push	{r0, r1, r4, lr}
 800026e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000270:	f7ff fff6 	bl	8000260 <HAL_GetTick>
 8000274:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000276:	f7ff fff3 	bl	8000260 <HAL_GetTick>
 800027a:	9b01      	ldr	r3, [sp, #4]
 800027c:	1b00      	subs	r0, r0, r4
 800027e:	4298      	cmp	r0, r3
 8000280:	d3f9      	bcc.n	8000276 <HAL_Delay+0xa>
  {
  }
}
 8000282:	b002      	add	sp, #8
 8000284:	bd10      	pop	{r4, pc}
	...

08000288 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800028e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000292:	2b01      	cmp	r3, #1
 8000294:	f000 80ae 	beq.w	80003f4 <HAL_ADC_ConfigChannel+0x16c>
 8000298:	2301      	movs	r3, #1
 800029a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800029e:	684b      	ldr	r3, [r1, #4]
 80002a0:	6804      	ldr	r4, [r0, #0]
 80002a2:	2b06      	cmp	r3, #6
 80002a4:	680d      	ldr	r5, [r1, #0]
 80002a6:	d818      	bhi.n	80002da <HAL_ADC_ConfigChannel+0x52>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80002a8:	6b67      	ldr	r7, [r4, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002aa:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80002ae:	fa92 f6a2 	rbit	r6, r2
 80002b2:	fab6 f686 	clz	r6, r6
 80002b6:	3b01      	subs	r3, #1
 80002b8:	fa92 f2a2 	rbit	r2, r2
 80002bc:	fab2 f282 	clz	r2, r2
 80002c0:	435e      	muls	r6, r3
 80002c2:	4353      	muls	r3, r2
 80002c4:	f04f 0e1f 	mov.w	lr, #31
 80002c8:	fa0e f606 	lsl.w	r6, lr, r6
 80002cc:	ea27 0606 	bic.w	r6, r7, r6
 80002d0:	fa05 f303 	lsl.w	r3, r5, r3
 80002d4:	4333      	orrs	r3, r6
 80002d6:	6363      	str	r3, [r4, #52]	; 0x34
 80002d8:	e030      	b.n	800033c <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80002da:	2b0c      	cmp	r3, #12
 80002dc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80002e0:	d816      	bhi.n	8000310 <HAL_ADC_ConfigChannel+0x88>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80002e2:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80002e4:	fa92 f6a2 	rbit	r6, r2
 80002e8:	fab6 f686 	clz	r6, r6
 80002ec:	3b07      	subs	r3, #7
 80002ee:	fa92 f2a2 	rbit	r2, r2
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	435e      	muls	r6, r3
 80002f8:	435a      	muls	r2, r3
 80002fa:	f04f 0e1f 	mov.w	lr, #31
 80002fe:	fa0e f606 	lsl.w	r6, lr, r6
 8000302:	ea27 0606 	bic.w	r6, r7, r6
 8000306:	fa05 f202 	lsl.w	r2, r5, r2
 800030a:	4332      	orrs	r2, r6
 800030c:	6322      	str	r2, [r4, #48]	; 0x30
 800030e:	e015      	b.n	800033c <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000310:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000312:	fa92 f6a2 	rbit	r6, r2
 8000316:	fab6 f686 	clz	r6, r6
 800031a:	3b0d      	subs	r3, #13
 800031c:	fa92 f2a2 	rbit	r2, r2
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	435e      	muls	r6, r3
 8000326:	4353      	muls	r3, r2
 8000328:	f04f 0e1f 	mov.w	lr, #31
 800032c:	fa0e f606 	lsl.w	r6, lr, r6
 8000330:	ea27 0606 	bic.w	r6, r7, r6
 8000334:	fa05 f303 	lsl.w	r3, r5, r3
 8000338:	4333      	orrs	r3, r6
 800033a:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800033c:	2d09      	cmp	r5, #9
 800033e:	f04f 0338 	mov.w	r3, #56	; 0x38
 8000342:	688e      	ldr	r6, [r1, #8]
 8000344:	d918      	bls.n	8000378 <HAL_ADC_ConfigChannel+0xf0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000346:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800034a:	fa93 f7a3 	rbit	r7, r3
 800034e:	fab7 f787 	clz	r7, r7
 8000352:	f1a5 010a 	sub.w	r1, r5, #10
 8000356:	fa93 f3a3 	rbit	r3, r3
 800035a:	fab3 f283 	clz	r2, r3
 800035e:	fb01 f307 	mul.w	r3, r1, r7
 8000362:	4351      	muls	r1, r2
 8000364:	2707      	movs	r7, #7
 8000366:	fa07 f303 	lsl.w	r3, r7, r3
 800036a:	ea2e 0303 	bic.w	r3, lr, r3
 800036e:	fa06 f201 	lsl.w	r2, r6, r1
 8000372:	431a      	orrs	r2, r3
 8000374:	60e2      	str	r2, [r4, #12]
 8000376:	e013      	b.n	80003a0 <HAL_ADC_ConfigChannel+0x118>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000378:	6927      	ldr	r7, [r4, #16]
 800037a:	fa93 f1a3 	rbit	r1, r3
 800037e:	fab1 f181 	clz	r1, r1
 8000382:	fa93 f3a3 	rbit	r3, r3
 8000386:	fab3 f383 	clz	r3, r3
 800038a:	4369      	muls	r1, r5
 800038c:	436b      	muls	r3, r5
 800038e:	2207      	movs	r2, #7
 8000390:	fa02 f101 	lsl.w	r1, r2, r1
 8000394:	ea27 0101 	bic.w	r1, r7, r1
 8000398:	fa06 f203 	lsl.w	r2, r6, r3
 800039c:	430a      	orrs	r2, r1
 800039e:	6122      	str	r2, [r4, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80003a0:	f1a5 0310 	sub.w	r3, r5, #16
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d901      	bls.n	80003ac <HAL_ADC_ConfigChannel+0x124>
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003a8:	2300      	movs	r3, #0
 80003aa:	e01e      	b.n	80003ea <HAL_ADC_ConfigChannel+0x162>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80003ac:	4b13      	ldr	r3, [pc, #76]	; (80003fc <HAL_ADC_ConfigChannel+0x174>)
 80003ae:	429c      	cmp	r4, r3
 80003b0:	d116      	bne.n	80003e0 <HAL_ADC_ConfigChannel+0x158>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80003b2:	68a3      	ldr	r3, [r4, #8]
 80003b4:	021b      	lsls	r3, r3, #8
 80003b6:	d4f7      	bmi.n	80003a8 <HAL_ADC_ConfigChannel+0x120>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80003b8:	68a3      	ldr	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80003ba:	2d10      	cmp	r5, #16
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80003bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003c0:	60a3      	str	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80003c2:	d1f1      	bne.n	80003a8 <HAL_ADC_ConfigChannel+0x120>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80003c4:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <HAL_ADC_ConfigChannel+0x178>)
 80003c6:	4a0f      	ldr	r2, [pc, #60]	; (8000404 <HAL_ADC_ConfigChannel+0x17c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80003ce:	230a      	movs	r3, #10
 80003d0:	4353      	muls	r3, r2
          while(wait_loop_index != 0)
          {
            wait_loop_index--;
 80003d2:	9301      	str	r3, [sp, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 80003d4:	9b01      	ldr	r3, [sp, #4]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0e6      	beq.n	80003a8 <HAL_ADC_ConfigChannel+0x120>
          {
            wait_loop_index--;
 80003da:	9b01      	ldr	r3, [sp, #4]
 80003dc:	3b01      	subs	r3, #1
 80003de:	e7f8      	b.n	80003d2 <HAL_ADC_ConfigChannel+0x14a>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80003e2:	f043 0320 	orr.w	r3, r3, #32
 80003e6:	6283      	str	r3, [r0, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80003e8:	2301      	movs	r3, #1
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80003f0:	4618      	mov	r0, r3
 80003f2:	e000      	b.n	80003f6 <HAL_ADC_ConfigChannel+0x16e>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003f4:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 80003f6:	b003      	add	sp, #12
 80003f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40012400 	.word	0x40012400
 8000400:	20000000 	.word	0x20000000
 8000404:	000f4240 	.word	0x000f4240

08000408 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000408:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800040a:	6803      	ldr	r3, [r0, #0]
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800040c:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800040e:	689a      	ldr	r2, [r3, #8]
 8000410:	07d2      	lsls	r2, r2, #31
 8000412:	d401      	bmi.n	8000418 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000414:	2000      	movs	r0, #0
 8000416:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000418:	689a      	ldr	r2, [r3, #8]
 800041a:	f022 0201 	bic.w	r2, r2, #1
 800041e:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000420:	f7ff ff1e 	bl	8000260 <HAL_GetTick>
 8000424:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000426:	6823      	ldr	r3, [r4, #0]
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	07db      	lsls	r3, r3, #31
 800042c:	d5f2      	bpl.n	8000414 <ADC_ConversionStop_Disable+0xc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800042e:	f7ff ff17 	bl	8000260 <HAL_GetTick>
 8000432:	1b40      	subs	r0, r0, r5
 8000434:	2802      	cmp	r0, #2
 8000436:	d9f6      	bls.n	8000426 <ADC_ConversionStop_Disable+0x1e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000438:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800043a:	2001      	movs	r0, #1
    while(ADC_IS_ENABLE(hadc) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800043c:	f043 0310 	orr.w	r3, r3, #16
 8000440:	62a3      	str	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000442:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	62e3      	str	r3, [r4, #44]	; 0x2c
 800044a:	bd38      	pop	{r3, r4, r5, pc}

0800044c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800044c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800044e:	4604      	mov	r4, r0
 8000450:	2800      	cmp	r0, #0
 8000452:	f000 8088 	beq.w	8000566 <HAL_ADC_Init+0x11a>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000456:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000458:	b923      	cbnz	r3, 8000464 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800045a:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800045c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000460:	f003 f8ac 	bl	80035bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000464:	4620      	mov	r0, r4
 8000466:	f7ff ffcf 	bl	8000408 <ADC_ConversionStop_Disable>
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800046a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800046c:	f013 0f10 	tst.w	r3, #16
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000470:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000472:	d175      	bne.n	8000560 <HAL_ADC_Init+0x114>
 8000474:	2800      	cmp	r0, #0
 8000476:	d173      	bne.n	8000560 <HAL_ADC_Init+0x114>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000478:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800047c:	f023 0302 	bic.w	r3, r3, #2
 8000480:	f043 0302 	orr.w	r3, r3, #2
 8000484:	62a3      	str	r3, [r4, #40]	; 0x28
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000486:	68e0      	ldr	r0, [r4, #12]
 8000488:	2302      	movs	r3, #2
 800048a:	fa93 f3a3 	rbit	r3, r3
 800048e:	fab3 f383 	clz	r3, r3
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000492:	6861      	ldr	r1, [r4, #4]
 8000494:	69e2      	ldr	r2, [r4, #28]
 8000496:	fa00 f303 	lsl.w	r3, r0, r3
 800049a:	430a      	orrs	r2, r1
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800049c:	68a1      	ldr	r1, [r4, #8]
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800049e:	4313      	orrs	r3, r2
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80004a0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80004a4:	d005      	beq.n	80004b2 <HAL_ADC_Init+0x66>
 80004a6:	2901      	cmp	r1, #1
 80004a8:	bf14      	ite	ne
 80004aa:	2200      	movne	r2, #0
 80004ac:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80004b0:	e000      	b.n	80004b4 <HAL_ADC_Init+0x68>
 80004b2:	460a      	mov	r2, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004b4:	6965      	ldr	r5, [r4, #20]
 80004b6:	2d01      	cmp	r5, #1
 80004b8:	d115      	bne.n	80004e6 <HAL_ADC_Init+0x9a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004ba:	b960      	cbnz	r0, 80004d6 <HAL_ADC_Init+0x8a>
 80004bc:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 80004c0:	fa90 f0a0 	rbit	r0, r0
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80004c4:	fab0 f580 	clz	r5, r0
 80004c8:	69a0      	ldr	r0, [r4, #24]
 80004ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80004ce:	3801      	subs	r0, #1
 80004d0:	40a8      	lsls	r0, r5
 80004d2:	4302      	orrs	r2, r0
 80004d4:	e007      	b.n	80004e6 <HAL_ADC_Init+0x9a>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80004d8:	f040 0020 	orr.w	r0, r0, #32
 80004dc:	62a0      	str	r0, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80004e0:	f040 0001 	orr.w	r0, r0, #1
 80004e4:	62e0      	str	r0, [r4, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80004e6:	6820      	ldr	r0, [r4, #0]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80004e8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80004ec:	6845      	ldr	r5, [r0, #4]
 80004ee:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80004f2:	ea42 0205 	orr.w	r2, r2, r5
 80004f6:	6042      	str	r2, [r0, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80004f8:	6885      	ldr	r5, [r0, #8]
 80004fa:	4a1c      	ldr	r2, [pc, #112]	; (800056c <HAL_ADC_Init+0x120>)
 80004fc:	ea02 0205 	and.w	r2, r2, r5
 8000500:	ea42 0203 	orr.w	r2, r2, r3
 8000504:	6082      	str	r2, [r0, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000506:	d001      	beq.n	800050c <HAL_ADC_Init+0xc0>
 8000508:	2901      	cmp	r1, #1
 800050a:	d10a      	bne.n	8000522 <HAL_ADC_Init+0xd6>
 800050c:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 8000510:	fa92 f2a2 	rbit	r2, r2
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000514:	fab2 f282 	clz	r2, r2
 8000518:	6921      	ldr	r1, [r4, #16]
 800051a:	3901      	subs	r1, #1
 800051c:	fa01 f202 	lsl.w	r2, r1, r2
 8000520:	e000      	b.n	8000524 <HAL_ADC_Init+0xd8>
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
 8000522:	2200      	movs	r2, #0
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000524:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000526:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800052a:	430a      	orrs	r2, r1
 800052c:	62c2      	str	r2, [r0, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800052e:	6881      	ldr	r1, [r0, #8]
 8000530:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <HAL_ADC_Init+0x124>)
 8000532:	400a      	ands	r2, r1
 8000534:	4293      	cmp	r3, r2
 8000536:	d108      	bne.n	800054a <HAL_ADC_Init+0xfe>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000538:	2000      	movs	r0, #0
 800053a:	62e0      	str	r0, [r4, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800053c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800053e:	f023 0303 	bic.w	r3, r3, #3
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	62a3      	str	r3, [r4, #40]	; 0x28
 8000548:	bd38      	pop	{r3, r4, r5, pc}
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800054a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800054c:	f023 0312 	bic.w	r3, r3, #18
 8000550:	f043 0310 	orr.w	r3, r3, #16
 8000554:	62a3      	str	r3, [r4, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000556:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800055e:	e002      	b.n	8000566 <HAL_ADC_Init+0x11a>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000560:	f043 0310 	orr.w	r3, r3, #16
 8000564:	62a3      	str	r3, [r4, #40]	; 0x28
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8000566:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000568:	bd38      	pop	{r3, r4, r5, pc}
 800056a:	bf00      	nop
 800056c:	ffe1f7fd 	.word	0xffe1f7fd
 8000570:	ff1f0efe 	.word	0xff1f0efe

08000574 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000574:	4a07      	ldr	r2, [pc, #28]	; (8000594 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000576:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000578:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800057a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800057e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000582:	041b      	lsls	r3, r3, #16
 8000584:	0c1b      	lsrs	r3, r3, #16
 8000586:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800058a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058e:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000590:	60d3      	str	r3, [r2, #12]
 8000592:	4770      	bx	lr
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800059e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a2:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a6:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a8:	2c04      	cmp	r4, #4
 80005aa:	bf28      	it	cs
 80005ac:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ae:	2d06      	cmp	r5, #6

  return (
 80005b0:	f04f 0501 	mov.w	r5, #1
 80005b4:	fa05 f404 	lsl.w	r4, r5, r4
 80005b8:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005bc:	bf8c      	ite	hi
 80005be:	3b03      	subhi	r3, #3
 80005c0:	2300      	movls	r3, #0

  return (
 80005c2:	400c      	ands	r4, r1
 80005c4:	409c      	lsls	r4, r3
 80005c6:	fa05 f303 	lsl.w	r3, r5, r3
 80005ca:	3b01      	subs	r3, #1
 80005cc:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80005ce:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80005d0:	ea42 0204 	orr.w	r2, r2, r4
 80005d4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d8:	bfaf      	iteee	ge
 80005da:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	4b07      	ldrlt	r3, [pc, #28]	; (80005fc <HAL_NVIC_SetPriority+0x64>)
 80005e0:	f000 000f 	andlt.w	r0, r0, #15
 80005e4:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	bfa5      	ittet	ge
 80005e8:	b2d2      	uxtbge	r2, r2
 80005ea:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ee:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005f4:	bd30      	pop	{r4, r5, pc}
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00
 80005fc:	e000ed14 	.word	0xe000ed14

08000600 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000600:	0942      	lsrs	r2, r0, #5
 8000602:	2301      	movs	r3, #1
 8000604:	f000 001f 	and.w	r0, r0, #31
 8000608:	fa03 f000 	lsl.w	r0, r3, r0
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <HAL_NVIC_EnableIRQ+0x14>)
 800060e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000612:	4770      	bx	lr
 8000614:	e000e100 	.word	0xe000e100

08000618 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000618:	3801      	subs	r0, #1
 800061a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800061e:	d20a      	bcs.n	8000636 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <HAL_SYSTICK_Config+0x28>)
 8000624:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000626:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800062c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000630:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000636:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000e010 	.word	0xe000e010
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000646:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	bf0c      	ite	eq
 800064c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000650:	f022 0204 	bicne.w	r2, r2, #4
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	4770      	bx	lr
 8000658:	e000e010 	.word	0xe000e010

0800065c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800065c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8000660:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000662:	4626      	mov	r6, r4
 8000664:	4b62      	ldr	r3, [pc, #392]	; (80007f0 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000666:	f8df e194 	ldr.w	lr, [pc, #404]	; 80007fc <HAL_GPIO_Init+0x1a0>
 800066a:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000800 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800066e:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8000670:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000672:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8000674:	ea32 0505 	bics.w	r5, r2, r5
 8000678:	f040 80b3 	bne.w	80007e2 <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800067c:	684d      	ldr	r5, [r1, #4]
 800067e:	2d12      	cmp	r5, #18
 8000680:	d028      	beq.n	80006d4 <HAL_GPIO_Init+0x78>
 8000682:	d80e      	bhi.n	80006a2 <HAL_GPIO_Init+0x46>
 8000684:	2d02      	cmp	r5, #2
 8000686:	d022      	beq.n	80006ce <HAL_GPIO_Init+0x72>
 8000688:	d804      	bhi.n	8000694 <HAL_GPIO_Init+0x38>
 800068a:	b335      	cbz	r5, 80006da <HAL_GPIO_Init+0x7e>
 800068c:	2d01      	cmp	r5, #1
 800068e:	d12d      	bne.n	80006ec <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000690:	68cc      	ldr	r4, [r1, #12]
          break;
 8000692:	e02b      	b.n	80006ec <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000694:	2d03      	cmp	r5, #3
 8000696:	d018      	beq.n	80006ca <HAL_GPIO_Init+0x6e>
 8000698:	2d11      	cmp	r5, #17
 800069a:	d127      	bne.n	80006ec <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800069c:	68cc      	ldr	r4, [r1, #12]
 800069e:	3404      	adds	r4, #4
          break;
 80006a0:	e024      	b.n	80006ec <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80006a2:	4f54      	ldr	r7, [pc, #336]	; (80007f4 <HAL_GPIO_Init+0x198>)
 80006a4:	42bd      	cmp	r5, r7
 80006a6:	d018      	beq.n	80006da <HAL_GPIO_Init+0x7e>
 80006a8:	d806      	bhi.n	80006b8 <HAL_GPIO_Init+0x5c>
 80006aa:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000804 <HAL_GPIO_Init+0x1a8>
 80006ae:	4545      	cmp	r5, r8
 80006b0:	d013      	beq.n	80006da <HAL_GPIO_Init+0x7e>
 80006b2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80006b6:	e005      	b.n	80006c4 <HAL_GPIO_Init+0x68>
 80006b8:	4575      	cmp	r5, lr
 80006ba:	d00e      	beq.n	80006da <HAL_GPIO_Init+0x7e>
 80006bc:	4565      	cmp	r5, ip
 80006be:	d00c      	beq.n	80006da <HAL_GPIO_Init+0x7e>
 80006c0:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000808 <HAL_GPIO_Init+0x1ac>
 80006c4:	4545      	cmp	r5, r8
 80006c6:	d111      	bne.n	80006ec <HAL_GPIO_Init+0x90>
 80006c8:	e007      	b.n	80006da <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80006ca:	2400      	movs	r4, #0
 80006cc:	e00e      	b.n	80006ec <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006ce:	68cc      	ldr	r4, [r1, #12]
 80006d0:	3408      	adds	r4, #8
          break;
 80006d2:	e00b      	b.n	80006ec <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006d4:	68cc      	ldr	r4, [r1, #12]
 80006d6:	340c      	adds	r4, #12
          break;
 80006d8:	e008      	b.n	80006ec <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80006da:	688c      	ldr	r4, [r1, #8]
 80006dc:	b12c      	cbz	r4, 80006ea <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80006de:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 80006e0:	bf0c      	ite	eq
 80006e2:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80006e4:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006e6:	2408      	movs	r4, #8
 80006e8:	e000      	b.n	80006ec <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006ea:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006ec:	2aff      	cmp	r2, #255	; 0xff
 80006ee:	bf97      	itett	ls
 80006f0:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80006f2:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006f6:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80006fa:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006fc:	bf84      	itt	hi
 80006fe:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000702:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000704:	f04f 080f 	mov.w	r8, #15
 8000708:	fa08 fa05 	lsl.w	sl, r8, r5
 800070c:	ea29 090a 	bic.w	r9, r9, sl
 8000710:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000714:	bf88      	it	hi
 8000716:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800071a:	ea49 0505 	orr.w	r5, r9, r5
 800071e:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000722:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000726:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 800072a:	d05a      	beq.n	80007e2 <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800072c:	4d32      	ldr	r5, [pc, #200]	; (80007f8 <HAL_GPIO_Init+0x19c>)
 800072e:	4f32      	ldr	r7, [pc, #200]	; (80007f8 <HAL_GPIO_Init+0x19c>)
 8000730:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000732:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000736:	f045 0501 	orr.w	r5, r5, #1
 800073a:	61bd      	str	r5, [r7, #24]
 800073c:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800073e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000742:	f005 0501 	and.w	r5, r5, #1
 8000746:	9501      	str	r5, [sp, #4]
 8000748:	9d01      	ldr	r5, [sp, #4]
 800074a:	f026 0503 	bic.w	r5, r6, #3
 800074e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8000752:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 8000756:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800075a:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800075e:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000762:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000764:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000768:	d010      	beq.n	800078c <HAL_GPIO_Init+0x130>
 800076a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800076e:	42b8      	cmp	r0, r7
 8000770:	d00f      	beq.n	8000792 <HAL_GPIO_Init+0x136>
 8000772:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000776:	42b8      	cmp	r0, r7
 8000778:	d00e      	beq.n	8000798 <HAL_GPIO_Init+0x13c>
 800077a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800077e:	42b8      	cmp	r0, r7
 8000780:	bf0c      	ite	eq
 8000782:	f04f 0b03 	moveq.w	fp, #3
 8000786:	f04f 0b04 	movne.w	fp, #4
 800078a:	e007      	b.n	800079c <HAL_GPIO_Init+0x140>
 800078c:	f04f 0b00 	mov.w	fp, #0
 8000790:	e004      	b.n	800079c <HAL_GPIO_Init+0x140>
 8000792:	f04f 0b01 	mov.w	fp, #1
 8000796:	e001      	b.n	800079c <HAL_GPIO_Init+0x140>
 8000798:	f04f 0b02 	mov.w	fp, #2
 800079c:	fa0b fa0a 	lsl.w	sl, fp, sl
 80007a0:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 80007a4:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80007a8:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007aa:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80007ae:	bf14      	ite	ne
 80007b0:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80007b2:	4395      	biceq	r5, r2
 80007b4:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80007b6:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007b8:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80007bc:	bf14      	ite	ne
 80007be:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80007c0:	4395      	biceq	r5, r2
 80007c2:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80007c4:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007c6:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80007ca:	bf14      	ite	ne
 80007cc:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80007ce:	4395      	biceq	r5, r2
 80007d0:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80007d2:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007d4:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80007d8:	bf14      	ite	ne
 80007da:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80007dc:	ea25 0202 	biceq.w	r2, r5, r2
 80007e0:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80007e2:	3601      	adds	r6, #1
 80007e4:	2e10      	cmp	r6, #16
 80007e6:	f47f af42 	bne.w	800066e <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 80007ea:	b003      	add	sp, #12
 80007ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007f0:	40010400 	.word	0x40010400
 80007f4:	10210000 	.word	0x10210000
 80007f8:	40021000 	.word	0x40021000
 80007fc:	10310000 	.word	0x10310000
 8000800:	10320000 	.word	0x10320000
 8000804:	10110000 	.word	0x10110000
 8000808:	10220000 	.word	0x10220000

0800080c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800080c:	b902      	cbnz	r2, 8000810 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800080e:	0409      	lsls	r1, r1, #16
 8000810:	6101      	str	r1, [r0, #16]
 8000812:	4770      	bx	lr

08000814 <HAL_IWDG_MspInit>:
  * @param  hiwdg: pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 8000814:	4770      	bx	lr

08000816 <HAL_IWDG_Init>:
  * @param  hiwdg: pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000816:	b510      	push	{r4, lr}
  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8000818:	4604      	mov	r4, r0
 800081a:	b330      	cbz	r0, 800086a <HAL_IWDG_Init+0x54>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload)); 
  
  /* Check pending flag, if previous update not done, return error */
  if((__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_PVU) != RESET)
 800081c:	6803      	ldr	r3, [r0, #0]
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	07d2      	lsls	r2, r2, #31
 8000822:	d502      	bpl.n	800082a <HAL_IWDG_Init+0x14>
     &&(__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET))
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	079b      	lsls	r3, r3, #30
 8000828:	d41f      	bmi.n	800086a <HAL_IWDG_Init+0x54>
  {
    return HAL_ERROR;
  }
    
  if(hiwdg->State == HAL_IWDG_STATE_RESET)
 800082a:	7b63      	ldrb	r3, [r4, #13]
 800082c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000830:	b91b      	cbnz	r3, 800083a <HAL_IWDG_Init+0x24>
  {  
    /* Allocate lock resource and initialize it */
    hiwdg->Lock = HAL_UNLOCKED;
 8000832:	7322      	strb	r2, [r4, #12]
    
    /* Init the low level hardware */
    HAL_IWDG_MspInit(hiwdg);
 8000834:	4620      	mov	r0, r4
 8000836:	f7ff ffed 	bl	8000814 <HAL_IWDG_MspInit>
  
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_BUSY;  
  
  /* Enable write access to IWDG_PR and IWDG_RLR registers */  
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800083a:	f245 5255 	movw	r2, #21845	; 0x5555
    /* Init the low level hardware */
    HAL_IWDG_MspInit(hiwdg);
  }
  
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_BUSY;  
 800083e:	2302      	movs	r3, #2
 8000840:	7363      	strb	r3, [r4, #13]
  
  /* Enable write access to IWDG_PR and IWDG_RLR registers */  
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000842:	6823      	ldr	r3, [r4, #0]
 
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
 8000844:	2000      	movs	r0, #0
  
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_BUSY;  
  
  /* Enable write access to IWDG_PR and IWDG_RLR registers */  
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000846:	601a      	str	r2, [r3, #0]
  
  /* Write to IWDG registers the IWDG_Prescaler & IWDG_Reload values to work with */
  MODIFY_REG(hiwdg->Instance->PR, IWDG_PR_PR, hiwdg->Init.Prescaler);
 8000848:	685a      	ldr	r2, [r3, #4]
 800084a:	f022 0107 	bic.w	r1, r2, #7
 800084e:	6862      	ldr	r2, [r4, #4]
 8000850:	430a      	orrs	r2, r1
 8000852:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hiwdg->Instance->RLR, IWDG_RLR_RL, hiwdg->Init.Reload);
 8000854:	689a      	ldr	r2, [r3, #8]
 8000856:	68a1      	ldr	r1, [r4, #8]
 8000858:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800085c:	f022 020f 	bic.w	r2, r2, #15
 8000860:	430a      	orrs	r2, r1
 8000862:	609a      	str	r2, [r3, #8]
 
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_READY;
 8000864:	2301      	movs	r3, #1
 8000866:	7363      	strb	r3, [r4, #13]
  
  /* Return function status */
  return HAL_OK;
 8000868:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
  {
    return HAL_ERROR;
 800086a:	2001      	movs	r0, #1
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 800086c:	bd10      	pop	{r4, pc}
	...

08000870 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000870:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000872:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000876:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000878:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800087a:	d403      	bmi.n	8000884 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800087c:	682b      	ldr	r3, [r5, #0]
 800087e:	0798      	lsls	r0, r3, #30
 8000880:	d473      	bmi.n	800096a <HAL_RCC_OscConfig+0xfa>
 8000882:	e0f2      	b.n	8000a6a <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000884:	4cb9      	ldr	r4, [pc, #740]	; (8000b6c <HAL_RCC_OscConfig+0x2fc>)
 8000886:	6863      	ldr	r3, [r4, #4]
 8000888:	f003 030c 	and.w	r3, r3, #12
 800088c:	2b04      	cmp	r3, #4
 800088e:	d007      	beq.n	80008a0 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000890:	6863      	ldr	r3, [r4, #4]
 8000892:	f003 030c 	and.w	r3, r3, #12
 8000896:	2b08      	cmp	r3, #8
 8000898:	d116      	bne.n	80008c8 <HAL_RCC_OscConfig+0x58>
 800089a:	6863      	ldr	r3, [r4, #4]
 800089c:	03d9      	lsls	r1, r3, #15
 800089e:	d513      	bpl.n	80008c8 <HAL_RCC_OscConfig+0x58>
 80008a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008a4:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008a8:	6822      	ldr	r2, [r4, #0]
 80008aa:	fa93 f3a3 	rbit	r3, r3
 80008ae:	fab3 f383 	clz	r3, r3
 80008b2:	f003 031f 	and.w	r3, r3, #31
 80008b6:	fa22 f303 	lsr.w	r3, r2, r3
 80008ba:	07da      	lsls	r2, r3, #31
 80008bc:	d5de      	bpl.n	800087c <HAL_RCC_OscConfig+0xc>
 80008be:	686b      	ldr	r3, [r5, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1db      	bne.n	800087c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80008c4:	2001      	movs	r0, #1
 80008c6:	e22d      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008c8:	686b      	ldr	r3, [r5, #4]
 80008ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ce:	d015      	beq.n	80008fc <HAL_RCC_OscConfig+0x8c>
 80008d0:	b96b      	cbnz	r3, 80008ee <HAL_RCC_OscConfig+0x7e>
 80008d2:	6823      	ldr	r3, [r4, #0]
 80008d4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80008d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008dc:	6023      	str	r3, [r4, #0]
 80008de:	6823      	ldr	r3, [r4, #0]
 80008e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008e4:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008e6:	f7ff fcbb 	bl	8000260 <HAL_GetTick>
 80008ea:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ec:	e02f      	b.n	800094e <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008f2:	6823      	ldr	r3, [r4, #0]
 80008f4:	d106      	bne.n	8000904 <HAL_RCC_OscConfig+0x94>
 80008f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008fa:	6023      	str	r3, [r4, #0]
 80008fc:	6823      	ldr	r3, [r4, #0]
 80008fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000902:	e005      	b.n	8000910 <HAL_RCC_OscConfig+0xa0>
 8000904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000908:	6023      	str	r3, [r4, #0]
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000910:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000912:	f7ff fca5 	bl	8000260 <HAL_GetTick>
 8000916:	4607      	mov	r7, r0
 8000918:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800091c:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000920:	6822      	ldr	r2, [r4, #0]
 8000922:	fa96 f3a6 	rbit	r3, r6
 8000926:	fab3 f383 	clz	r3, r3
 800092a:	f003 031f 	and.w	r3, r3, #31
 800092e:	fa22 f303 	lsr.w	r3, r2, r3
 8000932:	07db      	lsls	r3, r3, #31
 8000934:	d4a2      	bmi.n	800087c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000936:	f7ff fc93 	bl	8000260 <HAL_GetTick>
 800093a:	1bc0      	subs	r0, r0, r7
 800093c:	2864      	cmp	r0, #100	; 0x64
 800093e:	d9ed      	bls.n	800091c <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8000940:	2003      	movs	r0, #3
 8000942:	e1ef      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000944:	f7ff fc8c 	bl	8000260 <HAL_GetTick>
 8000948:	1bc0      	subs	r0, r0, r7
 800094a:	2864      	cmp	r0, #100	; 0x64
 800094c:	d8f8      	bhi.n	8000940 <HAL_RCC_OscConfig+0xd0>
 800094e:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000952:	6822      	ldr	r2, [r4, #0]
 8000954:	fa96 f3a6 	rbit	r3, r6
 8000958:	fab3 f383 	clz	r3, r3
 800095c:	f003 031f 	and.w	r3, r3, #31
 8000960:	fa22 f303 	lsr.w	r3, r2, r3
 8000964:	07d8      	lsls	r0, r3, #31
 8000966:	d4ed      	bmi.n	8000944 <HAL_RCC_OscConfig+0xd4>
 8000968:	e788      	b.n	800087c <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800096a:	4c80      	ldr	r4, [pc, #512]	; (8000b6c <HAL_RCC_OscConfig+0x2fc>)
 800096c:	6863      	ldr	r3, [r4, #4]
 800096e:	f013 0f0c 	tst.w	r3, #12
 8000972:	d007      	beq.n	8000984 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000974:	6863      	ldr	r3, [r4, #4]
 8000976:	f003 030c 	and.w	r3, r3, #12
 800097a:	2b08      	cmp	r3, #8
 800097c:	d121      	bne.n	80009c2 <HAL_RCC_OscConfig+0x152>
 800097e:	6863      	ldr	r3, [r4, #4]
 8000980:	03d9      	lsls	r1, r3, #15
 8000982:	d41e      	bmi.n	80009c2 <HAL_RCC_OscConfig+0x152>
 8000984:	2302      	movs	r3, #2
 8000986:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800098a:	6822      	ldr	r2, [r4, #0]
 800098c:	fa93 f3a3 	rbit	r3, r3
 8000990:	fab3 f383 	clz	r3, r3
 8000994:	f003 031f 	and.w	r3, r3, #31
 8000998:	fa22 f303 	lsr.w	r3, r2, r3
 800099c:	07da      	lsls	r2, r3, #31
 800099e:	d502      	bpl.n	80009a6 <HAL_RCC_OscConfig+0x136>
 80009a0:	692b      	ldr	r3, [r5, #16]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d18e      	bne.n	80008c4 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009a6:	6823      	ldr	r3, [r4, #0]
 80009a8:	22f8      	movs	r2, #248	; 0xf8
 80009aa:	fa92 f2a2 	rbit	r2, r2
 80009ae:	fab2 f282 	clz	r2, r2
 80009b2:	6969      	ldr	r1, [r5, #20]
 80009b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009b8:	fa01 f202 	lsl.w	r2, r1, r2
 80009bc:	4313      	orrs	r3, r2
 80009be:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009c0:	e053      	b.n	8000a6a <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009c2:	692a      	ldr	r2, [r5, #16]
 80009c4:	2301      	movs	r3, #1
 80009c6:	b37a      	cbz	r2, 8000a28 <HAL_RCC_OscConfig+0x1b8>
 80009c8:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009cc:	fab2 f282 	clz	r2, r2
 80009d0:	0092      	lsls	r2, r2, #2
 80009d2:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 80009d6:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 80009da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009dc:	f7ff fc40 	bl	8000260 <HAL_GetTick>
 80009e0:	4607      	mov	r7, r0
 80009e2:	2602      	movs	r6, #2
 80009e4:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e8:	4860      	ldr	r0, [pc, #384]	; (8000b6c <HAL_RCC_OscConfig+0x2fc>)
 80009ea:	6822      	ldr	r2, [r4, #0]
 80009ec:	fa96 f3a6 	rbit	r3, r6
 80009f0:	fab3 f383 	clz	r3, r3
 80009f4:	f003 031f 	and.w	r3, r3, #31
 80009f8:	fa22 f303 	lsr.w	r3, r2, r3
 80009fc:	07db      	lsls	r3, r3, #31
 80009fe:	d405      	bmi.n	8000a0c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a00:	f7ff fc2e 	bl	8000260 <HAL_GetTick>
 8000a04:	1bc0      	subs	r0, r0, r7
 8000a06:	2802      	cmp	r0, #2
 8000a08:	d9ec      	bls.n	80009e4 <HAL_RCC_OscConfig+0x174>
 8000a0a:	e799      	b.n	8000940 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a0c:	6803      	ldr	r3, [r0, #0]
 8000a0e:	22f8      	movs	r2, #248	; 0xf8
 8000a10:	fa92 f2a2 	rbit	r2, r2
 8000a14:	fab2 f282 	clz	r2, r2
 8000a18:	6969      	ldr	r1, [r5, #20]
 8000a1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a22:	4313      	orrs	r3, r2
 8000a24:	6003      	str	r3, [r0, #0]
 8000a26:	e020      	b.n	8000a6a <HAL_RCC_OscConfig+0x1fa>
 8000a28:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a2c:	fab3 f383 	clz	r3, r3
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000a36:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000a3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a3c:	f7ff fc10 	bl	8000260 <HAL_GetTick>
 8000a40:	4607      	mov	r7, r0
 8000a42:	2602      	movs	r6, #2
 8000a44:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a48:	6822      	ldr	r2, [r4, #0]
 8000a4a:	fa96 f3a6 	rbit	r3, r6
 8000a4e:	fab3 f383 	clz	r3, r3
 8000a52:	f003 031f 	and.w	r3, r3, #31
 8000a56:	fa22 f303 	lsr.w	r3, r2, r3
 8000a5a:	07d9      	lsls	r1, r3, #31
 8000a5c:	d505      	bpl.n	8000a6a <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a5e:	f7ff fbff 	bl	8000260 <HAL_GetTick>
 8000a62:	1bc0      	subs	r0, r0, r7
 8000a64:	2802      	cmp	r0, #2
 8000a66:	d9ed      	bls.n	8000a44 <HAL_RCC_OscConfig+0x1d4>
 8000a68:	e76a      	b.n	8000940 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a6a:	682b      	ldr	r3, [r5, #0]
 8000a6c:	071a      	lsls	r2, r3, #28
 8000a6e:	d546      	bpl.n	8000afe <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a70:	69aa      	ldr	r2, [r5, #24]
 8000a72:	4c3e      	ldr	r4, [pc, #248]	; (8000b6c <HAL_RCC_OscConfig+0x2fc>)
 8000a74:	2301      	movs	r3, #1
 8000a76:	493e      	ldr	r1, [pc, #248]	; (8000b70 <HAL_RCC_OscConfig+0x300>)
 8000a78:	b312      	cbz	r2, 8000ac0 <HAL_RCC_OscConfig+0x250>
 8000a7a:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a86:	f7ff fbeb 	bl	8000260 <HAL_GetTick>
 8000a8a:	4607      	mov	r7, r0
 8000a8c:	2602      	movs	r6, #2
 8000a8e:	fa96 f3a6 	rbit	r3, r6
 8000a92:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a98:	fa96 f3a6 	rbit	r3, r6
 8000a9c:	fab3 f383 	clz	r3, r3
 8000aa0:	f003 031f 	and.w	r3, r3, #31
 8000aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa8:	07db      	lsls	r3, r3, #31
 8000aaa:	d405      	bmi.n	8000ab8 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aac:	f7ff fbd8 	bl	8000260 <HAL_GetTick>
 8000ab0:	1bc0      	subs	r0, r0, r7
 8000ab2:	2802      	cmp	r0, #2
 8000ab4:	d9eb      	bls.n	8000a8e <HAL_RCC_OscConfig+0x21e>
 8000ab6:	e743      	b.n	8000940 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff fbd7 	bl	800026c <HAL_Delay>
 8000abe:	e01e      	b.n	8000afe <HAL_RCC_OscConfig+0x28e>
 8000ac0:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ac4:	fab3 f383 	clz	r3, r3
 8000ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000acc:	f7ff fbc8 	bl	8000260 <HAL_GetTick>
 8000ad0:	4607      	mov	r7, r0
 8000ad2:	2602      	movs	r6, #2
 8000ad4:	fa96 f3a6 	rbit	r3, r6
 8000ad8:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000adc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ade:	fa96 f3a6 	rbit	r3, r6
 8000ae2:	fab3 f383 	clz	r3, r3
 8000ae6:	f003 031f 	and.w	r3, r3, #31
 8000aea:	fa22 f303 	lsr.w	r3, r2, r3
 8000aee:	07d8      	lsls	r0, r3, #31
 8000af0:	d505      	bpl.n	8000afe <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000af2:	f7ff fbb5 	bl	8000260 <HAL_GetTick>
 8000af6:	1bc0      	subs	r0, r0, r7
 8000af8:	2802      	cmp	r0, #2
 8000afa:	d9eb      	bls.n	8000ad4 <HAL_RCC_OscConfig+0x264>
 8000afc:	e720      	b.n	8000940 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000afe:	682b      	ldr	r3, [r5, #0]
 8000b00:	0759      	lsls	r1, r3, #29
 8000b02:	d404      	bmi.n	8000b0e <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b04:	69ea      	ldr	r2, [r5, #28]
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	f040 8081 	bne.w	8000c0e <HAL_RCC_OscConfig+0x39e>
 8000b0c:	e0d8      	b.n	8000cc0 <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4c17      	ldr	r4, [pc, #92]	; (8000b6c <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b10:	4e18      	ldr	r6, [pc, #96]	; (8000b74 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	69e3      	ldr	r3, [r4, #28]
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	61e3      	str	r3, [r4, #28]
 8000b1a:	69e3      	ldr	r3, [r4, #28]
 8000b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b24:	6833      	ldr	r3, [r6, #0]
 8000b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2a:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b2c:	f7ff fb98 	bl	8000260 <HAL_GetTick>
 8000b30:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000b32:	6833      	ldr	r3, [r6, #0]
 8000b34:	05da      	lsls	r2, r3, #23
 8000b36:	d405      	bmi.n	8000b44 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b38:	f7ff fb92 	bl	8000260 <HAL_GetTick>
 8000b3c:	1bc0      	subs	r0, r0, r7
 8000b3e:	2864      	cmp	r0, #100	; 0x64
 8000b40:	d9f7      	bls.n	8000b32 <HAL_RCC_OscConfig+0x2c2>
 8000b42:	e6fd      	b.n	8000940 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b44:	68eb      	ldr	r3, [r5, #12]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d01c      	beq.n	8000b84 <HAL_RCC_OscConfig+0x314>
 8000b4a:	b9ab      	cbnz	r3, 8000b78 <HAL_RCC_OscConfig+0x308>
 8000b4c:	6a23      	ldr	r3, [r4, #32]
 8000b4e:	2602      	movs	r6, #2
 8000b50:	f023 0301 	bic.w	r3, r3, #1
 8000b54:	6223      	str	r3, [r4, #32]
 8000b56:	6a23      	ldr	r3, [r4, #32]
 8000b58:	4637      	mov	r7, r6
 8000b5a:	f023 0304 	bic.w	r3, r3, #4
 8000b5e:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b60:	f7ff fb7e 	bl	8000260 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b64:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b68:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b6a:	e048      	b.n	8000bfe <HAL_RCC_OscConfig+0x38e>
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	42420480 	.word	0x42420480
 8000b74:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b78:	2b05      	cmp	r3, #5
 8000b7a:	6a23      	ldr	r3, [r4, #32]
 8000b7c:	d106      	bne.n	8000b8c <HAL_RCC_OscConfig+0x31c>
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6223      	str	r3, [r4, #32]
 8000b84:	6a23      	ldr	r3, [r4, #32]
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	e005      	b.n	8000b98 <HAL_RCC_OscConfig+0x328>
 8000b8c:	f023 0301 	bic.w	r3, r3, #1
 8000b90:	6223      	str	r3, [r4, #32]
 8000b92:	6a23      	ldr	r3, [r4, #32]
 8000b94:	f023 0304 	bic.w	r3, r3, #4
 8000b98:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b9a:	f7ff fb61 	bl	8000260 <HAL_GetTick>
 8000b9e:	2602      	movs	r6, #2
 8000ba0:	4681      	mov	r9, r0
 8000ba2:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba4:	f241 3788 	movw	r7, #5000	; 0x1388
 8000ba8:	fa96 f3a6 	rbit	r3, r6
 8000bac:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bb0:	b10b      	cbz	r3, 8000bb6 <HAL_RCC_OscConfig+0x346>
 8000bb2:	6a22      	ldr	r2, [r4, #32]
 8000bb4:	e000      	b.n	8000bb8 <HAL_RCC_OscConfig+0x348>
 8000bb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bb8:	fa98 f3a8 	rbit	r3, r8
 8000bbc:	fab3 f383 	clz	r3, r3
 8000bc0:	f003 031f 	and.w	r3, r3, #31
 8000bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc8:	07db      	lsls	r3, r3, #31
 8000bca:	d49b      	bmi.n	8000b04 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bcc:	f7ff fb48 	bl	8000260 <HAL_GetTick>
 8000bd0:	ebc9 0000 	rsb	r0, r9, r0
 8000bd4:	42b8      	cmp	r0, r7
 8000bd6:	d9e7      	bls.n	8000ba8 <HAL_RCC_OscConfig+0x338>
 8000bd8:	e6b2      	b.n	8000940 <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bdc:	fa97 f3a7 	rbit	r3, r7
 8000be0:	fab3 f383 	clz	r3, r3
 8000be4:	f003 031f 	and.w	r3, r3, #31
 8000be8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bec:	07d8      	lsls	r0, r3, #31
 8000bee:	d589      	bpl.n	8000b04 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bf0:	f7ff fb36 	bl	8000260 <HAL_GetTick>
 8000bf4:	ebc8 0000 	rsb	r0, r8, r0
 8000bf8:	4548      	cmp	r0, r9
 8000bfa:	f63f aea1 	bhi.w	8000940 <HAL_RCC_OscConfig+0xd0>
 8000bfe:	fa96 f3a6 	rbit	r3, r6
 8000c02:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0e7      	beq.n	8000bda <HAL_RCC_OscConfig+0x36a>
 8000c0a:	6a22      	ldr	r2, [r4, #32]
 8000c0c:	e7e6      	b.n	8000bdc <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c0e:	4c47      	ldr	r4, [pc, #284]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000c10:	6863      	ldr	r3, [r4, #4]
 8000c12:	f003 030c 	and.w	r3, r3, #12
 8000c16:	2b08      	cmp	r3, #8
 8000c18:	f43f ae54 	beq.w	80008c4 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c1c:	2a02      	cmp	r2, #2
 8000c1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c22:	d15c      	bne.n	8000cde <HAL_RCC_OscConfig+0x46e>
 8000c24:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c28:	fab3 f383 	clz	r3, r3
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000c32:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3a:	f7ff fb11 	bl	8000260 <HAL_GetTick>
 8000c3e:	4680      	mov	r8, r0
 8000c40:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000c44:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c48:	4f38      	ldr	r7, [pc, #224]	; (8000d2c <HAL_RCC_OscConfig+0x4bc>)
 8000c4a:	6822      	ldr	r2, [r4, #0]
 8000c4c:	fa96 f3a6 	rbit	r3, r6
 8000c50:	fab3 f383 	clz	r3, r3
 8000c54:	f003 031f 	and.w	r3, r3, #31
 8000c58:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5c:	07d9      	lsls	r1, r3, #31
 8000c5e:	d431      	bmi.n	8000cc4 <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c60:	6a2e      	ldr	r6, [r5, #32]
 8000c62:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8000c66:	d105      	bne.n	8000c74 <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 8000c6e:	68a9      	ldr	r1, [r5, #8]
 8000c70:	4301      	orrs	r1, r0
 8000c72:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c74:	6863      	ldr	r3, [r4, #4]
 8000c76:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000c78:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000c7c:	4332      	orrs	r2, r6
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	6063      	str	r3, [r4, #4]
 8000c82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c86:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c8a:	fab3 f383 	clz	r3, r3
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000c94:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fae0 	bl	8000260 <HAL_GetTick>
 8000ca0:	4606      	mov	r6, r0
 8000ca2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000ca6:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000caa:	6822      	ldr	r2, [r4, #0]
 8000cac:	fa95 f3a5 	rbit	r3, r5
 8000cb0:	fab3 f383 	clz	r3, r3
 8000cb4:	f003 031f 	and.w	r3, r3, #31
 8000cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbc:	07da      	lsls	r2, r3, #31
 8000cbe:	d508      	bpl.n	8000cd2 <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e02f      	b.n	8000d24 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cc4:	f7ff facc 	bl	8000260 <HAL_GetTick>
 8000cc8:	ebc8 0000 	rsb	r0, r8, r0
 8000ccc:	2802      	cmp	r0, #2
 8000cce:	d9b9      	bls.n	8000c44 <HAL_RCC_OscConfig+0x3d4>
 8000cd0:	e636      	b.n	8000940 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd2:	f7ff fac5 	bl	8000260 <HAL_GetTick>
 8000cd6:	1b80      	subs	r0, r0, r6
 8000cd8:	2802      	cmp	r0, #2
 8000cda:	d9e4      	bls.n	8000ca6 <HAL_RCC_OscConfig+0x436>
 8000cdc:	e630      	b.n	8000940 <HAL_RCC_OscConfig+0xd0>
 8000cde:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ce2:	fab3 f383 	clz	r3, r3
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000cec:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fab4 	bl	8000260 <HAL_GetTick>
 8000cf8:	4606      	mov	r6, r0
 8000cfa:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000cfe:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d02:	6822      	ldr	r2, [r4, #0]
 8000d04:	fa95 f3a5 	rbit	r3, r5
 8000d08:	fab3 f383 	clz	r3, r3
 8000d0c:	f003 031f 	and.w	r3, r3, #31
 8000d10:	fa22 f303 	lsr.w	r3, r2, r3
 8000d14:	07db      	lsls	r3, r3, #31
 8000d16:	d5d3      	bpl.n	8000cc0 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d18:	f7ff faa2 	bl	8000260 <HAL_GetTick>
 8000d1c:	1b80      	subs	r0, r0, r6
 8000d1e:	2802      	cmp	r0, #2
 8000d20:	d9ed      	bls.n	8000cfe <HAL_RCC_OscConfig+0x48e>
 8000d22:	e60d      	b.n	8000940 <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000d24:	b003      	add	sp, #12
 8000d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d32:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d34:	f103 0510 	add.w	r5, r3, #16
 8000d38:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d3a:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d3c:	ac02      	add	r4, sp, #8
 8000d3e:	4622      	mov	r2, r4
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	6859      	ldr	r1, [r3, #4]
 8000d44:	3308      	adds	r3, #8
 8000d46:	c203      	stmia	r2!, {r0, r1}
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	4614      	mov	r4, r2
 8000d4c:	d1f7      	bne.n	8000d3e <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000d4e:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000d50:	4c18      	ldr	r4, [pc, #96]	; (8000db4 <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000d52:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000d56:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d58:	f000 030c 	and.w	r3, r0, #12
 8000d5c:	2b08      	cmp	r3, #8
 8000d5e:	d124      	bne.n	8000daa <HAL_RCC_GetSysClockFreq+0x7a>
 8000d60:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000d64:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000d68:	fab3 f383 	clz	r3, r3
 8000d6c:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 8000d70:	fa22 f303 	lsr.w	r3, r2, r3
 8000d74:	aa06      	add	r2, sp, #24
 8000d76:	4413      	add	r3, r2
 8000d78:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000d7c:	03c3      	lsls	r3, r0, #15
 8000d7e:	d511      	bpl.n	8000da4 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8000d80:	6862      	ldr	r2, [r4, #4]
 8000d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d86:	fa93 f3a3 	rbit	r3, r3
 8000d8a:	fab3 f083 	clz	r0, r3
 8000d8e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8000d92:	40c3      	lsrs	r3, r0
 8000d94:	aa06      	add	r2, sp, #24
 8000d96:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000d98:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_RCC_GetSysClockFreq+0x88>)
 8000d9e:	fbb3 f0f0 	udiv	r0, r3, r0
 8000da2:	e000      	b.n	8000da6 <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_RCC_GetSysClockFreq+0x8c>)
 8000da6:	4348      	muls	r0, r1
 8000da8:	e000      	b.n	8000dac <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000daa:	4803      	ldr	r0, [pc, #12]	; (8000db8 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000dac:	b006      	add	sp, #24
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	08004094 	.word	0x08004094
 8000db4:	40021000 	.word	0x40021000
 8000db8:	007a1200 	.word	0x007a1200
 8000dbc:	003d0900 	.word	0x003d0900

08000dc0 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dc0:	4a54      	ldr	r2, [pc, #336]	; (8000f14 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dc6:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dc8:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dd0:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dd2:	d30a      	bcc.n	8000dea <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dd4:	6831      	ldr	r1, [r6, #0]
 8000dd6:	078c      	lsls	r4, r1, #30
 8000dd8:	d514      	bpl.n	8000e04 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dda:	484f      	ldr	r0, [pc, #316]	; (8000f18 <HAL_RCC_ClockConfig+0x158>)
 8000ddc:	6843      	ldr	r3, [r0, #4]
 8000dde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000de2:	68b3      	ldr	r3, [r6, #8]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	6043      	str	r3, [r0, #4]
 8000de8:	e00c      	b.n	8000e04 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dea:	6813      	ldr	r3, [r2, #0]
 8000dec:	f023 0307 	bic.w	r3, r3, #7
 8000df0:	430b      	orrs	r3, r1
 8000df2:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000df4:	6813      	ldr	r3, [r2, #0]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	d0ea      	beq.n	8000dd4 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000dfe:	2001      	movs	r0, #1
 8000e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e04:	07c8      	lsls	r0, r1, #31
 8000e06:	d406      	bmi.n	8000e16 <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e08:	4a42      	ldr	r2, [pc, #264]	; (8000f14 <HAL_RCC_ClockConfig+0x154>)
 8000e0a:	6813      	ldr	r3, [r2, #0]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	429d      	cmp	r5, r3
 8000e12:	d34a      	bcc.n	8000eaa <HAL_RCC_ClockConfig+0xea>
 8000e14:	e053      	b.n	8000ebe <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e16:	6872      	ldr	r2, [r6, #4]
 8000e18:	4c3f      	ldr	r4, [pc, #252]	; (8000f18 <HAL_RCC_ClockConfig+0x158>)
 8000e1a:	2a01      	cmp	r2, #1
 8000e1c:	d102      	bne.n	8000e24 <HAL_RCC_ClockConfig+0x64>
 8000e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e22:	e004      	b.n	8000e2e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e24:	2a02      	cmp	r2, #2
 8000e26:	bf0c      	ite	eq
 8000e28:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000e2c:	2302      	movne	r3, #2
 8000e2e:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e32:	6821      	ldr	r1, [r4, #0]
 8000e34:	fa93 f3a3 	rbit	r3, r3
 8000e38:	fab3 f383 	clz	r3, r3
 8000e3c:	f003 031f 	and.w	r3, r3, #31
 8000e40:	fa21 f303 	lsr.w	r3, r1, r3
 8000e44:	07d9      	lsls	r1, r3, #31
 8000e46:	d5da      	bpl.n	8000dfe <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e48:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e4a:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e4e:	f023 0303 	bic.w	r3, r3, #3
 8000e52:	431a      	orrs	r2, r3
 8000e54:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e56:	f7ff fa03 	bl	8000260 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e5a:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e5c:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d10c      	bne.n	8000e7c <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e62:	6863      	ldr	r3, [r4, #4]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d0cd      	beq.n	8000e08 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e6c:	f7ff f9f8 	bl	8000260 <HAL_GetTick>
 8000e70:	1bc0      	subs	r0, r0, r7
 8000e72:	4540      	cmp	r0, r8
 8000e74:	d9f5      	bls.n	8000e62 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8000e76:	2003      	movs	r0, #3
 8000e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d10f      	bne.n	8000ea0 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e80:	6863      	ldr	r3, [r4, #4]
 8000e82:	f003 030c 	and.w	r3, r3, #12
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d0be      	beq.n	8000e08 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e8a:	f7ff f9e9 	bl	8000260 <HAL_GetTick>
 8000e8e:	1bc0      	subs	r0, r0, r7
 8000e90:	4540      	cmp	r0, r8
 8000e92:	d9f5      	bls.n	8000e80 <HAL_RCC_ClockConfig+0xc0>
 8000e94:	e7ef      	b.n	8000e76 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e96:	f7ff f9e3 	bl	8000260 <HAL_GetTick>
 8000e9a:	1bc0      	subs	r0, r0, r7
 8000e9c:	4540      	cmp	r0, r8
 8000e9e:	d8ea      	bhi.n	8000e76 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ea0:	6863      	ldr	r3, [r4, #4]
 8000ea2:	f013 0f0c 	tst.w	r3, #12
 8000ea6:	d1f6      	bne.n	8000e96 <HAL_RCC_ClockConfig+0xd6>
 8000ea8:	e7ae      	b.n	8000e08 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eaa:	6813      	ldr	r3, [r2, #0]
 8000eac:	f023 0307 	bic.w	r3, r3, #7
 8000eb0:	432b      	orrs	r3, r5
 8000eb2:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000eb4:	6813      	ldr	r3, [r2, #0]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	429d      	cmp	r5, r3
 8000ebc:	d19f      	bne.n	8000dfe <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ebe:	6831      	ldr	r1, [r6, #0]
 8000ec0:	4c15      	ldr	r4, [pc, #84]	; (8000f18 <HAL_RCC_ClockConfig+0x158>)
 8000ec2:	f011 0f04 	tst.w	r1, #4
 8000ec6:	d005      	beq.n	8000ed4 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ec8:	6863      	ldr	r3, [r4, #4]
 8000eca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ece:	68f3      	ldr	r3, [r6, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ed4:	070b      	lsls	r3, r1, #28
 8000ed6:	d506      	bpl.n	8000ee6 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ed8:	6863      	ldr	r3, [r4, #4]
 8000eda:	6932      	ldr	r2, [r6, #16]
 8000edc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ee0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ee4:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ee6:	f7ff ff23 	bl	8000d30 <HAL_RCC_GetSysClockFreq>
 8000eea:	6863      	ldr	r3, [r4, #4]
 8000eec:	22f0      	movs	r2, #240	; 0xf0
 8000eee:	fa92 f2a2 	rbit	r2, r2
 8000ef2:	fab2 f282 	clz	r2, r2
 8000ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000efa:	40d3      	lsrs	r3, r2
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_RCC_ClockConfig+0x15c>)
 8000efe:	5cd3      	ldrb	r3, [r2, r3]
 8000f00:	40d8      	lsrs	r0, r3
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <HAL_RCC_ClockConfig+0x160>)
 8000f04:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f06:	200f      	movs	r0, #15
 8000f08:	f7ff f97e 	bl	8000208 <HAL_InitTick>
  
  return HAL_OK;
 8000f0c:	2000      	movs	r0, #0
}
 8000f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f12:	bf00      	nop
 8000f14:	40022000 	.word	0x40022000
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	080040ec 	.word	0x080040ec
 8000f20:	20000000 	.word	0x20000000

08000f24 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000f24:	4b01      	ldr	r3, [pc, #4]	; (8000f2c <HAL_RCC_GetHCLKFreq+0x8>)
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000000 	.word	0x20000000

08000f30 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	fa92 f2a2 	rbit	r2, r2
 8000f3c:	fab2 f282 	clz	r2, r2
 8000f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000f44:	40d3      	lsrs	r3, r2
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000f48:	5cd3      	ldrb	r3, [r2, r3]
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000f4c:	6810      	ldr	r0, [r2, #0]
}    
 8000f4e:	40d8      	lsrs	r0, r3
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000
 8000f58:	080040fc 	.word	0x080040fc
 8000f5c:	20000000 	.word	0x20000000

08000f60 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f62:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	fa92 f2a2 	rbit	r2, r2
 8000f6c:	fab2 f282 	clz	r2, r2
 8000f70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000f74:	40d3      	lsrs	r3, r2
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000f78:	5cd3      	ldrb	r3, [r2, r3]
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000f7c:	6810      	ldr	r0, [r2, #0]
} 
 8000f7e:	40d8      	lsrs	r0, r3
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000
 8000f88:	080040fc 	.word	0x080040fc
 8000f8c:	20000000 	.word	0x20000000

08000f90 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000f90:	6803      	ldr	r3, [r0, #0]
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000f92:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000f96:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000f98:	07d8      	lsls	r0, r3, #31
 8000f9a:	d564      	bpl.n	8001066 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f9c:	4c39      	ldr	r4, [pc, #228]	; (8001084 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9e:	4e3a      	ldr	r6, [pc, #232]	; (8001088 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	69e3      	ldr	r3, [r4, #28]
 8000fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	61e3      	str	r3, [r4, #28]
 8000fa8:	69e3      	ldr	r3, [r4, #28]
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb2:	6833      	ldr	r3, [r6, #0]
 8000fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb8:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000fba:	f7ff f951 	bl	8000260 <HAL_GetTick>
 8000fbe:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000fc0:	6833      	ldr	r3, [r6, #0]
 8000fc2:	05d9      	lsls	r1, r3, #23
 8000fc4:	d406      	bmi.n	8000fd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc6:	f7ff f94b 	bl	8000260 <HAL_GetTick>
 8000fca:	1bc0      	subs	r0, r0, r7
 8000fcc:	2864      	cmp	r0, #100	; 0x64
 8000fce:	d9f7      	bls.n	8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x30>
      {
        return HAL_TIMEOUT;
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	e054      	b.n	800107e <HAL_RCCEx_PeriphCLKConfig+0xee>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000fd4:	6a23      	ldr	r3, [r4, #32]
 8000fd6:	482b      	ldr	r0, [pc, #172]	; (8001084 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000fd8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000fdc:	d106      	bne.n	8000fec <HAL_RCCEx_PeriphCLKConfig+0x5c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000fde:	6a23      	ldr	r3, [r4, #32]
 8000fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000fe4:	686b      	ldr	r3, [r5, #4]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	6223      	str	r3, [r4, #32]
 8000fea:	e03c      	b.n	8001066 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000fec:	686a      	ldr	r2, [r5, #4]
 8000fee:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d0f3      	beq.n	8000fde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000ff6:	6a01      	ldr	r1, [r0, #32]
 8000ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffc:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 8001000:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001004:	fab2 f282 	clz	r2, r2
 8001008:	4e20      	ldr	r6, [pc, #128]	; (800108c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800100a:	f04f 0e01 	mov.w	lr, #1
 800100e:	f846 e022 	str.w	lr, [r6, r2, lsl #2]
 8001012:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001016:	fab3 f383 	clz	r3, r3
 800101a:	2200      	movs	r2, #0
 800101c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001020:	07ca      	lsls	r2, r1, #31
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001022:	6207      	str	r7, [r0, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001024:	d5db      	bpl.n	8000fde <HAL_RCCEx_PeriphCLKConfig+0x4e>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8001026:	f7ff f91b 	bl	8000260 <HAL_GetTick>
 800102a:	2602      	movs	r6, #2
 800102c:	4680      	mov	r8, r0
 800102e:	4637      	mov	r7, r6
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001030:	f241 3988 	movw	r9, #5000	; 0x1388
 8001034:	fa96 f3a6 	rbit	r3, r6
 8001038:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800103c:	b10b      	cbz	r3, 8001042 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 800103e:	6a22      	ldr	r2, [r4, #32]
 8001040:	e000      	b.n	8001044 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001042:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001044:	fa97 f3a7 	rbit	r3, r7
 8001048:	fab3 f383 	clz	r3, r3
 800104c:	f003 031f 	and.w	r3, r3, #31
 8001050:	fa22 f303 	lsr.w	r3, r2, r3
 8001054:	07db      	lsls	r3, r3, #31
 8001056:	d4c2      	bmi.n	8000fde <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001058:	f7ff f902 	bl	8000260 <HAL_GetTick>
 800105c:	ebc8 0000 	rsb	r0, r8, r0
 8001060:	4548      	cmp	r0, r9
 8001062:	d9e7      	bls.n	8001034 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001064:	e7b4      	b.n	8000fd0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001066:	6828      	ldr	r0, [r5, #0]
 8001068:	f010 0002 	ands.w	r0, r0, #2
 800106c:	d007      	beq.n	800107e <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800106e:	4905      	ldr	r1, [pc, #20]	; (8001084 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001070:	2000      	movs	r0, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001072:	684b      	ldr	r3, [r1, #4]
 8001074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001078:	68ab      	ldr	r3, [r5, #8]
 800107a:	4313      	orrs	r3, r2
 800107c:	604b      	str	r3, [r1, #4]
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 800107e:	b003      	add	sp, #12
 8001080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001084:	40021000 	.word	0x40021000
 8001088:	40007000 	.word	0x40007000
 800108c:	42420400 	.word	0x42420400

08001090 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001094:	6806      	ldr	r6, [r0, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 8001096:	6881      	ldr	r1, [r0, #8]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001098:	6933      	ldr	r3, [r6, #16]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800109a:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800109c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80010a0:	68c3      	ldr	r3, [r0, #12]
 80010a2:	2419      	movs	r4, #25
 80010a4:	4313      	orrs	r3, r2
 80010a6:	6133      	str	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 80010a8:	6903      	ldr	r3, [r0, #16]
 80010aa:	68f2      	ldr	r2, [r6, #12]
 80010ac:	4319      	orrs	r1, r3
 80010ae:	6943      	ldr	r3, [r0, #20]
 80010b0:	4319      	orrs	r1, r3
 80010b2:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 80010b6:	f023 030c 	bic.w	r3, r3, #12
 80010ba:	430b      	orrs	r3, r1
 80010bc:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80010be:	6973      	ldr	r3, [r6, #20]
 80010c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80010c4:	6983      	ldr	r3, [r0, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	6173      	str	r3, [r6, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <UART_SetConfig+0x130>)
 80010cc:	429e      	cmp	r6, r3
 80010ce:	d131      	bne.n	8001134 <UART_SetConfig+0xa4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010d0:	f7ff ff46 	bl	8000f60 <HAL_RCC_GetPCLK2Freq>
 80010d4:	4360      	muls	r0, r4
 80010d6:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80010da:	f04f 0864 	mov.w	r8, #100	; 0x64
 80010de:	00bf      	lsls	r7, r7, #2
 80010e0:	fbb0 f7f7 	udiv	r7, r0, r7
 80010e4:	f7ff ff3c 	bl	8000f60 <HAL_RCC_GetPCLK2Freq>
 80010e8:	4360      	muls	r0, r4
 80010ea:	f8d9 5004 	ldr.w	r5, [r9, #4]
 80010ee:	fbb7 f7f8 	udiv	r7, r7, r8
 80010f2:	00ad      	lsls	r5, r5, #2
 80010f4:	fbb0 f5f5 	udiv	r5, r0, r5
 80010f8:	f7ff ff32 	bl	8000f60 <HAL_RCC_GetPCLK2Freq>
 80010fc:	4360      	muls	r0, r4
 80010fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001102:	013f      	lsls	r7, r7, #4
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	fbb0 f0f3 	udiv	r0, r0, r3
 800110a:	fbb0 f0f8 	udiv	r0, r0, r8
 800110e:	fb08 5510 	mls	r5, r8, r0, r5
 8001112:	f7ff ff25 	bl	8000f60 <HAL_RCC_GetPCLK2Freq>
 8001116:	012d      	lsls	r5, r5, #4
 8001118:	3532      	adds	r5, #50	; 0x32
 800111a:	fbb5 f5f8 	udiv	r5, r5, r8
 800111e:	4360      	muls	r0, r4
 8001120:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001124:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001128:	0089      	lsls	r1, r1, #2
 800112a:	fbb0 faf1 	udiv	sl, r0, r1
 800112e:	f7ff ff17 	bl	8000f60 <HAL_RCC_GetPCLK2Freq>
 8001132:	e030      	b.n	8001196 <UART_SetConfig+0x106>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001134:	f7ff fefc 	bl	8000f30 <HAL_RCC_GetPCLK1Freq>
 8001138:	4360      	muls	r0, r4
 800113a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800113e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001142:	00bf      	lsls	r7, r7, #2
 8001144:	fbb0 f7f7 	udiv	r7, r0, r7
 8001148:	f7ff fef2 	bl	8000f30 <HAL_RCC_GetPCLK1Freq>
 800114c:	4360      	muls	r0, r4
 800114e:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8001152:	fbb7 f7f8 	udiv	r7, r7, r8
 8001156:	00ad      	lsls	r5, r5, #2
 8001158:	fbb0 f5f5 	udiv	r5, r0, r5
 800115c:	f7ff fee8 	bl	8000f30 <HAL_RCC_GetPCLK1Freq>
 8001160:	4360      	muls	r0, r4
 8001162:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001166:	013f      	lsls	r7, r7, #4
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	fbb0 f0f3 	udiv	r0, r0, r3
 800116e:	fbb0 f0f8 	udiv	r0, r0, r8
 8001172:	fb08 5510 	mls	r5, r8, r0, r5
 8001176:	f7ff fedb 	bl	8000f30 <HAL_RCC_GetPCLK1Freq>
 800117a:	012d      	lsls	r5, r5, #4
 800117c:	3532      	adds	r5, #50	; 0x32
 800117e:	fbb5 f5f8 	udiv	r5, r5, r8
 8001182:	4360      	muls	r0, r4
 8001184:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001188:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800118c:	0089      	lsls	r1, r1, #2
 800118e:	fbb0 faf1 	udiv	sl, r0, r1
 8001192:	f7ff fecd 	bl	8000f30 <HAL_RCC_GetPCLK1Freq>
 8001196:	4344      	muls	r4, r0
 8001198:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800119c:	0080      	lsls	r0, r0, #2
 800119e:	fbb4 f0f0 	udiv	r0, r4, r0
 80011a2:	fbb0 f0f8 	udiv	r0, r0, r8
 80011a6:	fb08 a210 	mls	r2, r8, r0, sl
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	3232      	adds	r2, #50	; 0x32
 80011ae:	fbb2 f3f8 	udiv	r3, r2, r8
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	442b      	add	r3, r5
 80011b8:	441f      	add	r7, r3
 80011ba:	60b7      	str	r7, [r6, #8]
 80011bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011c0:	40013800 	.word	0x40013800

080011c4 <UART_WaitOnFlagUntilTimeout.constprop.1>:
  * @param  Flag: specifies the UART flag to check.
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 80011c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011c6:	4604      	mov	r4, r0
 80011c8:	460e      	mov	r6, r1
 80011ca:	4615      	mov	r5, r2
{
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80011cc:	f7ff f848 	bl	8000260 <HAL_GetTick>
 80011d0:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80011d2:	6822      	ldr	r2, [r4, #0]
 80011d4:	6813      	ldr	r3, [r2, #0]
 80011d6:	ea36 0303 	bics.w	r3, r6, r3
 80011da:	d021      	beq.n	8001220 <UART_WaitOnFlagUntilTimeout.constprop.1+0x5c>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80011dc:	1c6b      	adds	r3, r5, #1
 80011de:	d0f9      	beq.n	80011d4 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80011e0:	b9c5      	cbnz	r5, 8001214 <UART_WaitOnFlagUntilTimeout.constprop.1+0x50>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011e2:	6823      	ldr	r3, [r4, #0]
          huart->State= HAL_UART_STATE_READY;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_TIMEOUT;
 80011e4:	2003      	movs	r0, #3
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ec:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	f022 0220 	bic.w	r2, r2, #32
 80011f4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011fc:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80011fe:	695a      	ldr	r2, [r3, #20]
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 8001206:	2301      	movs	r3, #1
 8001208:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800120c:	2300      	movs	r3, #0
 800120e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001214:	f7ff f824 	bl	8000260 <HAL_GetTick>
 8001218:	1bc0      	subs	r0, r0, r7
 800121a:	4285      	cmp	r5, r0
 800121c:	d2d9      	bcs.n	80011d2 <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 800121e:	e7e0      	b.n	80011e2 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1e>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001220:	2000      	movs	r0, #0
}
 8001222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001224 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001224:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001226:	4604      	mov	r4, r0
 8001228:	b330      	cbz	r0, 8001278 <HAL_UART_Init+0x54>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 800122a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800122e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001232:	b91b      	cbnz	r3, 800123c <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001234:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001238:	f002 f9de 	bl	80035f8 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800123c:	6822      	ldr	r2, [r4, #0]
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 800123e:	2302      	movs	r3, #2
 8001240:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001244:	68d3      	ldr	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001246:	4620      	mov	r0, r4
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001248:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800124c:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800124e:	f7ff ff1f 	bl	8001090 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001252:	6823      	ldr	r3, [r4, #0]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001254:	2000      	movs	r0, #0
  UART_SetConfig(huart);
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800125c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800125e:	695a      	ldr	r2, [r3, #20]
 8001260:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001264:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800126c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
 800126e:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001270:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8001272:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001276:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001278:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 800127a:	bd10      	pop	{r4, pc}

0800127c <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800127c:	b570      	push	{r4, r5, r6, lr}
 800127e:	460d      	mov	r5, r1
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 8001280:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001284:	4604      	mov	r4, r0
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 8001286:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001288:	2901      	cmp	r1, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800128a:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 800128c:	d001      	beq.n	8001292 <HAL_UART_Transmit+0x16>
 800128e:	2922      	cmp	r1, #34	; 0x22
 8001290:	d14e      	bne.n	8001330 <HAL_UART_Transmit+0xb4>
  {
    if((pData == NULL) || (Size == 0))
 8001292:	2d00      	cmp	r5, #0
 8001294:	d04a      	beq.n	800132c <HAL_UART_Transmit+0xb0>
 8001296:	2a00      	cmp	r2, #0
 8001298:	d048      	beq.n	800132c <HAL_UART_Transmit+0xb0>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800129a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d046      	beq.n	8001330 <HAL_UART_Transmit+0xb4>
 80012a2:	2301      	movs	r3, #1
 80012a4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	63e3      	str	r3, [r4, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80012ac:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    huart->TxXferSize = Size;
 80012b0:	84a2      	strh	r2, [r4, #36]	; 0x24
    /* Process Locked */
    __HAL_LOCK(huart);

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80012b2:	2b22      	cmp	r3, #34	; 0x22
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80012b4:	bf0c      	ite	eq
 80012b6:	2332      	moveq	r3, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80012b8:	2312      	movne	r3, #18
 80012ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 80012be:	84e2      	strh	r2, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0)
 80012c0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80012c2:	b302      	cbz	r2, 8001306 <HAL_UART_Transmit+0x8a>
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012c4:	68a3      	ldr	r3, [r4, #8]

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 80012c6:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 80012cc:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80012ce:	f04f 0180 	mov.w	r1, #128	; 0x80
 80012d2:	4632      	mov	r2, r6
 80012d4:	4620      	mov	r0, r4
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012d6:	d10d      	bne.n	80012f4 <HAL_UART_Transmit+0x78>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80012d8:	f7ff ff74 	bl	80011c4 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80012dc:	b108      	cbz	r0, 80012e2 <HAL_UART_Transmit+0x66>
        {
          return HAL_TIMEOUT;
 80012de:	2003      	movs	r0, #3
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80012e2:	882b      	ldrh	r3, [r5, #0]
 80012e4:	6822      	ldr	r2, [r4, #0]
 80012e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012ea:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80012ec:	6923      	ldr	r3, [r4, #16]
 80012ee:	b943      	cbnz	r3, 8001302 <HAL_UART_Transmit+0x86>
        {
          pData +=2;
 80012f0:	3502      	adds	r5, #2
 80012f2:	e7e5      	b.n	80012c0 <HAL_UART_Transmit+0x44>
          pData +=1;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80012f4:	f7ff ff66 	bl	80011c4 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d1f0      	bne.n	80012de <HAL_UART_Transmit+0x62>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	782a      	ldrb	r2, [r5, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	3501      	adds	r5, #1
 8001304:	e7dc      	b.n	80012c0 <HAL_UART_Transmit+0x44>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8001306:	4632      	mov	r2, r6
 8001308:	2140      	movs	r1, #64	; 0x40
 800130a:	4620      	mov	r0, r4
 800130c:	f7ff ff5a 	bl	80011c4 <UART_WaitOnFlagUntilTimeout.constprop.1>
 8001310:	2800      	cmp	r0, #0
 8001312:	d1e4      	bne.n	80012de <HAL_UART_Transmit+0x62>
    { 
      return HAL_TIMEOUT;
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001314:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001318:	2b32      	cmp	r3, #50	; 0x32
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 800131a:	bf0c      	ite	eq
 800131c:	2322      	moveq	r3, #34	; 0x22
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 800131e:	2301      	movne	r3, #1
 8001320:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001324:	2300      	movs	r3, #0
 8001326:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

    return HAL_OK;
 800132a:	bd70      	pop	{r4, r5, r6, pc}
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
  {
    if((pData == NULL) || (Size == 0))
    {
      return  HAL_ERROR;
 800132c:	2001      	movs	r0, #1
 800132e:	bd70      	pop	{r4, r5, r6, pc}

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001330:	2002      	movs	r0, #2
  }
}
 8001332:	bd70      	pop	{r4, r5, r6, pc}

08001334 <HAL_UART_Receive_IT>:
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 8001334:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001338:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 800133a:	2b01      	cmp	r3, #1
 800133c:	d001      	beq.n	8001342 <HAL_UART_Receive_IT+0xe>
 800133e:	2b12      	cmp	r3, #18
 8001340:	d128      	bne.n	8001394 <HAL_UART_Receive_IT+0x60>
  {
    if((pData == NULL ) || (Size == 0))
 8001342:	b329      	cbz	r1, 8001390 <HAL_UART_Receive_IT+0x5c>
 8001344:	b322      	cbz	r2, 8001390 <HAL_UART_Receive_IT+0x5c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001346:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800134a:	2b01      	cmp	r3, #1
 800134c:	d022      	beq.n	8001394 <HAL_UART_Receive_IT+0x60>
 800134e:	2301      	movs	r3, #1
 8001350:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001354:	2300      	movs	r3, #0
 8001356:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8001358:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 800135a:	85c2      	strh	r2, [r0, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800135c:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001360:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8001364:	2a12      	cmp	r2, #18

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001366:	6803      	ldr	r3, [r0, #0]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001368:	bf0c      	ite	eq
 800136a:	2232      	moveq	r2, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 800136c:	2222      	movne	r2, #34	; 0x22
 800136e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001372:	68da      	ldr	r2, [r3, #12]
    }

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pRxBuffPtr = pData;
 8001374:	6281      	str	r1, [r0, #40]	; 0x28

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800137a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800137c:	695a      	ldr	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);

    return HAL_OK;
 800137e:	2000      	movs	r0, #0

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001380:	f042 0201 	orr.w	r2, r2, #1
 8001384:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	f042 0220 	orr.w	r2, r2, #32
 800138c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800138e:	4770      	bx	lr
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
  {
    if((pData == NULL ) || (Size == 0))
    {
      return HAL_ERROR;
 8001390:	2001      	movs	r0, #1
 8001392:	4770      	bx	lr

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001394:	2002      	movs	r0, #2
  }
}
 8001396:	4770      	bx	lr

08001398 <HAL_UART_TxCpltCallback>:
 8001398:	4770      	bx	lr

0800139a <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800139a:	4770      	bx	lr

0800139c <HAL_UART_IRQHandler>:
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 800139c:	6802      	ldr	r2, [r0, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800139e:	b513      	push	{r0, r1, r4, lr}
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80013a0:	6811      	ldr	r1, [r2, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80013a2:	4604      	mov	r4, r0
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80013a4:	07c9      	lsls	r1, r1, #31
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 80013a6:	68d3      	ldr	r3, [r2, #12]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80013a8:	d505      	bpl.n	80013b6 <HAL_UART_IRQHandler+0x1a>
 80013aa:	05db      	lsls	r3, r3, #23
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80013ac:	bf42      	ittt	mi
 80013ae:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 80013b0:	f043 0301 	orrmi.w	r3, r3, #1
 80013b4:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 80013b6:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80013b8:	6953      	ldr	r3, [r2, #20]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80013ba:	0788      	lsls	r0, r1, #30
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80013bc:	f003 0301 	and.w	r3, r3, #1
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80013c0:	d504      	bpl.n	80013cc <HAL_UART_IRQHandler+0x30>
 80013c2:	b11b      	cbz	r3, 80013cc <HAL_UART_IRQHandler+0x30>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80013c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80013c6:	f041 0104 	orr.w	r1, r1, #4
 80013ca:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80013cc:	6811      	ldr	r1, [r2, #0]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80013ce:	0749      	lsls	r1, r1, #29
 80013d0:	d504      	bpl.n	80013dc <HAL_UART_IRQHandler+0x40>
 80013d2:	b11b      	cbz	r3, 80013dc <HAL_UART_IRQHandler+0x40>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80013d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80013d6:	f041 0102 	orr.w	r1, r1, #2
 80013da:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80013dc:	6811      	ldr	r1, [r2, #0]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80013de:	0708      	lsls	r0, r1, #28
 80013e0:	d504      	bpl.n	80013ec <HAL_UART_IRQHandler+0x50>
 80013e2:	b11b      	cbz	r3, 80013ec <HAL_UART_IRQHandler+0x50>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80013e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80013e6:	f043 0308 	orr.w	r3, r3, #8
 80013ea:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80013ec:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80013ee:	68d3      	ldr	r3, [r2, #12]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80013f0:	0689      	lsls	r1, r1, #26
 80013f2:	d542      	bpl.n	800147a <HAL_UART_IRQHandler+0xde>
 80013f4:	0698      	lsls	r0, r3, #26
 80013f6:	d540      	bpl.n	800147a <HAL_UART_IRQHandler+0xde>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State; 
 80013f8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80013fc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8001400:	2b22      	cmp	r3, #34	; 0x22
 8001402:	d13a      	bne.n	800147a <HAL_UART_IRQHandler+0xde>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001404:	68a3      	ldr	r3, [r4, #8]
 8001406:	6921      	ldr	r1, [r4, #16]
 8001408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800140c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800140e:	d10b      	bne.n	8001428 <HAL_UART_IRQHandler+0x8c>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001410:	6852      	ldr	r2, [r2, #4]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001412:	b921      	cbnz	r1, 800141e <HAL_UART_IRQHandler+0x82>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001418:	f823 2b02 	strh.w	r2, [r3], #2
 800141c:	e002      	b.n	8001424 <HAL_UART_IRQHandler+0x88>
        huart->pRxBuffPtr += 2;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1;
 8001424:	62a3      	str	r3, [r4, #40]	; 0x28
 8001426:	e00a      	b.n	800143e <HAL_UART_IRQHandler+0xa2>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001428:	b919      	cbnz	r1, 8001432 <HAL_UART_IRQHandler+0x96>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800142a:	1c59      	adds	r1, r3, #1
 800142c:	62a1      	str	r1, [r4, #40]	; 0x28
 800142e:	6852      	ldr	r2, [r2, #4]
 8001430:	e004      	b.n	800143c <HAL_UART_IRQHandler+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001432:	6852      	ldr	r2, [r2, #4]
 8001434:	1c59      	adds	r1, r3, #1
 8001436:	62a1      	str	r1, [r4, #40]	; 0x28
 8001438:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800143c:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 800143e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001440:	3b01      	subs	r3, #1
 8001442:	b29b      	uxth	r3, r3
 8001444:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001446:	b9c3      	cbnz	r3, 800147a <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001448:	6823      	ldr	r3, [r4, #0]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

        huart->State = HAL_UART_STATE_READY;
      }
      HAL_UART_RxCpltCallback(huart);
 800144a:	4620      	mov	r0, r4
      }
    }

    if(--huart->RxXferCount == 0)
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	f022 0220 	bic.w	r2, r2, #32
 8001452:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001454:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001458:	2a32      	cmp	r2, #50	; 0x32
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800145a:	bf17      	itett	ne
 800145c:	68da      	ldrne	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 800145e:	2312      	moveq	r3, #18
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001460:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8001464:	60da      	strne	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001466:	bf1f      	itttt	ne
 8001468:	695a      	ldrne	r2, [r3, #20]
 800146a:	f022 0201 	bicne.w	r2, r2, #1
 800146e:	615a      	strne	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 8001470:	2301      	movne	r3, #1
 8001472:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 8001476:	f002 f82d 	bl	80034d4 <HAL_UART_RxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  { 
    UART_Receive_IT(huart);
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 800147e:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001480:	0609      	lsls	r1, r1, #24
 8001482:	d528      	bpl.n	80014d6 <HAL_UART_IRQHandler+0x13a>
 8001484:	0610      	lsls	r0, r2, #24
 8001486:	d526      	bpl.n	80014d6 <HAL_UART_IRQHandler+0x13a>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 8001488:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 800148c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8001490:	2a12      	cmp	r2, #18
 8001492:	d120      	bne.n	80014d6 <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001494:	68a2      	ldr	r2, [r4, #8]
 8001496:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800149a:	6a22      	ldr	r2, [r4, #32]
 800149c:	d10a      	bne.n	80014b4 <HAL_UART_IRQHandler+0x118>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800149e:	8811      	ldrh	r1, [r2, #0]
 80014a0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80014a4:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80014a6:	6921      	ldr	r1, [r4, #16]
 80014a8:	b909      	cbnz	r1, 80014ae <HAL_UART_IRQHandler+0x112>
      {
        huart->pTxBuffPtr += 2;
 80014aa:	3202      	adds	r2, #2
 80014ac:	e000      	b.n	80014b0 <HAL_UART_IRQHandler+0x114>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 80014ae:	3201      	adds	r2, #1
 80014b0:	6222      	str	r2, [r4, #32]
 80014b2:	e003      	b.n	80014bc <HAL_UART_IRQHandler+0x120>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80014b4:	1c51      	adds	r1, r2, #1
 80014b6:	6221      	str	r1, [r4, #32]
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0)
 80014bc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80014be:	3a01      	subs	r2, #1
 80014c0:	b292      	uxth	r2, r2
 80014c2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80014c4:	b93a      	cbnz	r2, 80014d6 <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014d4:	60da      	str	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_Transmit_IT(huart);
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 80014d6:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 80014d8:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80014da:	0649      	lsls	r1, r1, #25
 80014dc:	d510      	bpl.n	8001500 <HAL_UART_IRQHandler+0x164>
 80014de:	0652      	lsls	r2, r2, #25
 80014e0:	d50e      	bpl.n	8001500 <HAL_UART_IRQHandler+0x164>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80014e2:	68da      	ldr	r2, [r3, #12]
  else
  {
    huart->State = HAL_UART_STATE_READY;
  }
  
  HAL_UART_TxCpltCallback(huart);
 80014e4:	4620      	mov	r0, r4
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80014e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014ea:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80014ec:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80014f0:	2b32      	cmp	r3, #50	; 0x32
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 80014f2:	bf0c      	ite	eq
 80014f4:	2322      	moveq	r3, #34	; 0x22
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 80014f6:	2301      	movne	r3, #1
 80014f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 80014fc:	f7ff ff4c 	bl	8001398 <HAL_UART_TxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_EndTransmit_IT(huart);
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001500:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001502:	b15b      	cbz	r3, 800151c <HAL_UART_IRQHandler+0x180>
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 8001504:	6823      	ldr	r3, [r4, #0]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
    
    HAL_UART_ErrorCallback(huart);
 8001506:	4620      	mov	r0, r4
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	9201      	str	r2, [sp, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	9b01      	ldr	r3, [sp, #4]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8001512:	2301      	movs	r3, #1
 8001514:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 8001518:	f7ff ff3f 	bl	800139a <HAL_UART_ErrorCallback>
  }  
}
 800151c:	b002      	add	sp, #8
 800151e:	bd10      	pop	{r4, pc}

08001520 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001520:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001522:	f000 fe17 	bl	8002154 <vTaskStartScheduler>
  
  return osOK;
}
 8001526:	2000      	movs	r0, #0
 8001528:	bd08      	pop	{r3, pc}

0800152a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800152a:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800152c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001530:	2500      	movs	r5, #0
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8001532:	2c84      	cmp	r4, #132	; 0x84
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001534:	bf08      	it	eq
 8001536:	462c      	moveq	r4, r5
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001538:	b086      	sub	sp, #24
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800153a:	8a02      	ldrh	r2, [r0, #16]
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
    fpriority += (priority - osPriorityIdle);
 800153c:	bf18      	it	ne
 800153e:	3403      	addne	r4, #3
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001540:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001542:	e890 0042 	ldmia.w	r0, {r1, r6}
 8001546:	a805      	add	r0, sp, #20
 8001548:	9001      	str	r0, [sp, #4]
 800154a:	9503      	str	r5, [sp, #12]
 800154c:	9502      	str	r5, [sp, #8]
 800154e:	9400      	str	r4, [sp, #0]
 8001550:	4630      	mov	r0, r6
 8001552:	f000 fd1f 	bl	8001f94 <xTaskGenericCreate>
 8001556:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 8001558:	bf0c      	ite	eq
 800155a:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 800155c:	2000      	movne	r0, #0
  }
  
  return handle;
}
 800155e:	b006      	add	sp, #24
 8001560:	bd70      	pop	{r4, r5, r6, pc}

08001562 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001562:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001564:	2800      	cmp	r0, #0
 8001566:	bf08      	it	eq
 8001568:	2001      	moveq	r0, #1
 800156a:	f000 ff25 	bl	80023b8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800156e:	2000      	movs	r0, #0
 8001570:	bd08      	pop	{r3, pc}

08001572 <osSemaphoreCreate>:
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 8001572:	2901      	cmp	r1, #1
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 8001574:	b510      	push	{r4, lr}
 8001576:	4608      	mov	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 8001578:	d10b      	bne.n	8001592 <osSemaphoreCreate+0x20>
    vSemaphoreCreateBinary(sema);
 800157a:	2203      	movs	r2, #3
 800157c:	2100      	movs	r1, #0
 800157e:	f000 fb4d 	bl	8001c1c <xQueueGenericCreate>
 8001582:	4604      	mov	r4, r0
 8001584:	b138      	cbz	r0, 8001596 <osSemaphoreCreate+0x24>
 8001586:	2300      	movs	r3, #0
 8001588:	461a      	mov	r2, r3
 800158a:	4619      	mov	r1, r3
 800158c:	f000 fb6c 	bl	8001c68 <xQueueGenericSend>
 8001590:	e001      	b.n	8001596 <osSemaphoreCreate+0x24>
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
#else
  return NULL;
 8001592:	2000      	movs	r0, #0
 8001594:	bd10      	pop	{r4, pc}
 8001596:	4620      	mov	r0, r4
#endif
}
 8001598:	bd10      	pop	{r4, pc}

0800159a <osMessageCreate>:
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
  (void) thread_id;
  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800159a:	2200      	movs	r2, #0
 800159c:	c803      	ldmia	r0, {r0, r1}
 800159e:	f000 bb3d 	b.w	8001c1c <xQueueGenericCreate>
	...

080015a4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80015a6:	2600      	movs	r6, #0
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80015a8:	b085      	sub	sp, #20
 80015aa:	4604      	mov	r4, r0
 80015ac:	4617      	mov	r7, r2
 80015ae:	4608      	mov	r0, r1
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80015b0:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80015b2:	9602      	str	r6, [sp, #8]
 80015b4:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 80015b6:	b909      	cbnz	r1, 80015bc <osMessageGet+0x18>
    event.status = osErrorParameter;
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	e01f      	b.n	80015fc <osMessageGet+0x58>
    return event;
  }
  
  taskWoken = pdFALSE;
 80015bc:	9600      	str	r6, [sp, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80015be:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80015c2:	b183      	cbz	r3, 80015e6 <osMessageGet+0x42>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80015c4:	466a      	mov	r2, sp
 80015c6:	a902      	add	r1, sp, #8
 80015c8:	f000 fc70 	bl	8001eac <xQueueReceiveFromISR>
 80015cc:	2801      	cmp	r0, #1
      /* We have mail */
      event.status = osEventMessage;
 80015ce:	bf04      	itt	eq
 80015d0:	2310      	moveq	r3, #16
 80015d2:	9301      	streq	r3, [sp, #4]
    }
    else {
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80015d4:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 80015d6:	bf18      	it	ne
 80015d8:	9601      	strne	r6, [sp, #4]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80015da:	b183      	cbz	r3, 80015fe <osMessageGet+0x5a>
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <osMessageGet+0x68>)
 80015de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e00b      	b.n	80015fe <osMessageGet+0x5a>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80015e6:	a902      	add	r1, sp, #8
 80015e8:	f000 fbca 	bl	8001d80 <xQueueGenericReceive>
 80015ec:	2801      	cmp	r0, #1
 80015ee:	d101      	bne.n	80015f4 <osMessageGet+0x50>
      /* We have mail */
      event.status = osEventMessage;
 80015f0:	2310      	movs	r3, #16
 80015f2:	e003      	b.n	80015fc <osMessageGet+0x58>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80015f4:	2f00      	cmp	r7, #0
 80015f6:	bf0c      	ite	eq
 80015f8:	2300      	moveq	r3, #0
 80015fa:	2340      	movne	r3, #64	; 0x40
 80015fc:	9301      	str	r3, [sp, #4]
    }
  }
  
  return event;
 80015fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001606:	4620      	mov	r0, r4
 8001608:	b005      	add	sp, #20
 800160a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160c:	e000ed04 	.word	0xe000ed04

08001610 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001610:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001612:	f001 f81b 	bl	800264c <xTaskGetSchedulerState>
 8001616:	2801      	cmp	r0, #1
 8001618:	d003      	beq.n	8001622 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800161a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800161e:	f000 b8e7 	b.w	80017f0 <xPortSysTickHandler>
 8001622:	bd08      	pop	{r3, pc}

08001624 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001624:	f100 0308 	add.w	r3, r0, #8
 8001628:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800162a:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800162e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001630:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001632:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001634:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001636:	6003      	str	r3, [r0, #0]
 8001638:	4770      	bx	lr

0800163a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800163a:	2300      	movs	r3, #0
 800163c:	6103      	str	r3, [r0, #16]
 800163e:	4770      	bx	lr

08001640 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001640:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001642:	689a      	ldr	r2, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001644:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001646:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800164c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800164e:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001650:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001652:	3301      	adds	r3, #1
 8001654:	6003      	str	r3, [r0, #0]
 8001656:	4770      	bx	lr

08001658 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001658:	680a      	ldr	r2, [r1, #0]
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800165a:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800165c:	1c53      	adds	r3, r2, #1
 800165e:	d101      	bne.n	8001664 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001660:	6903      	ldr	r3, [r0, #16]
 8001662:	e007      	b.n	8001674 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001664:	f100 0308 	add.w	r3, r0, #8
 8001668:	685c      	ldr	r4, [r3, #4]
 800166a:	6825      	ldr	r5, [r4, #0]
 800166c:	42aa      	cmp	r2, r5
 800166e:	d301      	bcc.n	8001674 <vListInsert+0x1c>
 8001670:	4623      	mov	r3, r4
 8001672:	e7f9      	b.n	8001668 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001678:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800167a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800167c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800167e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001680:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001682:	3301      	adds	r3, #1
 8001684:	6003      	str	r3, [r0, #0]
 8001686:	bd30      	pop	{r4, r5, pc}

08001688 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001688:	6841      	ldr	r1, [r0, #4]
 800168a:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800168c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800168e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001690:	6882      	ldr	r2, [r0, #8]
 8001692:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001694:	6859      	ldr	r1, [r3, #4]
 8001696:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001698:	bf08      	it	eq
 800169a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800169c:	2200      	movs	r2, #0
 800169e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	3801      	subs	r0, #1
 80016a4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80016a6:	4770      	bx	lr

080016a8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <prvPortStartFirstTask+0x1c>)
 80016aa:	6800      	ldr	r0, [r0, #0]
 80016ac:	6800      	ldr	r0, [r0, #0]
 80016ae:	f380 8808 	msr	MSP, r0
 80016b2:	b662      	cpsie	i
 80016b4:	b661      	cpsie	f
 80016b6:	f3bf 8f4f 	dsb	sy
 80016ba:	f3bf 8f6f 	isb	sy
 80016be:	df00      	svc	0
 80016c0:	bf00      	nop
 80016c2:	0000      	.short	0x0000
 80016c4:	e000ed08 	.word	0xe000ed08

080016c8 <pxPortInitialiseStack>:
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80016c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80016cc:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <pxPortInitialiseStack+0x18>)
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80016d2:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80016d6:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80016da:	3840      	subs	r0, #64	; 0x40
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	08001731 	.word	0x08001731

080016e4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <pxCurrentTCBConst2>)
 80016e6:	6819      	ldr	r1, [r3, #0]
 80016e8:	6808      	ldr	r0, [r1, #0]
 80016ea:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80016ee:	f380 8809 	msr	PSP, r0
 80016f2:	f3bf 8f6f 	isb	sy
 80016f6:	f04f 0000 	mov.w	r0, #0
 80016fa:	f380 8811 	msr	BASEPRI, r0
 80016fe:	f04e 0e0d 	orr.w	lr, lr, #13
 8001702:	4770      	bx	lr

08001704 <pxCurrentTCBConst2>:
 8001704:	20001218 	.word	0x20001218

08001708 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <vPortYield+0x14>)
 800170a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800170e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8001710:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001714:	f3bf 8f6f 	isb	sy
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed04 	.word	0xe000ed04

08001720 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8001720:	f3ef 8011 	mrs	r0, BASEPRI
 8001724:	f04f 0150 	mov.w	r1, #80	; 0x50
 8001728:	f381 8811 	msr	BASEPRI, r1
 800172c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
 800172e:	2000      	movs	r0, #0

08001730 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001730:	b508      	push	{r3, lr}
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <prvTaskExitError+0x18>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	d002      	beq.n	8001740 <prvTaskExitError+0x10>
 800173a:	f7ff fff1 	bl	8001720 <ulPortSetInterruptMask>
 800173e:	e7fe      	b.n	800173e <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 8001740:	f7ff ffee 	bl	8001720 <ulPortSetInterruptMask>
 8001744:	e7fe      	b.n	8001744 <prvTaskExitError+0x14>
 8001746:	bf00      	nop
 8001748:	20000004 	.word	0x20000004

0800174c <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800174c:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
 800174e:	f7ff ffe7 	bl	8001720 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <vPortEnterCritical+0x2c>)
 8001754:	6813      	ldr	r3, [r2, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800175a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800175e:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001762:	2b01      	cmp	r3, #1
 8001764:	d107      	bne.n	8001776 <vPortEnterCritical+0x2a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <vPortEnterCritical+0x30>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800176e:	d002      	beq.n	8001776 <vPortEnterCritical+0x2a>
 8001770:	f7ff ffd6 	bl	8001720 <ulPortSetInterruptMask>
 8001774:	e7fe      	b.n	8001774 <vPortEnterCritical+0x28>
 8001776:	bd08      	pop	{r3, pc}
 8001778:	20000004 	.word	0x20000004
 800177c:	e000ed04 	.word	0xe000ed04

08001780 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 8001780:	f380 8811 	msr	BASEPRI, r0
 8001784:	4770      	bx	lr
	...

08001788 <vPortExitCritical>:
	}
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001788:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <vPortExitCritical+0x20>)
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	b910      	cbnz	r0, 8001796 <vPortExitCritical+0xe>
 8001790:	f7ff ffc6 	bl	8001720 <ulPortSetInterruptMask>
 8001794:	e7fe      	b.n	8001794 <vPortExitCritical+0xc>
	uxCriticalNesting--;
 8001796:	3801      	subs	r0, #1
 8001798:	6018      	str	r0, [r3, #0]
	if( uxCriticalNesting == 0 )
 800179a:	b918      	cbnz	r0, 80017a4 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
	}
}
 800179c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
	if( uxCriticalNesting == 0 )
	{
		portENABLE_INTERRUPTS();
 80017a0:	f7ff bfee 	b.w	8001780 <vPortClearInterruptMask>
 80017a4:	bd08      	pop	{r3, pc}
 80017a6:	bf00      	nop
 80017a8:	20000004 	.word	0x20000004

080017ac <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80017ac:	f3ef 8009 	mrs	r0, PSP
 80017b0:	f3bf 8f6f 	isb	sy
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <pxCurrentTCBConst>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80017bc:	6010      	str	r0, [r2, #0]
 80017be:	e92d 4008 	stmdb	sp!, {r3, lr}
 80017c2:	f04f 0050 	mov.w	r0, #80	; 0x50
 80017c6:	f380 8811 	msr	BASEPRI, r0
 80017ca:	f000 fe59 	bl	8002480 <vTaskSwitchContext>
 80017ce:	f04f 0000 	mov.w	r0, #0
 80017d2:	f380 8811 	msr	BASEPRI, r0
 80017d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80017da:	6819      	ldr	r1, [r3, #0]
 80017dc:	6808      	ldr	r0, [r1, #0]
 80017de:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80017e2:	f380 8809 	msr	PSP, r0
 80017e6:	f3bf 8f6f 	isb	sy
 80017ea:	4770      	bx	lr

080017ec <pxCurrentTCBConst>:
 80017ec:	20001218 	.word	0x20001218

080017f0 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80017f0:	b508      	push	{r3, lr}
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 80017f2:	f7ff ff95 	bl	8001720 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80017f6:	f000 fce5 	bl	80021c4 <xTaskIncrementTick>
 80017fa:	b118      	cbz	r0, 8001804 <xPortSysTickHandler+0x14>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <xPortSysTickHandler+0x20>)
 80017fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001802:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8001804:	2000      	movs	r0, #0
}
 8001806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 800180a:	f7ff bfb9 	b.w	8001780 <vPortClearInterruptMask>
 800180e:	bf00      	nop
 8001810:	e000ed04 	.word	0xe000ed04

08001814 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <vPortSetupTimerInterrupt+0x1c>)
 8001816:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001820:	4a04      	ldr	r2, [pc, #16]	; (8001834 <vPortSetupTimerInterrupt+0x20>)
 8001822:	3b01      	subs	r3, #1
 8001824:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <vPortSetupTimerInterrupt+0x24>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000000 	.word	0x20000000
 8001834:	e000e014 	.word	0xe000e014
 8001838:	e000e010 	.word	0xe000e010

0800183c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800183c:	b513      	push	{r0, r1, r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <xPortStartScheduler+0x80>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001840:	2100      	movs	r1, #0
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001848:	22ff      	movs	r2, #255	; 0xff
 800184a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800184c:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800184e:	4a1c      	ldr	r2, [pc, #112]	; (80018c0 <xPortStartScheduler+0x84>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001856:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800185a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800185e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <xPortStartScheduler+0x88>)
 8001862:	2207      	movs	r2, #7
 8001864:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001866:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800186a:	1e54      	subs	r4, r2, #1
 800186c:	0600      	lsls	r0, r0, #24
 800186e:	d508      	bpl.n	8001882 <xPortStartScheduler+0x46>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001870:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001874:	2101      	movs	r1, #1
 8001876:	0052      	lsls	r2, r2, #1
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	f88d 2003 	strb.w	r2, [sp, #3]
 800187e:	4622      	mov	r2, r4
 8001880:	e7f1      	b.n	8001866 <xPortStartScheduler+0x2a>
 8001882:	b101      	cbz	r1, 8001886 <xPortStartScheduler+0x4a>
 8001884:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	0212      	lsls	r2, r2, #8
 800188a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800188e:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001890:	9b01      	ldr	r3, [sp, #4]
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <xPortStartScheduler+0x80>)
 8001894:	b2db      	uxtb	r3, r3
 8001896:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <xPortStartScheduler+0x8c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80018a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80018a8:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80018aa:	f7ff ffb3 	bl	8001814 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <xPortStartScheduler+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80018b4:	f7ff fef8 	bl	80016a8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80018b8:	f7ff ff3a 	bl	8001730 <prvTaskExitError>
 80018bc:	e000e400 	.word	0xe000e400
 80018c0:	20000530 	.word	0x20000530
 80018c4:	20000534 	.word	0x20000534
 80018c8:	e000ed20 	.word	0xe000ed20
 80018cc:	20000004 	.word	0x20000004

080018d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80018d0:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80018d2:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80018d6:	2b0f      	cmp	r3, #15
 80018d8:	d908      	bls.n	80018ec <vPortValidateInterruptPriority+0x1c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <vPortValidateInterruptPriority+0x34>)
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <vPortValidateInterruptPriority+0x38>)
 80018e0:	7812      	ldrb	r2, [r2, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d902      	bls.n	80018ec <vPortValidateInterruptPriority+0x1c>
 80018e6:	f7ff ff1b 	bl	8001720 <ulPortSetInterruptMask>
 80018ea:	e7fe      	b.n	80018ea <vPortValidateInterruptPriority+0x1a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <vPortValidateInterruptPriority+0x3c>)
 80018ee:	4a08      	ldr	r2, [pc, #32]	; (8001910 <vPortValidateInterruptPriority+0x40>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d902      	bls.n	8001902 <vPortValidateInterruptPriority+0x32>
 80018fc:	f7ff ff10 	bl	8001720 <ulPortSetInterruptMask>
 8001900:	e7fe      	b.n	8001900 <vPortValidateInterruptPriority+0x30>
 8001902:	bd08      	pop	{r3, pc}
 8001904:	e000e3f0 	.word	0xe000e3f0
 8001908:	20000530 	.word	0x20000530
 800190c:	e000ed0c 	.word	0xe000ed0c
 8001910:	20000534 	.word	0x20000534

08001914 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001914:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <prvInsertBlockIntoFreeList+0x40>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4282      	cmp	r2, r0
 800191c:	d201      	bcs.n	8001922 <prvInsertBlockIntoFreeList+0xe>
 800191e:	4613      	mov	r3, r2
 8001920:	e7fa      	b.n	8001918 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	185c      	adds	r4, r3, r1
 8001926:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001928:	bf01      	itttt	eq
 800192a:	6840      	ldreq	r0, [r0, #4]
 800192c:	1809      	addeq	r1, r1, r0
 800192e:	4618      	moveq	r0, r3
 8001930:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001932:	6841      	ldr	r1, [r0, #4]
 8001934:	1844      	adds	r4, r0, r1
 8001936:	42a2      	cmp	r2, r4
 8001938:	d107      	bne.n	800194a <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800193a:	4c07      	ldr	r4, [pc, #28]	; (8001958 <prvInsertBlockIntoFreeList+0x44>)
 800193c:	6824      	ldr	r4, [r4, #0]
 800193e:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001940:	bf1f      	itttt	ne
 8001942:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001944:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001946:	1909      	addne	r1, r1, r4
 8001948:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800194a:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800194c:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800194e:	bf18      	it	ne
 8001950:	6018      	strne	r0, [r3, #0]
 8001952:	bd10      	pop	{r4, pc}
 8001954:	20000540 	.word	0x20000540
 8001958:	2000053c 	.word	0x2000053c

0800195c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800195c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001960:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8001962:	f000 fc27 	bl	80021b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001966:	493a      	ldr	r1, [pc, #232]	; (8001a50 <pvPortMalloc+0xf4>)
 8001968:	4d3a      	ldr	r5, [pc, #232]	; (8001a54 <pvPortMalloc+0xf8>)
 800196a:	680b      	ldr	r3, [r1, #0]
 800196c:	bb0b      	cbnz	r3, 80019b2 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800196e:	4a3a      	ldr	r2, [pc, #232]	; (8001a58 <pvPortMalloc+0xfc>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001970:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001972:	bf1f      	itttt	ne
 8001974:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001976:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800197a:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800197e:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001980:	bf14      	ite	ne
 8001982:	1a1b      	subne	r3, r3, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001984:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001988:	4413      	add	r3, r2

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800198a:	4e34      	ldr	r6, [pc, #208]	; (8001a5c <pvPortMalloc+0x100>)
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
 800198c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800198e:	f023 0307 	bic.w	r3, r3, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8001992:	2000      	movs	r0, #0
 8001994:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001996:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8001998:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800199a:	6018      	str	r0, [r3, #0]
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 800199c:	600b      	str	r3, [r1, #0]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800199e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80019a0:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019a2:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <pvPortMalloc+0x104>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80019a4:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019a6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019a8:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <pvPortMalloc+0x108>)
 80019aa:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80019ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80019b0:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80019b2:	682f      	ldr	r7, [r5, #0]
 80019b4:	4227      	tst	r7, r4
 80019b6:	d140      	bne.n	8001a3a <pvPortMalloc+0xde>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80019b8:	2c00      	cmp	r4, #0
 80019ba:	d03f      	beq.n	8001a3c <pvPortMalloc+0xe0>
			{
				xWantedSize += xHeapStructSize;
 80019bc:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80019c0:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80019c2:	bf1c      	itt	ne
 80019c4:	f023 0307 	bicne.w	r3, r3, #7
 80019c8:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d033      	beq.n	8001a36 <pvPortMalloc+0xda>
 80019ce:	4a25      	ldr	r2, [pc, #148]	; (8001a64 <pvPortMalloc+0x108>)
 80019d0:	6816      	ldr	r6, [r2, #0]
 80019d2:	4690      	mov	r8, r2
 80019d4:	42b3      	cmp	r3, r6
 80019d6:	d830      	bhi.n	8001a3a <pvPortMalloc+0xde>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80019d8:	4a20      	ldr	r2, [pc, #128]	; (8001a5c <pvPortMalloc+0x100>)
 80019da:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80019dc:	6868      	ldr	r0, [r5, #4]
 80019de:	4283      	cmp	r3, r0
 80019e0:	d803      	bhi.n	80019ea <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80019e2:	6809      	ldr	r1, [r1, #0]
 80019e4:	428d      	cmp	r5, r1
 80019e6:	d106      	bne.n	80019f6 <pvPortMalloc+0x9a>
 80019e8:	e027      	b.n	8001a3a <pvPortMalloc+0xde>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80019ea:	682c      	ldr	r4, [r5, #0]
 80019ec:	2c00      	cmp	r4, #0
 80019ee:	d0f8      	beq.n	80019e2 <pvPortMalloc+0x86>
 80019f0:	462a      	mov	r2, r5
 80019f2:	4625      	mov	r5, r4
 80019f4:	e7f2      	b.n	80019dc <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80019f6:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80019f8:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80019fa:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80019fc:	1ac2      	subs	r2, r0, r3
 80019fe:	2a10      	cmp	r2, #16
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001a00:	f104 0408 	add.w	r4, r4, #8
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001a04:	d909      	bls.n	8001a1a <pvPortMalloc+0xbe>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001a06:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a08:	0741      	lsls	r1, r0, #29
 8001a0a:	d002      	beq.n	8001a12 <pvPortMalloc+0xb6>
 8001a0c:	f7ff fe88 	bl	8001720 <ulPortSetInterruptMask>
 8001a10:	e7fe      	b.n	8001a10 <pvPortMalloc+0xb4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001a12:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001a14:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001a16:	f7ff ff7d 	bl	8001914 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a1a:	4911      	ldr	r1, [pc, #68]	; (8001a60 <pvPortMalloc+0x104>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a1c:	686a      	ldr	r2, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a1e:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a20:	1ab3      	subs	r3, r6, r2

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a22:	4283      	cmp	r3, r0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a24:	f8c8 3000 	str.w	r3, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001a28:	bf38      	it	cc
 8001a2a:	600b      	strcc	r3, [r1, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001a2c:	4317      	orrs	r7, r2
					pxBlock->pxNextFreeBlock = NULL;
 8001a2e:	2300      	movs	r3, #0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001a30:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001a32:	602b      	str	r3, [r5, #0]
 8001a34:	e002      	b.n	8001a3c <pvPortMalloc+0xe0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001a36:	461c      	mov	r4, r3
 8001a38:	e000      	b.n	8001a3c <pvPortMalloc+0xe0>
 8001a3a:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001a3c:	f000 fc54 	bl	80022e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a40:	0763      	lsls	r3, r4, #29
 8001a42:	d002      	beq.n	8001a4a <pvPortMalloc+0xee>
 8001a44:	f7ff fe6c 	bl	8001720 <ulPortSetInterruptMask>
 8001a48:	e7fe      	b.n	8001a48 <pvPortMalloc+0xec>
	return pvReturn;
}
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a50:	2000053c 	.word	0x2000053c
 8001a54:	20001148 	.word	0x20001148
 8001a58:	20000548 	.word	0x20000548
 8001a5c:	20000540 	.word	0x20000540
 8001a60:	2000114c 	.word	0x2000114c
 8001a64:	20000538 	.word	0x20000538

08001a68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001a68:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	b310      	cbz	r0, 8001ab4 <vPortFree+0x4c>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001a6e:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <vPortFree+0x50>)
 8001a70:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	4213      	tst	r3, r2
 8001a78:	d102      	bne.n	8001a80 <vPortFree+0x18>
 8001a7a:	f7ff fe51 	bl	8001720 <ulPortSetInterruptMask>
 8001a7e:	e7fe      	b.n	8001a7e <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001a80:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001a84:	b111      	cbz	r1, 8001a8c <vPortFree+0x24>
 8001a86:	f7ff fe4b 	bl	8001720 <ulPortSetInterruptMask>
 8001a8a:	e7fe      	b.n	8001a8a <vPortFree+0x22>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001a8c:	ea23 0302 	bic.w	r3, r3, r2
 8001a90:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8001a94:	f000 fb8e 	bl	80021b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001a98:	4a08      	ldr	r2, [pc, #32]	; (8001abc <vPortFree+0x54>)
 8001a9a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001a9e:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001aa0:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001aa4:	440b      	add	r3, r1
 8001aa6:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001aa8:	f7ff ff34 	bl	8001914 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8001ab0:	f000 bc1a 	b.w	80022e8 <xTaskResumeAll>
 8001ab4:	bd10      	pop	{r4, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20001148 	.word	0x20001148
 8001abc:	20000538 	.word	0x20000538

08001ac0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001ac0:	b538      	push	{r3, r4, r5, lr}
 8001ac2:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ac4:	6c02      	ldr	r2, [r0, #64]	; 0x40

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001ac6:	4604      	mov	r4, r0
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ac8:	b932      	cbnz	r2, 8001ad8 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001aca:	6805      	ldr	r5, [r0, #0]
 8001acc:	bb45      	cbnz	r5, 8001b20 <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001ace:	6840      	ldr	r0, [r0, #4]
 8001ad0:	f000 fe16 	bl	8002700 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001ad4:	6065      	str	r5, [r4, #4]
 8001ad6:	e024      	b.n	8001b22 <prvCopyDataToQueue+0x62>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001ad8:	b96d      	cbnz	r5, 8001af6 <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001ada:	6880      	ldr	r0, [r0, #8]
 8001adc:	f002 f94e 	bl	8003d7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001ae0:	68a2      	ldr	r2, [r4, #8]
 8001ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ae4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ae6:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001ae8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d318      	bcc.n	8001b20 <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001aee:	6823      	ldr	r3, [r4, #0]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8001af0:	4628      	mov	r0, r5
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001af2:	60a3      	str	r3, [r4, #8]
 8001af4:	e015      	b.n	8001b22 <prvCopyDataToQueue+0x62>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001af6:	68c0      	ldr	r0, [r0, #12]
 8001af8:	f002 f940 	bl	8003d7c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001afc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001afe:	68e2      	ldr	r2, [r4, #12]
 8001b00:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001b02:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001b04:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001b06:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001b08:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001b0a:	bf3e      	ittt	cc
 8001b0c:	6862      	ldrcc	r2, [r4, #4]
 8001b0e:	189b      	addcc	r3, r3, r2
 8001b10:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001b12:	2d02      	cmp	r5, #2
 8001b14:	d104      	bne.n	8001b20 <prvCopyDataToQueue+0x60>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b18:	b113      	cbz	r3, 8001b20 <prvCopyDataToQueue+0x60>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8001b1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8001b20:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8001b22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b24:	3301      	adds	r3, #1
 8001b26:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 8001b28:	bd38      	pop	{r3, r4, r5, pc}

08001b2a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001b2a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001b2e:	b410      	push	{r4}
 8001b30:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001b32:	b162      	cbz	r2, 8001b4e <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001b34:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001b36:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001b38:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001b3a:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001b3c:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001b3e:	bf28      	it	cs
 8001b40:	6819      	ldrcs	r1, [r3, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8001b42:	bc10      	pop	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001b44:	bf28      	it	cs
 8001b46:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001b48:	68d9      	ldr	r1, [r3, #12]
 8001b4a:	f002 b917 	b.w	8003d7c <memcpy>
	}
}
 8001b4e:	bc10      	pop	{r4}
 8001b50:	4770      	bx	lr

08001b52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001b52:	b538      	push	{r3, r4, r5, lr}
 8001b54:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001b56:	f7ff fdf9 	bl	800174c <vPortEnterCritical>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b5a:	f104 0524 	add.w	r5, r4, #36	; 0x24
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001b5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	dd0b      	ble.n	8001b7c <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b66:	b14b      	cbz	r3, 8001b7c <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b68:	4628      	mov	r0, r5
 8001b6a:	f000 fcef 	bl	800254c <xTaskRemoveFromEventList>
 8001b6e:	b108      	cbz	r0, 8001b74 <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8001b70:	f000 fd66 	bl	8002640 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8001b74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001b76:	3b01      	subs	r3, #1
 8001b78:	64a3      	str	r3, [r4, #72]	; 0x48
 8001b7a:	e7f0      	b.n	8001b5e <prvUnlockQueue+0xc>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b80:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8001b82:	f7ff fe01 	bl	8001788 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001b86:	f7ff fde1 	bl	800174c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b8a:	f104 0510 	add.w	r5, r4, #16
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001b8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	dd0b      	ble.n	8001bac <prvUnlockQueue+0x5a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b94:	6923      	ldr	r3, [r4, #16]
 8001b96:	b14b      	cbz	r3, 8001bac <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b98:	4628      	mov	r0, r5
 8001b9a:	f000 fcd7 	bl	800254c <xTaskRemoveFromEventList>
 8001b9e:	b108      	cbz	r0, 8001ba4 <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 8001ba0:	f000 fd4e 	bl	8002640 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8001ba4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6463      	str	r3, [r4, #68]	; 0x44
 8001baa:	e7f0      	b.n	8001b8e <prvUnlockQueue+0x3c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb0:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8001bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 8001bb6:	f7ff bde7 	b.w	8001788 <vPortExitCritical>

08001bba <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001bba:	b538      	push	{r3, r4, r5, lr}
 8001bbc:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	b910      	cbnz	r0, 8001bc8 <xQueueGenericReset+0xe>
 8001bc2:	f7ff fdad 	bl	8001720 <ulPortSetInterruptMask>
 8001bc6:	e7fe      	b.n	8001bc6 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
 8001bc8:	f7ff fdc0 	bl	800174c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001bcc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001bce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bd0:	6822      	ldr	r2, [r4, #0]
 8001bd2:	4343      	muls	r3, r0
 8001bd4:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001bd6:	1a1b      	subs	r3, r3, r0
 8001bd8:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001bda:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001bdc:	60e3      	str	r3, [r4, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001bde:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001be4:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001be6:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8001be8:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8001bea:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8001bec:	b955      	cbnz	r5, 8001c04 <xQueueGenericReset+0x4a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bee:	6923      	ldr	r3, [r4, #16]
 8001bf0:	b183      	cbz	r3, 8001c14 <xQueueGenericReset+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001bf2:	f104 0010 	add.w	r0, r4, #16
 8001bf6:	f000 fca9 	bl	800254c <xTaskRemoveFromEventList>
 8001bfa:	2801      	cmp	r0, #1
 8001bfc:	d10a      	bne.n	8001c14 <xQueueGenericReset+0x5a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001bfe:	f7ff fd83 	bl	8001708 <vPortYield>
 8001c02:	e007      	b.n	8001c14 <xQueueGenericReset+0x5a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c04:	f104 0010 	add.w	r0, r4, #16
 8001c08:	f7ff fd0c 	bl	8001624 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c10:	f7ff fd08 	bl	8001624 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001c14:	f7ff fdb8 	bl	8001788 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8001c18:	2001      	movs	r0, #1
 8001c1a:	bd38      	pop	{r3, r4, r5, pc}

08001c1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8001c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1e:	460d      	mov	r5, r1
 8001c20:	4617      	mov	r7, r2

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c22:	4606      	mov	r6, r0
 8001c24:	b910      	cbnz	r0, 8001c2c <xQueueGenericCreate+0x10>
 8001c26:	f7ff fd7b 	bl	8001720 <ulPortSetInterruptMask>
 8001c2a:	e7fe      	b.n	8001c2a <xQueueGenericCreate+0xe>

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001c2c:	b111      	cbz	r1, 8001c34 <xQueueGenericCreate+0x18>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c2e:	4348      	muls	r0, r1
 8001c30:	3001      	adds	r0, #1
 8001c32:	e000      	b.n	8001c36 <xQueueGenericCreate+0x1a>
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 8001c34:	4608      	mov	r0, r1
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001c36:	3054      	adds	r0, #84	; 0x54
 8001c38:	f7ff fe90 	bl	800195c <pvPortMalloc>

	if( pxNewQueue != NULL )
 8001c3c:	4604      	mov	r4, r0
 8001c3e:	b130      	cbz	r0, 8001c4e <xQueueGenericCreate+0x32>
	{
		if( uxItemSize == ( UBaseType_t ) 0 )
 8001c40:	b90d      	cbnz	r5, 8001c46 <xQueueGenericCreate+0x2a>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c42:	6020      	str	r0, [r4, #0]
 8001c44:	e006      	b.n	8001c54 <xQueueGenericCreate+0x38>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001c46:	f100 0354 	add.w	r3, r0, #84	; 0x54
 8001c4a:	6003      	str	r3, [r0, #0]
 8001c4c:	e002      	b.n	8001c54 <xQueueGenericCreate+0x38>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8001c4e:	f7ff fd67 	bl	8001720 <ulPortSetInterruptMask>
 8001c52:	e7fe      	b.n	8001c52 <xQueueGenericCreate+0x36>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 8001c54:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 8001c56:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7ff ffad 	bl	8001bba <xQueueGenericReset>

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
 8001c60:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	}

	configASSERT( xReturn );

	return xReturn;
}
 8001c64:	4620      	mov	r0, r4
 8001c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c68 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c6c:	b085      	sub	sp, #20
 8001c6e:	4689      	mov	r9, r1
 8001c70:	9201      	str	r2, [sp, #4]
 8001c72:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001c74:	4604      	mov	r4, r0
 8001c76:	b910      	cbnz	r0, 8001c7e <xQueueGenericSend+0x16>
 8001c78:	f7ff fd52 	bl	8001720 <ulPortSetInterruptMask>
 8001c7c:	e7fe      	b.n	8001c7c <xQueueGenericSend+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c7e:	b921      	cbnz	r1, 8001c8a <xQueueGenericSend+0x22>
 8001c80:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c82:	b113      	cbz	r3, 8001c8a <xQueueGenericSend+0x22>
 8001c84:	f7ff fd4c 	bl	8001720 <ulPortSetInterruptMask>
 8001c88:	e7fe      	b.n	8001c88 <xQueueGenericSend+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c8a:	2f02      	cmp	r7, #2
 8001c8c:	d105      	bne.n	8001c9a <xQueueGenericSend+0x32>
 8001c8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d002      	beq.n	8001c9a <xQueueGenericSend+0x32>
 8001c94:	f7ff fd44 	bl	8001720 <ulPortSetInterruptMask>
 8001c98:	e7fe      	b.n	8001c98 <xQueueGenericSend+0x30>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c9a:	f000 fcd7 	bl	800264c <xTaskGetSchedulerState>
 8001c9e:	b910      	cbnz	r0, 8001ca6 <xQueueGenericSend+0x3e>
 8001ca0:	9e01      	ldr	r6, [sp, #4]
 8001ca2:	b10e      	cbz	r6, 8001ca8 <xQueueGenericSend+0x40>
 8001ca4:	e066      	b.n	8001d74 <xQueueGenericSend+0x10c>
 8001ca6:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8001ca8:	f04f 0800 	mov.w	r8, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001cac:	f7ff fd4e 	bl	800174c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001cb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001cb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d301      	bcc.n	8001cbc <xQueueGenericSend+0x54>
 8001cb8:	2f02      	cmp	r7, #2
 8001cba:	d115      	bne.n	8001ce8 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001cbc:	463a      	mov	r2, r7
 8001cbe:	4649      	mov	r1, r9
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f7ff fefd 	bl	8001ac0 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cc8:	b143      	cbz	r3, 8001cdc <xQueueGenericSend+0x74>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8001cca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001cce:	f000 fc3d 	bl	800254c <xTaskRemoveFromEventList>
 8001cd2:	2801      	cmp	r0, #1
 8001cd4:	d104      	bne.n	8001ce0 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001cd6:	f7ff fd17 	bl	8001708 <vPortYield>
 8001cda:	e001      	b.n	8001ce0 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	d1fa      	bne.n	8001cd6 <xQueueGenericSend+0x6e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ce0:	f7ff fd52 	bl	8001788 <vPortExitCritical>
				return pdPASS;
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	e048      	b.n	8001d7a <xQueueGenericSend+0x112>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ce8:	9d01      	ldr	r5, [sp, #4]
 8001cea:	b91d      	cbnz	r5, 8001cf4 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001cec:	f7ff fd4c 	bl	8001788 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001cf0:	4628      	mov	r0, r5
 8001cf2:	e042      	b.n	8001d7a <xQueueGenericSend+0x112>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001cf4:	b916      	cbnz	r6, 8001cfc <xQueueGenericSend+0x94>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001cf6:	a802      	add	r0, sp, #8
 8001cf8:	f000 fc64 	bl	80025c4 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001cfc:	f7ff fd44 	bl	8001788 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d00:	f000 fa58 	bl	80021b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d04:	f7ff fd22 	bl	800174c <vPortEnterCritical>
 8001d08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	bf08      	it	eq
 8001d0e:	f8c4 8044 	streq.w	r8, [r4, #68]	; 0x44
 8001d12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001d14:	3301      	adds	r3, #1
 8001d16:	bf08      	it	eq
 8001d18:	f8c4 8048 	streq.w	r8, [r4, #72]	; 0x48
 8001d1c:	f7ff fd34 	bl	8001788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d20:	a901      	add	r1, sp, #4
 8001d22:	a802      	add	r0, sp, #8
 8001d24:	f000 fc5e 	bl	80025e4 <xTaskCheckForTimeOut>
 8001d28:	b9e8      	cbnz	r0, 8001d66 <xQueueGenericSend+0xfe>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001d2a:	f7ff fd0f 	bl	800174c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001d2e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001d30:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001d32:	f7ff fd29 	bl	8001788 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001d36:	42ae      	cmp	r6, r5
 8001d38:	d10f      	bne.n	8001d5a <xQueueGenericSend+0xf2>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001d3a:	9901      	ldr	r1, [sp, #4]
 8001d3c:	f104 0010 	add.w	r0, r4, #16
 8001d40:	f000 fbd2 	bl	80024e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001d44:	4620      	mov	r0, r4
 8001d46:	f7ff ff04 	bl	8001b52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001d4a:	f000 facd 	bl	80022e8 <xTaskResumeAll>
 8001d4e:	b108      	cbz	r0, 8001d54 <xQueueGenericSend+0xec>
 8001d50:	2601      	movs	r6, #1
 8001d52:	e7ab      	b.n	8001cac <xQueueGenericSend+0x44>
				{
					portYIELD_WITHIN_API();
 8001d54:	f7ff fcd8 	bl	8001708 <vPortYield>
 8001d58:	e7fa      	b.n	8001d50 <xQueueGenericSend+0xe8>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f7ff fef9 	bl	8001b52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d60:	f000 fac2 	bl	80022e8 <xTaskResumeAll>
 8001d64:	e7f4      	b.n	8001d50 <xQueueGenericSend+0xe8>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff fef3 	bl	8001b52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d6c:	f000 fabc 	bl	80022e8 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001d70:	2000      	movs	r0, #0
 8001d72:	e002      	b.n	8001d7a <xQueueGenericSend+0x112>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d74:	f7ff fcd4 	bl	8001720 <ulPortSetInterruptMask>
 8001d78:	e7fe      	b.n	8001d78 <xQueueGenericSend+0x110>
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
 8001d7a:	b005      	add	sp, #20
 8001d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001d80 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d84:	b085      	sub	sp, #20
 8001d86:	4688      	mov	r8, r1
 8001d88:	9201      	str	r2, [sp, #4]
 8001d8a:	4699      	mov	r9, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001d8c:	4604      	mov	r4, r0
 8001d8e:	b910      	cbnz	r0, 8001d96 <xQueueGenericReceive+0x16>
 8001d90:	f7ff fcc6 	bl	8001720 <ulPortSetInterruptMask>
 8001d94:	e7fe      	b.n	8001d94 <xQueueGenericReceive+0x14>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d96:	b921      	cbnz	r1, 8001da2 <xQueueGenericReceive+0x22>
 8001d98:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d9a:	b113      	cbz	r3, 8001da2 <xQueueGenericReceive+0x22>
 8001d9c:	f7ff fcc0 	bl	8001720 <ulPortSetInterruptMask>
 8001da0:	e7fe      	b.n	8001da0 <xQueueGenericReceive+0x20>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001da2:	f000 fc53 	bl	800264c <xTaskGetSchedulerState>
 8001da6:	b910      	cbnz	r0, 8001dae <xQueueGenericReceive+0x2e>
 8001da8:	9e01      	ldr	r6, [sp, #4]
 8001daa:	b10e      	cbz	r6, 8001db0 <xQueueGenericReceive+0x30>
 8001dac:	e078      	b.n	8001ea0 <xQueueGenericReceive+0x120>
 8001dae:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8001db0:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001db2:	f7ff fccb 	bl	800174c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001db6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001db8:	b33b      	cbz	r3, 8001e0a <xQueueGenericReceive+0x8a>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001dba:	4641      	mov	r1, r8
 8001dbc:	4620      	mov	r0, r4
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001dbe:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001dc0:	f7ff feb3 	bl	8001b2a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001dc4:	f1b9 0f00 	cmp.w	r9, #0
 8001dc8:	d112      	bne.n	8001df0 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8001dca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	b913      	cbnz	r3, 8001dda <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001dd4:	f000 fcd8 	bl	8002788 <pvTaskIncrementMutexHeldCount>
 8001dd8:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dda:	6923      	ldr	r3, [r4, #16]
 8001ddc:	b18b      	cbz	r3, 8001e02 <xQueueGenericReceive+0x82>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001dde:	f104 0010 	add.w	r0, r4, #16
 8001de2:	f000 fbb3 	bl	800254c <xTaskRemoveFromEventList>
 8001de6:	2801      	cmp	r0, #1
 8001de8:	d10b      	bne.n	8001e02 <xQueueGenericReceive+0x82>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8001dea:	f7ff fc8d 	bl	8001708 <vPortYield>
 8001dee:	e008      	b.n	8001e02 <xQueueGenericReceive+0x82>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001df2:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001df4:	b12b      	cbz	r3, 8001e02 <xQueueGenericReceive+0x82>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001df6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001dfa:	f000 fba7 	bl	800254c <xTaskRemoveFromEventList>
 8001dfe:	2800      	cmp	r0, #0
 8001e00:	d1f3      	bne.n	8001dea <xQueueGenericReceive+0x6a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8001e02:	f7ff fcc1 	bl	8001788 <vPortExitCritical>
				return pdPASS;
 8001e06:	2001      	movs	r0, #1
 8001e08:	e04d      	b.n	8001ea6 <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e0a:	9d01      	ldr	r5, [sp, #4]
 8001e0c:	b91d      	cbnz	r5, 8001e16 <xQueueGenericReceive+0x96>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e0e:	f7ff fcbb 	bl	8001788 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001e12:	4628      	mov	r0, r5
 8001e14:	e047      	b.n	8001ea6 <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e16:	b916      	cbnz	r6, 8001e1e <xQueueGenericReceive+0x9e>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001e18:	a802      	add	r0, sp, #8
 8001e1a:	f000 fbd3 	bl	80025c4 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e1e:	f7ff fcb3 	bl	8001788 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e22:	f000 f9c7 	bl	80021b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e26:	f7ff fc91 	bl	800174c <vPortEnterCritical>
 8001e2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	bf08      	it	eq
 8001e30:	6467      	streq	r7, [r4, #68]	; 0x44
 8001e32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001e34:	3301      	adds	r3, #1
 8001e36:	bf08      	it	eq
 8001e38:	64a7      	streq	r7, [r4, #72]	; 0x48
 8001e3a:	f7ff fca5 	bl	8001788 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e3e:	a901      	add	r1, sp, #4
 8001e40:	a802      	add	r0, sp, #8
 8001e42:	f000 fbcf 	bl	80025e4 <xTaskCheckForTimeOut>
 8001e46:	bb20      	cbnz	r0, 8001e92 <xQueueGenericReceive+0x112>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001e48:	f7ff fc80 	bl	800174c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001e4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001e4e:	f7ff fc9b 	bl	8001788 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e52:	b9c5      	cbnz	r5, 8001e86 <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e54:	6823      	ldr	r3, [r4, #0]
 8001e56:	b933      	cbnz	r3, 8001e66 <xQueueGenericReceive+0xe6>
					{
						taskENTER_CRITICAL();
 8001e58:	f7ff fc78 	bl	800174c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001e5c:	6860      	ldr	r0, [r4, #4]
 8001e5e:	f000 fc05 	bl	800266c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001e62:	f7ff fc91 	bl	8001788 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001e66:	9901      	ldr	r1, [sp, #4]
 8001e68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e6c:	f000 fb3c 	bl	80024e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff fe6e 	bl	8001b52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001e76:	f000 fa37 	bl	80022e8 <xTaskResumeAll>
 8001e7a:	b108      	cbz	r0, 8001e80 <xQueueGenericReceive+0x100>
 8001e7c:	2601      	movs	r6, #1
 8001e7e:	e798      	b.n	8001db2 <xQueueGenericReceive+0x32>
				{
					portYIELD_WITHIN_API();
 8001e80:	f7ff fc42 	bl	8001708 <vPortYield>
 8001e84:	e7fa      	b.n	8001e7c <xQueueGenericReceive+0xfc>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7ff fe63 	bl	8001b52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e8c:	f000 fa2c 	bl	80022e8 <xTaskResumeAll>
 8001e90:	e7f4      	b.n	8001e7c <xQueueGenericReceive+0xfc>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff fe5d 	bl	8001b52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e98:	f000 fa26 	bl	80022e8 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	e002      	b.n	8001ea6 <xQueueGenericReceive+0x126>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ea0:	f7ff fc3e 	bl	8001720 <ulPortSetInterruptMask>
 8001ea4:	e7fe      	b.n	8001ea4 <xQueueGenericReceive+0x124>
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
 8001ea6:	b005      	add	sp, #20
 8001ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001eac <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eb0:	460e      	mov	r6, r1
 8001eb2:	4617      	mov	r7, r2
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	b910      	cbnz	r0, 8001ebe <xQueueReceiveFromISR+0x12>
 8001eb8:	f7ff fc32 	bl	8001720 <ulPortSetInterruptMask>
 8001ebc:	e7fe      	b.n	8001ebc <xQueueReceiveFromISR+0x10>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ebe:	b921      	cbnz	r1, 8001eca <xQueueReceiveFromISR+0x1e>
 8001ec0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ec2:	b113      	cbz	r3, 8001eca <xQueueReceiveFromISR+0x1e>
 8001ec4:	f7ff fc2c 	bl	8001720 <ulPortSetInterruptMask>
 8001ec8:	e7fe      	b.n	8001ec8 <xQueueReceiveFromISR+0x1c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001eca:	f7ff fd01 	bl	80018d0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001ece:	f7ff fc27 	bl	8001720 <ulPortSetInterruptMask>
	pxQueue->uxMessagesWaiting = USART_RX_BUFF_SIZE;			//Add luisfynn_161012
 8001ed2:	2501      	movs	r5, #1
 8001ed4:	63a5      	str	r5, [r4, #56]	; 0x38
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001ed6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001ed8:	4680      	mov	r8, r0
	pxQueue->uxMessagesWaiting = USART_RX_BUFF_SIZE;			//Add luisfynn_161012
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001eda:	b1cb      	cbz	r3, 8001f10 <xQueueReceiveFromISR+0x64>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			memcpy(pvBuffer, pxQueue, 1);					//Add luisfynn_161012
 8001edc:	7823      	ldrb	r3, [r4, #0]
 8001ede:	7033      	strb	r3, [r6, #0]
			//prvCopyDataFromQueue( pxQueue, pvBuffer );	//Delete luisfynn_161012

			--( pxQueue->uxMessagesWaiting );
 8001ee0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	63a3      	str	r3, [r4, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 8001ee6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ee8:	3301      	adds	r3, #1
 8001eea:	d10d      	bne.n	8001f08 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001eec:	6923      	ldr	r3, [r4, #16]
 8001eee:	b90b      	cbnz	r3, 8001ef4 <xQueueReceiveFromISR+0x48>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
 8001ef0:	2401      	movs	r4, #1
 8001ef2:	e00e      	b.n	8001f12 <xQueueReceiveFromISR+0x66>
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ef4:	f104 0010 	add.w	r0, r4, #16
 8001ef8:	f000 fb28 	bl	800254c <xTaskRemoveFromEventList>
 8001efc:	2800      	cmp	r0, #0
 8001efe:	d0f7      	beq.n	8001ef0 <xQueueReceiveFromISR+0x44>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8001f00:	2f00      	cmp	r7, #0
 8001f02:	d0f5      	beq.n	8001ef0 <xQueueReceiveFromISR+0x44>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001f04:	603d      	str	r5, [r7, #0]
 8001f06:	e7f3      	b.n	8001ef0 <xQueueReceiveFromISR+0x44>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 8001f08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	6463      	str	r3, [r4, #68]	; 0x44
 8001f0e:	e7ef      	b.n	8001ef0 <xQueueReceiveFromISR+0x44>

			xReturn = pdPASS;
		}
		else
		{
			xReturn = pdFAIL;
 8001f10:	461c      	mov	r4, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001f12:	4640      	mov	r0, r8
 8001f14:	f7ff fc34 	bl	8001780 <vPortClearInterruptMask>

	return xReturn;
}
 8001f18:	4620      	mov	r0, r4
 8001f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001f20 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f20:	4a06      	ldr	r2, [pc, #24]	; (8001f3c <prvResetNextTaskUnblockTime+0x1c>)
 8001f22:	6813      	ldr	r3, [r2, #0]
 8001f24:	6819      	ldr	r1, [r3, #0]
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <prvResetNextTaskUnblockTime+0x20>)
 8001f28:	b911      	cbnz	r1, 8001f30 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2e:	e003      	b.n	8001f38 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8001f34:	68d2      	ldr	r2, [r2, #12]
 8001f36:	6852      	ldr	r2, [r2, #4]
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	4770      	bx	lr
 8001f3c:	20001154 	.word	0x20001154
 8001f40:	2000121c 	.word	0x2000121c

08001f44 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <prvAddCurrentTaskToDelayedList+0x3c>)
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8001f46:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001f48:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8001f4a:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001f4c:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 8001f4e:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <prvAddCurrentTaskToDelayedList+0x40>)
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	4290      	cmp	r0, r2
 8001f54:	d207      	bcs.n	8001f66 <prvAddCurrentTaskToDelayedList+0x22>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <prvAddCurrentTaskToDelayedList+0x44>)
 8001f5c:	6810      	ldr	r0, [r2, #0]
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	3104      	adds	r1, #4
 8001f62:	f7ff bb79 	b.w	8001658 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <prvAddCurrentTaskToDelayedList+0x48>)
 8001f68:	6810      	ldr	r0, [r2, #0]
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	3104      	adds	r1, #4
 8001f6e:	f7ff fb73 	bl	8001658 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <prvAddCurrentTaskToDelayedList+0x4c>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8001f78:	bf38      	it	cc
 8001f7a:	601c      	strcc	r4, [r3, #0]
 8001f7c:	bd10      	pop	{r4, pc}
 8001f7e:	bf00      	nop
 8001f80:	20001218 	.word	0x20001218
 8001f84:	20001224 	.word	0x20001224
 8001f88:	20001228 	.word	0x20001228
 8001f8c:	20001154 	.word	0x20001154
 8001f90:	2000121c 	.word	0x2000121c

08001f94 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001f94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f98:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8001f9a:	469a      	mov	sl, r3
 8001f9c:	460f      	mov	r7, r1
 8001f9e:	4615      	mov	r5, r2
 8001fa0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8001fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8001fa6:	4681      	mov	r9, r0
 8001fa8:	b910      	cbnz	r0, 8001fb0 <xTaskGenericCreate+0x1c>
 8001faa:	f7ff fbb9 	bl	8001720 <ulPortSetInterruptMask>
 8001fae:	e7fe      	b.n	8001fae <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8001fb0:	2e06      	cmp	r6, #6
 8001fb2:	d902      	bls.n	8001fba <xTaskGenericCreate+0x26>
 8001fb4:	f7ff fbb4 	bl	8001720 <ulPortSetInterruptMask>
 8001fb8:	e7fe      	b.n	8001fb8 <xTaskGenericCreate+0x24>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fba:	b93b      	cbnz	r3, 8001fcc <xTaskGenericCreate+0x38>
 8001fbc:	0090      	lsls	r0, r2, #2
 8001fbe:	f7ff fccd 	bl	800195c <pvPortMalloc>

		if( pxStack != NULL )
 8001fc2:	4683      	mov	fp, r0
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	f000 80a6 	beq.w	8002116 <xTaskGenericCreate+0x182>
 8001fca:	e000      	b.n	8001fce <xTaskGenericCreate+0x3a>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fcc:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001fce:	205c      	movs	r0, #92	; 0x5c
 8001fd0:	f7ff fcc4 	bl	800195c <pvPortMalloc>

			if( pxNewTCB != NULL )
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	b188      	cbz	r0, 8001ffc <xTaskGenericCreate+0x68>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8001fd8:	00ad      	lsls	r5, r5, #2
 8001fda:	462a      	mov	r2, r5
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8001fdc:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8001fe0:	21a5      	movs	r1, #165	; 0xa5
 8001fe2:	4658      	mov	r0, fp
 8001fe4:	f001 fef0 	bl	8003dc8 <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001fe8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fea:	3d04      	subs	r5, #4
 8001fec:	441d      	add	r5, r3
 8001fee:	f025 0507 	bic.w	r5, r5, #7
 8001ff2:	1e7b      	subs	r3, r7, #1
 8001ff4:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8001ff8:	370f      	adds	r7, #15
 8001ffa:	e005      	b.n	8002008 <xTaskGenericCreate+0x74>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8001ffc:	4658      	mov	r0, fp
 8001ffe:	f7ff fd33 	bl	8001a68 <vPortFree>
 8002002:	e088      	b.n	8002116 <xTaskGenericCreate+0x182>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002004:	42bb      	cmp	r3, r7
 8002006:	d006      	beq.n	8002016 <xTaskGenericCreate+0x82>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8002008:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800200c:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002010:	7819      	ldrb	r1, [r3, #0]
 8002012:	2900      	cmp	r1, #0
 8002014:	d1f6      	bne.n	8002004 <xTaskGenericCreate+0x70>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002016:	f04f 0b00 	mov.w	fp, #0
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800201a:	1d27      	adds	r7, r4, #4
 800201c:	4638      	mov	r0, r7
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800201e:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8002022:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8002024:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 8002026:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800202a:	f7ff fb06 	bl	800163a <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800202e:	f104 0018 	add.w	r0, r4, #24
 8002032:	f7ff fb02 	bl	800163a <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002036:	f1c6 0307 	rsb	r3, r6, #7
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 800203a:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800203e:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002040:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8002042:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 8002044:	f884 b058 	strb.w	fp, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002048:	4652      	mov	r2, sl
 800204a:	4649      	mov	r1, r9
 800204c:	4628      	mov	r0, r5
 800204e:	f7ff fb3b 	bl	80016c8 <pxPortInitialiseStack>
 8002052:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8002054:	f1b8 0f00 	cmp.w	r8, #0
 8002058:	d001      	beq.n	800205e <xTaskGenericCreate+0xca>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800205a:	f8c8 4000 	str.w	r4, [r8]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 800205e:	f7ff fb75 	bl	800174c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8002062:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <xTaskGenericCreate+0x18c>)
			if( pxCurrentTCB == NULL )
 8002064:	4d2f      	ldr	r5, [pc, #188]	; (8002124 <xTaskGenericCreate+0x190>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8002066:	6813      	ldr	r3, [r2, #0]
 8002068:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8002148 <xTaskGenericCreate+0x1b4>
 800206c:	3301      	adds	r3, #1
 800206e:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8002070:	682b      	ldr	r3, [r5, #0]
 8002072:	bb3b      	cbnz	r3, 80020c4 <xTaskGenericCreate+0x130>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8002074:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	2a01      	cmp	r2, #1
 800207a:	d12b      	bne.n	80020d4 <xTaskGenericCreate+0x140>
 800207c:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800207e:	eb09 0008 	add.w	r0, r9, r8
 8002082:	f108 0814 	add.w	r8, r8, #20
 8002086:	f7ff facd 	bl	8001624 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800208a:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 800208e:	d1f6      	bne.n	800207e <xTaskGenericCreate+0xea>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002090:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800214c <xTaskGenericCreate+0x1b8>
	vListInitialise( &xDelayedTaskList2 );
 8002094:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002150 <xTaskGenericCreate+0x1bc>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002098:	4650      	mov	r0, sl
 800209a:	f7ff fac3 	bl	8001624 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800209e:	4640      	mov	r0, r8
 80020a0:	f7ff fac0 	bl	8001624 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80020a4:	4820      	ldr	r0, [pc, #128]	; (8002128 <xTaskGenericCreate+0x194>)
 80020a6:	f7ff fabd 	bl	8001624 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80020aa:	4820      	ldr	r0, [pc, #128]	; (800212c <xTaskGenericCreate+0x198>)
 80020ac:	f7ff faba 	bl	8001624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80020b0:	481f      	ldr	r0, [pc, #124]	; (8002130 <xTaskGenericCreate+0x19c>)
 80020b2:	f7ff fab7 	bl	8001624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80020b6:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <xTaskGenericCreate+0x1a0>)
 80020b8:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80020bc:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <xTaskGenericCreate+0x1a4>)
 80020be:	f8c3 8000 	str.w	r8, [r3]
 80020c2:	e007      	b.n	80020d4 <xTaskGenericCreate+0x140>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <xTaskGenericCreate+0x1a8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	b923      	cbnz	r3, 80020d4 <xTaskGenericCreate+0x140>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80020ca:	682b      	ldr	r3, [r5, #0]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	429e      	cmp	r6, r3
					{
						pxCurrentTCB = pxNewTCB;
 80020d0:	bf28      	it	cs
 80020d2:	602c      	strcs	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80020d4:	4a1a      	ldr	r2, [pc, #104]	; (8002140 <xTaskGenericCreate+0x1ac>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80020d6:	491b      	ldr	r1, [pc, #108]	; (8002144 <xTaskGenericCreate+0x1b0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80020d8:	6813      	ldr	r3, [r2, #0]
 80020da:	3301      	adds	r3, #1
 80020dc:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80020de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 80020e0:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80020e2:	680b      	ldr	r3, [r1, #0]
 80020e4:	2401      	movs	r4, #1
 80020e6:	fa04 f002 	lsl.w	r0, r4, r2
 80020ea:	4303      	orrs	r3, r0
 80020ec:	2014      	movs	r0, #20
 80020ee:	600b      	str	r3, [r1, #0]
 80020f0:	fb00 9002 	mla	r0, r0, r2, r9
 80020f4:	4639      	mov	r1, r7
 80020f6:	f7ff faa3 	bl	8001640 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80020fa:	f7ff fb45 	bl	8001788 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <xTaskGenericCreate+0x1a8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b12b      	cbz	r3, 8002110 <xTaskGenericCreate+0x17c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8002104:	682b      	ldr	r3, [r5, #0]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	429e      	cmp	r6, r3
 800210a:	d901      	bls.n	8002110 <xTaskGenericCreate+0x17c>
			{
				taskYIELD_IF_USING_PREEMPTION();
 800210c:	f7ff fafc 	bl	8001708 <vPortYield>
 8002110:	4620      	mov	r0, r4
 8002112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002116:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 800211a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800211e:	bf00      	nop
 8002120:	20001244 	.word	0x20001244
 8002124:	20001218 	.word	0x20001218
 8002128:	2000122c 	.word	0x2000122c
 800212c:	20001204 	.word	0x20001204
 8002130:	2000125c 	.word	0x2000125c
 8002134:	20001154 	.word	0x20001154
 8002138:	20001228 	.word	0x20001228
 800213c:	20001158 	.word	0x20001158
 8002140:	20001240 	.word	0x20001240
 8002144:	20001270 	.word	0x20001270
 8002148:	20001178 	.word	0x20001178
 800214c:	20001160 	.word	0x20001160
 8002150:	20001248 	.word	0x20001248

08002154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002154:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8002156:	2400      	movs	r4, #0

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002158:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800215a:	9403      	str	r4, [sp, #12]
 800215c:	9402      	str	r4, [sp, #8]
 800215e:	9401      	str	r4, [sp, #4]
 8002160:	9400      	str	r4, [sp, #0]
 8002162:	4623      	mov	r3, r4
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	490e      	ldr	r1, [pc, #56]	; (80021a0 <vTaskStartScheduler+0x4c>)
 8002168:	480e      	ldr	r0, [pc, #56]	; (80021a4 <vTaskStartScheduler+0x50>)
 800216a:	f7ff ff13 	bl	8001f94 <xTaskGenericCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800216e:	2801      	cmp	r0, #1
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8002170:	4605      	mov	r5, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002172:	d10e      	bne.n	8002192 <vTaskStartScheduler+0x3e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002174:	f7ff fad4 	bl	8001720 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <vTaskStartScheduler+0x54>)
 800217a:	f04f 32ff 	mov.w	r2, #4294967295
 800217e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <vTaskStartScheduler+0x58>)
 8002182:	601d      	str	r5, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <vTaskStartScheduler+0x5c>)
 8002186:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8002188:	b005      	add	sp, #20
 800218a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800218e:	f7ff bb55 	b.w	800183c <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8002192:	b910      	cbnz	r0, 800219a <vTaskStartScheduler+0x46>
 8002194:	f7ff fac4 	bl	8001720 <ulPortSetInterruptMask>
 8002198:	e7fe      	b.n	8002198 <vTaskStartScheduler+0x44>
	}
}
 800219a:	b005      	add	sp, #20
 800219c:	bd30      	pop	{r4, r5, pc}
 800219e:	bf00      	nop
 80021a0:	08004104 	.word	0x08004104
 80021a4:	08002419 	.word	0x08002419
 80021a8:	2000121c 	.word	0x2000121c
 80021ac:	20001158 	.word	0x20001158
 80021b0:	20001224 	.word	0x20001224

080021b4 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80021b4:	4a02      	ldr	r2, [pc, #8]	; (80021c0 <vTaskSuspendAll+0xc>)
 80021b6:	6813      	ldr	r3, [r2, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20001220 	.word	0x20001220

080021c4 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021c4:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <xTaskIncrementTick+0xf8>)

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80021c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d136      	bne.n	800223e <xTaskIncrementTick+0x7a>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 80021d0:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <xTaskIncrementTick+0xfc>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	3201      	adds	r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80021d8:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 80021da:	b98d      	cbnz	r5, 8002200 <xTaskIncrementTick+0x3c>
			{
				taskSWITCH_DELAYED_LISTS();
 80021dc:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <xTaskIncrementTick+0x100>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	b112      	cbz	r2, 80021ea <xTaskIncrementTick+0x26>
 80021e4:	f7ff fa9c 	bl	8001720 <ulPortSetInterruptMask>
 80021e8:	e7fe      	b.n	80021e8 <xTaskIncrementTick+0x24>
 80021ea:	4a37      	ldr	r2, [pc, #220]	; (80022c8 <xTaskIncrementTick+0x104>)
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	6810      	ldr	r0, [r2, #0]
 80021f0:	6018      	str	r0, [r3, #0]
 80021f2:	6011      	str	r1, [r2, #0]
 80021f4:	4a35      	ldr	r2, [pc, #212]	; (80022cc <xTaskIncrementTick+0x108>)
 80021f6:	6813      	ldr	r3, [r2, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	f7ff fe90 	bl	8001f20 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8002200:	4c33      	ldr	r4, [pc, #204]	; (80022d0 <xTaskIncrementTick+0x10c>)
 8002202:	f04f 0b00 	mov.w	fp, #0
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	9401      	str	r4, [sp, #4]
 800220a:	429d      	cmp	r5, r3
 800220c:	4e31      	ldr	r6, [pc, #196]	; (80022d4 <xTaskIncrementTick+0x110>)
 800220e:	4f32      	ldr	r7, [pc, #200]	; (80022d8 <xTaskIncrementTick+0x114>)
 8002210:	d30b      	bcc.n	800222a <xTaskIncrementTick+0x66>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002212:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80022c4 <xTaskIncrementTick+0x100>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8002216:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80022e4 <xTaskIncrementTick+0x120>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800221a:	f8d8 2000 	ldr.w	r2, [r8]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	b9a2      	cbnz	r2, 800224c <xTaskIncrementTick+0x88>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8002222:	9b01      	ldr	r3, [sp, #4]
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800222e:	2214      	movs	r2, #20
 8002230:	434a      	muls	r2, r1
 8002232:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8002234:	2a02      	cmp	r2, #2
 8002236:	bf28      	it	cs
 8002238:	f04f 0b01 	movcs.w	fp, #1
 800223c:	e034      	b.n	80022a8 <xTaskIncrementTick+0xe4>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800223e:	4a27      	ldr	r2, [pc, #156]	; (80022dc <xTaskIncrementTick+0x118>)

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002240:	f04f 0b00 	mov.w	fp, #0
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002244:	6813      	ldr	r3, [r2, #0]
 8002246:	3301      	adds	r3, #1
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e02d      	b.n	80022a8 <xTaskIncrementTick+0xe4>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800224c:	f8d8 2000 	ldr.w	r2, [r8]
 8002250:	68d2      	ldr	r2, [r2, #12]
 8002252:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8002254:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 8002256:	428d      	cmp	r5, r1
 8002258:	d202      	bcs.n	8002260 <xTaskIncrementTick+0x9c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 800225a:	9b01      	ldr	r3, [sp, #4]
 800225c:	6019      	str	r1, [r3, #0]
							break;
 800225e:	e7e4      	b.n	800222a <xTaskIncrementTick+0x66>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002260:	f104 0a04 	add.w	sl, r4, #4
 8002264:	4650      	mov	r0, sl
 8002266:	f7ff fa0f 	bl	8001688 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800226a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800226c:	b119      	cbz	r1, 8002276 <xTaskIncrementTick+0xb2>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800226e:	f104 0018 	add.w	r0, r4, #24
 8002272:	f7ff fa09 	bl	8001688 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8002276:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002278:	f8d9 1000 	ldr.w	r1, [r9]
 800227c:	2301      	movs	r3, #1
 800227e:	fa03 fe00 	lsl.w	lr, r3, r0
 8002282:	ea4e 0101 	orr.w	r1, lr, r1
 8002286:	f04f 0e14 	mov.w	lr, #20
 800228a:	f8c9 1000 	str.w	r1, [r9]
 800228e:	fb0e 6000 	mla	r0, lr, r0, r6
 8002292:	4651      	mov	r1, sl
 8002294:	f7ff f9d4 	bl	8001640 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002298:	6838      	ldr	r0, [r7, #0]
 800229a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800229c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 800229e:	4291      	cmp	r1, r2
 80022a0:	bf28      	it	cs
 80022a2:	f04f 0b01 	movcs.w	fp, #1
 80022a6:	e7b8      	b.n	800221a <xTaskIncrementTick+0x56>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80022a8:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <xTaskIncrementTick+0x11c>)
 80022aa:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 80022ac:	2a00      	cmp	r2, #0
 80022ae:	bf18      	it	ne
 80022b0:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 80022b4:	4658      	mov	r0, fp
 80022b6:	b003      	add	sp, #12
 80022b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022bc:	20001220 	.word	0x20001220
 80022c0:	20001224 	.word	0x20001224
 80022c4:	20001154 	.word	0x20001154
 80022c8:	20001228 	.word	0x20001228
 80022cc:	20001150 	.word	0x20001150
 80022d0:	2000121c 	.word	0x2000121c
 80022d4:	20001178 	.word	0x20001178
 80022d8:	20001218 	.word	0x20001218
 80022dc:	20001174 	.word	0x20001174
 80022e0:	20001274 	.word	0x20001274
 80022e4:	20001270 	.word	0x20001270

080022e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80022e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80022ec:	4c2a      	ldr	r4, [pc, #168]	; (8002398 <xTaskResumeAll+0xb0>)
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	b913      	cbnz	r3, 80022f8 <xTaskResumeAll+0x10>
 80022f2:	f7ff fa15 	bl	8001720 <ulPortSetInterruptMask>
 80022f6:	e7fe      	b.n	80022f6 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80022f8:	f7ff fa28 	bl	800174c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	3b01      	subs	r3, #1
 8002300:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	b10b      	cbz	r3, 800230a <xTaskResumeAll+0x22>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8002306:	2400      	movs	r4, #0
 8002308:	e041      	b.n	800238e <xTaskResumeAll+0xa6>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <xTaskResumeAll+0xb4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f9      	beq.n	8002306 <xTaskResumeAll+0x1e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002312:	4d23      	ldr	r5, [pc, #140]	; (80023a0 <xTaskResumeAll+0xb8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8002314:	4e23      	ldr	r6, [pc, #140]	; (80023a4 <xTaskResumeAll+0xbc>)
 8002316:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80023b4 <xTaskResumeAll+0xcc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800231a:	682b      	ldr	r3, [r5, #0]
 800231c:	b303      	cbz	r3, 8002360 <xTaskResumeAll+0x78>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800231e:	68eb      	ldr	r3, [r5, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8002320:	2701      	movs	r7, #1
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002322:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002324:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002328:	f104 0018 	add.w	r0, r4, #24
 800232c:	f7ff f9ac 	bl	8001688 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002330:	4648      	mov	r0, r9
 8002332:	f7ff f9a9 	bl	8001688 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002336:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002338:	6833      	ldr	r3, [r6, #0]
 800233a:	fa07 f102 	lsl.w	r1, r7, r2
 800233e:	2014      	movs	r0, #20
 8002340:	430b      	orrs	r3, r1
 8002342:	fb00 8002 	mla	r0, r0, r2, r8
 8002346:	4649      	mov	r1, r9
 8002348:	6033      	str	r3, [r6, #0]
 800234a:	f7ff f979 	bl	8001640 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800234e:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <xTaskResumeAll+0xc0>)
 8002350:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	429a      	cmp	r2, r3
 8002358:	d3df      	bcc.n	800231a <xTaskResumeAll+0x32>
					{
						xYieldPending = pdTRUE;
 800235a:	4b14      	ldr	r3, [pc, #80]	; (80023ac <xTaskResumeAll+0xc4>)
 800235c:	601f      	str	r7, [r3, #0]
 800235e:	e7da      	b.n	8002316 <xTaskResumeAll+0x2e>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8002360:	4c13      	ldr	r4, [pc, #76]	; (80023b0 <xTaskResumeAll+0xc8>)
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	b933      	cbnz	r3, 8002374 <xTaskResumeAll+0x8c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <xTaskResumeAll+0xc4>)
 8002368:	681c      	ldr	r4, [r3, #0]
 800236a:	2c01      	cmp	r4, #1
 800236c:	d1cb      	bne.n	8002306 <xTaskResumeAll+0x1e>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800236e:	f7ff f9cb 	bl	8001708 <vPortYield>
 8002372:	e00c      	b.n	800238e <xTaskResumeAll+0xa6>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 8002374:	4d0d      	ldr	r5, [pc, #52]	; (80023ac <xTaskResumeAll+0xc4>)
 8002376:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f3      	beq.n	8002366 <xTaskResumeAll+0x7e>
					{
						if( xTaskIncrementTick() != pdFALSE )
 800237e:	f7ff ff21 	bl	80021c4 <xTaskIncrementTick>
 8002382:	b100      	cbz	r0, 8002386 <xTaskResumeAll+0x9e>
						{
							xYieldPending = pdTRUE;
 8002384:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	6023      	str	r3, [r4, #0]
 800238c:	e7f4      	b.n	8002378 <xTaskResumeAll+0x90>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800238e:	f7ff f9fb 	bl	8001788 <vPortExitCritical>

	return xAlreadyYielded;
}
 8002392:	4620      	mov	r0, r4
 8002394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002398:	20001220 	.word	0x20001220
 800239c:	20001244 	.word	0x20001244
 80023a0:	2000122c 	.word	0x2000122c
 80023a4:	20001270 	.word	0x20001270
 80023a8:	20001218 	.word	0x20001218
 80023ac:	20001274 	.word	0x20001274
 80023b0:	20001174 	.word	0x20001174
 80023b4:	20001178 	.word	0x20001178

080023b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80023b8:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80023ba:	b918      	cbnz	r0, 80023c4 <vTaskDelay+0xc>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80023bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 80023c0:	f7ff b9a2 	b.w	8001708 <vPortYield>


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <vTaskDelay+0x50>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	b113      	cbz	r3, 80023d0 <vTaskDelay+0x18>
 80023ca:	f7ff f9a9 	bl	8001720 <ulPortSetInterruptMask>
 80023ce:	e7fe      	b.n	80023ce <vTaskDelay+0x16>
			vTaskSuspendAll();
 80023d0:	f7ff fef0 	bl	80021b4 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <vTaskDelay+0x54>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80023d6:	4d0e      	ldr	r5, [pc, #56]	; (8002410 <vTaskDelay+0x58>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80023dc:	6828      	ldr	r0, [r5, #0]
 80023de:	3004      	adds	r0, #4
 80023e0:	f7ff f952 	bl	8001688 <uxListRemove>
 80023e4:	b940      	cbnz	r0, 80023f8 <vTaskDelay+0x40>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80023e6:	682b      	ldr	r3, [r5, #0]
 80023e8:	490a      	ldr	r1, [pc, #40]	; (8002414 <vTaskDelay+0x5c>)
 80023ea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80023ec:	680a      	ldr	r2, [r1, #0]
 80023ee:	2301      	movs	r3, #1
 80023f0:	4083      	lsls	r3, r0
 80023f2:	ea22 0303 	bic.w	r3, r2, r3
 80023f6:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7ff fda3 	bl	8001f44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80023fe:	f7ff ff73 	bl	80022e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002402:	2800      	cmp	r0, #0
 8002404:	d0da      	beq.n	80023bc <vTaskDelay+0x4>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002406:	bd38      	pop	{r3, r4, r5, pc}
 8002408:	20001220 	.word	0x20001220
 800240c:	20001224 	.word	0x20001224
 8002410:	20001218 	.word	0x20001218
 8002414:	20001270 	.word	0x20001270

08002418 <prvIdleTask>:
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8002418:	4d15      	ldr	r5, [pc, #84]	; (8002470 <prvIdleTask+0x58>)
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800241a:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800241c:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800241e:	4f15      	ldr	r7, [pc, #84]	; (8002474 <prvIdleTask+0x5c>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8002420:	682b      	ldr	r3, [r5, #0]
 8002422:	b1f3      	cbz	r3, 8002462 <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8002424:	f7ff fec6 	bl	80021b4 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002428:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 800242a:	f7ff ff5d 	bl	80022e8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800242e:	2c00      	cmp	r4, #0
 8002430:	d0f6      	beq.n	8002420 <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002432:	f7ff f98b 	bl	800174c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <prvIdleTask+0x5c>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800243c:	1d20      	adds	r0, r4, #4
 800243e:	f7ff f923 	bl	8001688 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002442:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <prvIdleTask+0x60>)
 8002444:	6813      	ldr	r3, [r2, #0]
 8002446:	3b01      	subs	r3, #1
 8002448:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800244a:	6833      	ldr	r3, [r6, #0]
 800244c:	3b01      	subs	r3, #1
 800244e:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 8002450:	f7ff f99a 	bl	8001788 <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8002454:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002456:	f7ff fb07 	bl	8001a68 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 800245a:	4620      	mov	r0, r4
 800245c:	f7ff fb04 	bl	8001a68 <vPortFree>
 8002460:	e7de      	b.n	8002420 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <prvIdleTask+0x64>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d9d9      	bls.n	800241e <prvIdleTask+0x6>
			{
				taskYIELD();
 800246a:	f7ff f94d 	bl	8001708 <vPortYield>
 800246e:	e7d6      	b.n	800241e <prvIdleTask+0x6>
 8002470:	2000115c 	.word	0x2000115c
 8002474:	20001204 	.word	0x20001204
 8002478:	20001244 	.word	0x20001244
 800247c:	20001178 	.word	0x20001178

08002480 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <vTaskSwitchContext+0x54>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002482:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <vTaskSwitchContext+0x58>)
 8002488:	b10a      	cbz	r2, 800248e <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800248a:	2201      	movs	r2, #1
 800248c:	e020      	b.n	80024d0 <vTaskSwitchContext+0x50>
	}
	else
	{
		xYieldPending = pdFALSE;
 800248e:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <vTaskSwitchContext+0x5c>)
 8002492:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f1c3 031f 	rsb	r3, r3, #31
 800249e:	2214      	movs	r2, #20
 80024a0:	435a      	muls	r2, r3
 80024a2:	490f      	ldr	r1, [pc, #60]	; (80024e0 <vTaskSwitchContext+0x60>)
 80024a4:	588c      	ldr	r4, [r1, r2]
 80024a6:	1888      	adds	r0, r1, r2
 80024a8:	b914      	cbnz	r4, 80024b0 <vTaskSwitchContext+0x30>
 80024aa:	f7ff f939 	bl	8001720 <ulPortSetInterruptMask>
 80024ae:	e7fe      	b.n	80024ae <vTaskSwitchContext+0x2e>
 80024b0:	6844      	ldr	r4, [r0, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	6864      	ldr	r4, [r4, #4]
 80024b6:	440a      	add	r2, r1
 80024b8:	4294      	cmp	r4, r2
 80024ba:	bf08      	it	eq
 80024bc:	6862      	ldreq	r2, [r4, #4]
 80024be:	6044      	str	r4, [r0, #4]
 80024c0:	bf08      	it	eq
 80024c2:	6042      	streq	r2, [r0, #4]
 80024c4:	2214      	movs	r2, #20
 80024c6:	fb02 1303 	mla	r3, r2, r3, r1
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <vTaskSwitchContext+0x64>)
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	bd10      	pop	{r4, pc}
 80024d4:	20001220 	.word	0x20001220
 80024d8:	20001274 	.word	0x20001274
 80024dc:	20001270 	.word	0x20001270
 80024e0:	20001178 	.word	0x20001178
 80024e4:	20001218 	.word	0x20001218

080024e8 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80024e8:	b538      	push	{r3, r4, r5, lr}
 80024ea:	460d      	mov	r5, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 80024ec:	b910      	cbnz	r0, 80024f4 <vTaskPlaceOnEventList+0xc>
 80024ee:	f7ff f917 	bl	8001720 <ulPortSetInterruptMask>
 80024f2:	e7fe      	b.n	80024f2 <vTaskPlaceOnEventList+0xa>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80024f4:	4c11      	ldr	r4, [pc, #68]	; (800253c <vTaskPlaceOnEventList+0x54>)
 80024f6:	6821      	ldr	r1, [r4, #0]
 80024f8:	3118      	adds	r1, #24
 80024fa:	f7ff f8ad 	bl	8001658 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80024fe:	6820      	ldr	r0, [r4, #0]
 8002500:	3004      	adds	r0, #4
 8002502:	f7ff f8c1 	bl	8001688 <uxListRemove>
 8002506:	b940      	cbnz	r0, 800251a <vTaskPlaceOnEventList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	490d      	ldr	r1, [pc, #52]	; (8002540 <vTaskPlaceOnEventList+0x58>)
 800250c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800250e:	680a      	ldr	r2, [r1, #0]
 8002510:	2301      	movs	r3, #1
 8002512:	4083      	lsls	r3, r0
 8002514:	ea22 0303 	bic.w	r3, r2, r3
 8002518:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 800251a:	1c6b      	adds	r3, r5, #1
 800251c:	d106      	bne.n	800252c <vTaskPlaceOnEventList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800251e:	6821      	ldr	r1, [r4, #0]
 8002520:	4808      	ldr	r0, [pc, #32]	; (8002544 <vTaskPlaceOnEventList+0x5c>)
 8002522:	3104      	adds	r1, #4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002528:	f7ff b88a 	b.w	8001640 <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <vTaskPlaceOnEventList+0x60>)
 800252e:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002530:	4428      	add	r0, r5
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002536:	f7ff bd05 	b.w	8001f44 <prvAddCurrentTaskToDelayedList>
 800253a:	bf00      	nop
 800253c:	20001218 	.word	0x20001218
 8002540:	20001270 	.word	0x20001270
 8002544:	2000125c 	.word	0x2000125c
 8002548:	20001224 	.word	0x20001224

0800254c <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800254c:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800254e:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002550:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002552:	b914      	cbnz	r4, 800255a <xTaskRemoveFromEventList+0xe>
 8002554:	f7ff f8e4 	bl	8001720 <ulPortSetInterruptMask>
 8002558:	e7fe      	b.n	8002558 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800255a:	f104 0518 	add.w	r5, r4, #24
 800255e:	4628      	mov	r0, r5
 8002560:	f7ff f892 	bl	8001688 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <xTaskRemoveFromEventList+0x60>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	b983      	cbnz	r3, 800258c <xTaskRemoveFromEventList+0x40>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800256a:	1d26      	adds	r6, r4, #4
 800256c:	4630      	mov	r0, r6
 800256e:	f7ff f88b 	bl	8001688 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002572:	490f      	ldr	r1, [pc, #60]	; (80025b0 <xTaskRemoveFromEventList+0x64>)
 8002574:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002576:	680a      	ldr	r2, [r1, #0]
 8002578:	2301      	movs	r3, #1
 800257a:	40ab      	lsls	r3, r5
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <xTaskRemoveFromEventList+0x68>)
 8002582:	2014      	movs	r0, #20
 8002584:	4631      	mov	r1, r6
 8002586:	fb00 3005 	mla	r0, r0, r5, r3
 800258a:	e001      	b.n	8002590 <xTaskRemoveFromEventList+0x44>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800258c:	4629      	mov	r1, r5
 800258e:	480a      	ldr	r0, [pc, #40]	; (80025b8 <xTaskRemoveFromEventList+0x6c>)
 8002590:	f7ff f856 	bl	8001640 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <xTaskRemoveFromEventList+0x70>)
 8002596:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800259e:	bf83      	ittte	hi
 80025a0:	4b07      	ldrhi	r3, [pc, #28]	; (80025c0 <xTaskRemoveFromEventList+0x74>)
 80025a2:	2001      	movhi	r0, #1
 80025a4:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 80025a6:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
 80025aa:	bf00      	nop
 80025ac:	20001220 	.word	0x20001220
 80025b0:	20001270 	.word	0x20001270
 80025b4:	20001178 	.word	0x20001178
 80025b8:	2000122c 	.word	0x2000122c
 80025bc:	20001218 	.word	0x20001218
 80025c0:	20001274 	.word	0x20001274

080025c4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80025c4:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 80025c6:	b910      	cbnz	r0, 80025ce <vTaskSetTimeOutState+0xa>
 80025c8:	f7ff f8aa 	bl	8001720 <ulPortSetInterruptMask>
 80025cc:	e7fe      	b.n	80025cc <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80025ce:	4b03      	ldr	r3, [pc, #12]	; (80025dc <vTaskSetTimeOutState+0x18>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80025d4:	4b02      	ldr	r3, [pc, #8]	; (80025e0 <vTaskSetTimeOutState+0x1c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6043      	str	r3, [r0, #4]
 80025da:	bd08      	pop	{r3, pc}
 80025dc:	20001150 	.word	0x20001150
 80025e0:	20001224 	.word	0x20001224

080025e4 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80025e4:	b538      	push	{r3, r4, r5, lr}
 80025e6:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80025e8:	4604      	mov	r4, r0
 80025ea:	b910      	cbnz	r0, 80025f2 <xTaskCheckForTimeOut+0xe>
 80025ec:	f7ff f898 	bl	8001720 <ulPortSetInterruptMask>
 80025f0:	e7fe      	b.n	80025f0 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
 80025f2:	b911      	cbnz	r1, 80025fa <xTaskCheckForTimeOut+0x16>
 80025f4:	f7ff f894 	bl	8001720 <ulPortSetInterruptMask>
 80025f8:	e7fe      	b.n	80025f8 <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
 80025fa:	f7ff f8a7 	bl	800174c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <xTaskCheckForTimeOut+0x54>)
 8002600:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002602:	682b      	ldr	r3, [r5, #0]
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	d010      	beq.n	800262a <xTaskCheckForTimeOut+0x46>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002608:	4a0c      	ldr	r2, [pc, #48]	; (800263c <xTaskCheckForTimeOut+0x58>)
 800260a:	6820      	ldr	r0, [r4, #0]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	4290      	cmp	r0, r2
 8002610:	6862      	ldr	r2, [r4, #4]
 8002612:	d001      	beq.n	8002618 <xTaskCheckForTimeOut+0x34>
 8002614:	4291      	cmp	r1, r2
 8002616:	d20a      	bcs.n	800262e <xTaskCheckForTimeOut+0x4a>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8002618:	1a88      	subs	r0, r1, r2
 800261a:	4283      	cmp	r3, r0
 800261c:	d907      	bls.n	800262e <xTaskCheckForTimeOut+0x4a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800261e:	1a52      	subs	r2, r2, r1
 8002620:	4413      	add	r3, r2
 8002622:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff ffcd 	bl	80025c4 <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 800262a:	2400      	movs	r4, #0
 800262c:	e000      	b.n	8002630 <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 800262e:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002630:	f7ff f8aa 	bl	8001788 <vPortExitCritical>

	return xReturn;
}
 8002634:	4620      	mov	r0, r4
 8002636:	bd38      	pop	{r3, r4, r5, pc}
 8002638:	20001224 	.word	0x20001224
 800263c:	20001150 	.word	0x20001150

08002640 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8002640:	4b01      	ldr	r3, [pc, #4]	; (8002648 <vTaskMissedYield+0x8>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	4770      	bx	lr
 8002648:	20001274 	.word	0x20001274

0800264c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <xTaskGetSchedulerState+0x18>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b133      	cbz	r3, 8002660 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <xTaskGetSchedulerState+0x1c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002658:	bf0c      	ite	eq
 800265a:	2002      	moveq	r0, #2
 800265c:	2000      	movne	r0, #0
 800265e:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002660:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8002662:	4770      	bx	lr
 8002664:	20001158 	.word	0x20001158
 8002668:	20001220 	.word	0x20001220

0800266c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800266c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002670:	4604      	mov	r4, r0
 8002672:	2800      	cmp	r0, #0
 8002674:	d03b      	beq.n	80026ee <vTaskPriorityInherit+0x82>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002676:	4d1f      	ldr	r5, [pc, #124]	; (80026f4 <vTaskPriorityInherit+0x88>)
 8002678:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800267a:	682a      	ldr	r2, [r5, #0]
 800267c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800267e:	4293      	cmp	r3, r2
 8002680:	d235      	bcs.n	80026ee <vTaskPriorityInherit+0x82>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002682:	6982      	ldr	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002684:	4e1c      	ldr	r6, [pc, #112]	; (80026f8 <vTaskPriorityInherit+0x8c>)
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002686:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002688:	bfa8      	it	ge
 800268a:	682a      	ldrge	r2, [r5, #0]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800268c:	f04f 0714 	mov.w	r7, #20
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002690:	bfa8      	it	ge
 8002692:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002694:	fb07 6303 	mla	r3, r7, r3, r6
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002698:	bfa4      	itt	ge
 800269a:	f1c2 0207 	rsbge	r2, r2, #7
 800269e:	6182      	strge	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80026a0:	6942      	ldr	r2, [r0, #20]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d120      	bne.n	80026e8 <vTaskPriorityInherit+0x7c>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80026a6:	f100 0804 	add.w	r8, r0, #4
 80026aa:	4640      	mov	r0, r8
 80026ac:	f7fe ffec 	bl	8001688 <uxListRemove>
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <vTaskPriorityInherit+0x90>)
 80026b2:	b948      	cbnz	r0, 80026c8 <vTaskPriorityInherit+0x5c>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80026b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80026b6:	4347      	muls	r7, r0
 80026b8:	59f2      	ldr	r2, [r6, r7]
 80026ba:	b92a      	cbnz	r2, 80026c8 <vTaskPriorityInherit+0x5c>
 80026bc:	6819      	ldr	r1, [r3, #0]
 80026be:	2201      	movs	r2, #1
 80026c0:	4082      	lsls	r2, r0
 80026c2:	ea21 0202 	bic.w	r2, r1, r2
 80026c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80026c8:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 80026ca:	2001      	movs	r0, #1
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80026cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80026ce:	4641      	mov	r1, r8
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80026d0:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80026d2:	681c      	ldr	r4, [r3, #0]
 80026d4:	4090      	lsls	r0, r2
 80026d6:	4320      	orrs	r0, r4
 80026d8:	6018      	str	r0, [r3, #0]
 80026da:	2014      	movs	r0, #20
 80026dc:	fb00 6002 	mla	r0, r0, r2, r6
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 80026e4:	f7fe bfac 	b.w	8001640 <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	62c3      	str	r3, [r0, #44]	; 0x2c
 80026ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026f2:	bf00      	nop
 80026f4:	20001218 	.word	0x20001218
 80026f8:	20001178 	.word	0x20001178
 80026fc:	20001270 	.word	0x20001270

08002700 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8002702:	4604      	mov	r4, r0
 8002704:	b908      	cbnz	r0, 800270a <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8002706:	2000      	movs	r0, #0
 8002708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800270a:	4b1c      	ldr	r3, [pc, #112]	; (800277c <xTaskPriorityDisinherit+0x7c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4298      	cmp	r0, r3
 8002710:	d002      	beq.n	8002718 <xTaskPriorityDisinherit+0x18>
 8002712:	f7ff f805 	bl	8001720 <ulPortSetInterruptMask>
 8002716:	e7fe      	b.n	8002716 <xTaskPriorityDisinherit+0x16>

			configASSERT( pxTCB->uxMutexesHeld );
 8002718:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800271a:	b913      	cbnz	r3, 8002722 <xTaskPriorityDisinherit+0x22>
 800271c:	f7ff f800 	bl	8001720 <ulPortSetInterruptMask>
 8002720:	e7fe      	b.n	8002720 <xTaskPriorityDisinherit+0x20>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002722:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002724:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8002726:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002728:	4291      	cmp	r1, r2
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800272a:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800272c:	d0eb      	beq.n	8002706 <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1e9      	bne.n	8002706 <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002732:	1d05      	adds	r5, r0, #4
 8002734:	4628      	mov	r0, r5
 8002736:	f7fe ffa7 	bl	8001688 <uxListRemove>
 800273a:	4e11      	ldr	r6, [pc, #68]	; (8002780 <xTaskPriorityDisinherit+0x80>)
 800273c:	4a11      	ldr	r2, [pc, #68]	; (8002784 <xTaskPriorityDisinherit+0x84>)
 800273e:	b950      	cbnz	r0, 8002756 <xTaskPriorityDisinherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002740:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002742:	2114      	movs	r1, #20
 8002744:	4379      	muls	r1, r7
 8002746:	5873      	ldr	r3, [r6, r1]
 8002748:	b92b      	cbnz	r3, 8002756 <xTaskPriorityDisinherit+0x56>
 800274a:	6810      	ldr	r0, [r2, #0]
 800274c:	2301      	movs	r3, #1
 800274e:	40bb      	lsls	r3, r7
 8002750:	ea20 0303 	bic.w	r3, r0, r3
 8002754:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002756:	6ce3      	ldr	r3, [r4, #76]	; 0x4c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 8002758:	6810      	ldr	r0, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800275a:	f1c3 0107 	rsb	r1, r3, #7
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800275e:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002760:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002762:	2401      	movs	r4, #1
 8002764:	fa04 f103 	lsl.w	r1, r4, r3
 8002768:	4308      	orrs	r0, r1
 800276a:	6010      	str	r0, [r2, #0]
 800276c:	2014      	movs	r0, #20
 800276e:	fb00 6003 	mla	r0, r0, r3, r6
 8002772:	4629      	mov	r1, r5
 8002774:	f7fe ff64 	bl	8001640 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002778:	4620      	mov	r0, r4
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 800277a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800277c:	20001218 	.word	0x20001218
 8002780:	20001178 	.word	0x20001178
 8002784:	20001270 	.word	0x20001270

08002788 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <pvTaskIncrementMutexHeldCount+0x14>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	b11a      	cbz	r2, 8002796 <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800278e:	6819      	ldr	r1, [r3, #0]
 8002790:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002792:	3201      	adds	r2, #1
 8002794:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 8002796:	6818      	ldr	r0, [r3, #0]
	}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20001218 	.word	0x20001218

080027a0 <find_cmd_tbl>:

/***************************************************************************
 * find command table entry for a command
 */
cmd_tbl_t *find_cmd_tbl (const char *cmd, cmd_tbl_t *table, int table_len)
{
 80027a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a4:	460c      	mov	r4, r1

	/*
	 * Some commands allow length modifiers (like "cp.b");
	 * compare command name only until first dot.
	 */
	len = ((p = strchr(cmd, '.')) == NULL) ? strlen (cmd) : (p - cmd);
 80027a6:	212e      	movs	r1, #46	; 0x2e

/***************************************************************************
 * find command table entry for a command
 */
cmd_tbl_t *find_cmd_tbl (const char *cmd, cmd_tbl_t *table, int table_len)
{
 80027a8:	4681      	mov	r9, r0
 80027aa:	4615      	mov	r5, r2

	/*
	 * Some commands allow length modifiers (like "cp.b");
	 * compare command name only until first dot.
	 */
	len = ((p = strchr(cmd, '.')) == NULL) ? strlen (cmd) : (p - cmd);
 80027ac:	f001 fb26 	bl	8003dfc <strchr>
 80027b0:	b920      	cbnz	r0, 80027bc <find_cmd_tbl+0x1c>
 80027b2:	4648      	mov	r0, r9
 80027b4:	f7fd fcd4 	bl	8000160 <strlen>
 80027b8:	4606      	mov	r6, r0
 80027ba:	e001      	b.n	80027c0 <find_cmd_tbl+0x20>
 80027bc:	ebc9 0600 	rsb	r6, r9, r0

	for (cmdtp = table;
	     cmdtp != table + table_len;
 80027c0:	f04f 0818 	mov.w	r8, #24
 80027c4:	fb08 4805 	mla	r8, r8, r5, r4
 * find command table entry for a command
 */
cmd_tbl_t *find_cmd_tbl (const char *cmd, cmd_tbl_t *table, int table_len)
{
	cmd_tbl_t *cmdtp;
	cmd_tbl_t *cmdtp_temp = table;	/*Init value */
 80027c8:	4625      	mov	r5, r4
	const char *p;
	int len;
	int n_found = 0;
 80027ca:	2700      	movs	r7, #0
	 * Some commands allow length modifiers (like "cp.b");
	 * compare command name only until first dot.
	 */
	len = ((p = strchr(cmd, '.')) == NULL) ? strlen (cmd) : (p - cmd);

	for (cmdtp = table;
 80027cc:	4544      	cmp	r4, r8
 80027ce:	d010      	beq.n	80027f2 <find_cmd_tbl+0x52>
	     cmdtp != table + table_len;
	     cmdtp++) {
		if (strncmp (cmd, cmdtp->name, len) == 0) {
 80027d0:	f8d4 a000 	ldr.w	sl, [r4]
 80027d4:	4632      	mov	r2, r6
 80027d6:	4651      	mov	r1, sl
 80027d8:	4648      	mov	r0, r9
 80027da:	f001 fb25 	bl	8003e28 <strncmp>
 80027de:	b930      	cbnz	r0, 80027ee <find_cmd_tbl+0x4e>
			if (len == strlen (cmdtp->name))
 80027e0:	4650      	mov	r0, sl
 80027e2:	f7fd fcbd 	bl	8000160 <strlen>
 80027e6:	4286      	cmp	r6, r0
 80027e8:	d00b      	beq.n	8002802 <find_cmd_tbl+0x62>
				return cmdtp;	/* full match */

			cmdtp_temp = cmdtp;	/* abbreviated command ? */
			n_found++;
 80027ea:	4625      	mov	r5, r4
 80027ec:	3701      	adds	r7, #1
	 */
	len = ((p = strchr(cmd, '.')) == NULL) ? strlen (cmd) : (p - cmd);

	for (cmdtp = table;
	     cmdtp != table + table_len;
	     cmdtp++) {
 80027ee:	3418      	adds	r4, #24
 80027f0:	e7ec      	b.n	80027cc <find_cmd_tbl+0x2c>

			cmdtp_temp = cmdtp;	/* abbreviated command ? */
			n_found++;
		}
	}
	if (n_found == 1) {			/* exactly one match */
 80027f2:	2f01      	cmp	r7, #1
 80027f4:	d008      	beq.n	8002808 <find_cmd_tbl+0x68>
		return cmdtp_temp;
	}
	printf("command.c no match command\n");
 80027f6:	4806      	ldr	r0, [pc, #24]	; (8002810 <find_cmd_tbl+0x70>)
 80027f8:	f001 f85c 	bl	80038b4 <puts>
	return NULL;	/* not found or ambiguous command */
 80027fc:	2000      	movs	r0, #0
 80027fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002802:	4620      	mov	r0, r4
 8002804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002808:	4628      	mov	r0, r5
}
 800280a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800280e:	bf00      	nop
 8002810:	08004109 	.word	0x08004109

08002814 <find_cmd>:

cmd_tbl_t *find_cmd (const char *cmd)
{
	int len = &__shell_cmd_end - &__shell_cmd_start;
	return find_cmd_tbl(cmd, &__shell_cmd_start, len);
 8002814:	4903      	ldr	r1, [pc, #12]	; (8002824 <find_cmd+0x10>)
 8002816:	4b04      	ldr	r3, [pc, #16]	; (8002828 <find_cmd+0x14>)
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <find_cmd+0x18>)
 800281a:	1a5b      	subs	r3, r3, r1
 800281c:	10db      	asrs	r3, r3, #3
 800281e:	435a      	muls	r2, r3
 8002820:	f7ff bfbe 	b.w	80027a0 <find_cmd_tbl>
 8002824:	080042c4 	.word	0x080042c4
 8002828:	080042dc 	.word	0x080042dc
 800282c:	aaaaaaab 	.word	0xaaaaaaab

08002830 <cmd_usage>:
}

int cmd_usage(cmd_tbl_t *cmdtp)
{
 8002830:	b510      	push	{r4, lr}
 8002832:	4604      	mov	r4, r0
	printf("%s - %s\n", cmdtp->name, cmdtp->usage);
 8002834:	6902      	ldr	r2, [r0, #16]
 8002836:	6801      	ldr	r1, [r0, #0]
 8002838:	480a      	ldr	r0, [pc, #40]	; (8002864 <cmd_usage+0x34>)
 800283a:	f001 f817 	bl	800386c <iprintf>

#ifdef	CONFIG_SYS_LONGHELP
	printf("Usage:\n%s ", cmdtp->name);
 800283e:	6821      	ldr	r1, [r4, #0]
 8002840:	4809      	ldr	r0, [pc, #36]	; (8002868 <cmd_usage+0x38>)
 8002842:	f001 f813 	bl	800386c <iprintf>

	if (!cmdtp->help) {
 8002846:	6960      	ldr	r0, [r4, #20]
 8002848:	b920      	cbnz	r0, 8002854 <cmd_usage+0x24>
		puts ("- No additional help available.\n");
 800284a:	4808      	ldr	r0, [pc, #32]	; (800286c <cmd_usage+0x3c>)
 800284c:	f001 f832 	bl	80038b4 <puts>
		return 1;
 8002850:	2001      	movs	r0, #1
 8002852:	bd10      	pop	{r4, pc}
	}

	puts (cmdtp->help);
 8002854:	f001 f80a 	bl	800386c <iprintf>
	putc ('\n');
 8002858:	200a      	movs	r0, #10
 800285a:	f000 fa2b 	bl	8002cb4 <usartPutc>
#endif	/* CONFIG_SYS_LONGHELP */
	return 0;
 800285e:	2000      	movs	r0, #0
}
 8002860:	bd10      	pop	{r4, pc}
 8002862:	bf00      	nop
 8002864:	08004124 	.word	0x08004124
 8002868:	0800412d 	.word	0x0800412d
 800286c:	08004138 	.word	0x08004138

08002870 <_do_help>:
 * for long help messages
 */

int _do_help (cmd_tbl_t *cmd_start, int cmd_items, cmd_tbl_t * cmdtp, int
	      flag, int argc, char *argv[])
{
 8002870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800287c:	4606      	mov	r6, r0
	int i;
	int rcode = 0;

	if (argc == 1) {	/*show list of commands */
 800287e:	f1ba 0f01 	cmp.w	sl, #1
 * for long help messages
 */

int _do_help (cmd_tbl_t *cmd_start, int cmd_items, cmd_tbl_t * cmdtp, int
	      flag, int argc, char *argv[])
{
 8002882:	460d      	mov	r5, r1
	int i;
	int rcode = 0;

	if (argc == 1) {	/*show list of commands */
 8002884:	d005      	beq.n	8002892 <_do_help+0x22>
 8002886:	f8d7 9034 	ldr.w	r9, [r7, #52]	; 0x34
 800288a:	2400      	movs	r4, #0
 800288c:	f04f 0801 	mov.w	r8, #1
 8002890:	e075      	b.n	800297e <_do_help+0x10e>
		cmd_tbl_t *cmd_array[cmd_items];
 8002892:	008b      	lsls	r3, r1, #2
 8002894:	330a      	adds	r3, #10
 8002896:	f023 0307 	bic.w	r3, r3, #7
	      flag, int argc, char *argv[])
{
	int i;
	int rcode = 0;

	if (argc == 1) {	/*show list of commands */
 800289a:	f8c7 d004 	str.w	sp, [r7, #4]
		cmd_tbl_t *cmd_array[cmd_items];
 800289e:	ebad 0d03 	sub.w	sp, sp, r3
 80028a2:	46e8      	mov	r8, sp
 80028a4:	f101 3aff 	add.w	sl, r1, #4294967295
		int i, j, swaps;

		/* Make array of commands from .shell_cmd section */
		cmdtp = cmd_start;
		for (i = 0; i < cmd_items; i++) {
 80028a8:	2300      	movs	r3, #0
 80028aa:	2118      	movs	r1, #24
 80028ac:	429d      	cmp	r5, r3
 80028ae:	fb01 6203 	mla	r2, r1, r3, r6
 80028b2:	dd20      	ble.n	80028f6 <_do_help+0x86>
			cmd_array[i] = cmdtp++;
 80028b4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
		cmd_tbl_t *cmd_array[cmd_items];
		int i, j, swaps;

		/* Make array of commands from .shell_cmd section */
		cmdtp = cmd_start;
		for (i = 0; i < cmd_items; i++) {
 80028b8:	3301      	adds	r3, #1
 80028ba:	e7f7      	b.n	80028ac <_do_help+0x3c>
			cmd_array[i] = cmdtp++;
		}

		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
 80028bc:	2600      	movs	r6, #0
 80028be:	4644      	mov	r4, r8
 80028c0:	46b3      	mov	fp, r6
			swaps = 0;
			for (j = 0; j < i; ++j) {
				if (strcmp (cmd_array[j]->name,
 80028c2:	f8d4 9000 	ldr.w	r9, [r4]
					    cmd_array[j + 1]->name) > 0) {
 80028c6:	f854 2f04 	ldr.w	r2, [r4, #4]!

		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
			swaps = 0;
			for (j = 0; j < i; ++j) {
				if (strcmp (cmd_array[j]->name,
 80028ca:	f8d9 0000 	ldr.w	r0, [r9]
 80028ce:	6811      	ldr	r1, [r2, #0]
 80028d0:	603a      	str	r2, [r7, #0]
 80028d2:	f7fd fc3b 	bl	800014c <strcmp>
 80028d6:	2800      	cmp	r0, #0
					    cmd_array[j + 1]->name) > 0) {
					cmd_tbl_t *tmp;
					tmp = cmd_array[j];
					cmd_array[j] = cmd_array[j + 1];
 80028d8:	bfc8      	it	gt
 80028da:	683a      	ldrgt	r2, [r7, #0]
		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
			swaps = 0;
			for (j = 0; j < i; ++j) {
				if (strcmp (cmd_array[j]->name,
					    cmd_array[j + 1]->name) > 0) {
 80028dc:	f10b 0b01 	add.w	fp, fp, #1
					cmd_tbl_t *tmp;
					tmp = cmd_array[j];
					cmd_array[j] = cmd_array[j + 1];
 80028e0:	bfc2      	ittt	gt
 80028e2:	f844 2c04 	strgt.w	r2, [r4, #-4]
					cmd_array[j + 1] = tmp;
 80028e6:	f8c4 9000 	strgt.w	r9, [r4]
					++swaps;
 80028ea:	3601      	addgt	r6, #1
		}

		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
			swaps = 0;
			for (j = 0; j < i; ++j) {
 80028ec:	45d3      	cmp	fp, sl
 80028ee:	d1e8      	bne.n	80028c2 <_do_help+0x52>
					cmd_array[j] = cmd_array[j + 1];
					cmd_array[j + 1] = tmp;
					++swaps;
				}
			}
			if (!swaps)
 80028f0:	b126      	cbz	r6, 80028fc <_do_help+0x8c>
		for (i = 0; i < cmd_items; i++) {
			cmd_array[i] = cmdtp++;
		}

		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
 80028f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80028f6:	f1ba 0f00 	cmp.w	sl, #0
 80028fa:	dcdf      	bgt.n	80028bc <_do_help+0x4c>
			       cmd_array[i]->name, usage);
#else
			{
				char* cmd_name = cmd_array[i]->name;
				int cmd_name_len = strlen(cmd_name);
				int blank_len = (cmd_name_len < CONFIG_SYS_HELP_CMD_WIDTH)?  (CONFIG_SYS_HELP_CMD_WIDTH - cmd_name_len):0;
 80028fc:	2600      	movs	r6, #0
 80028fe:	e006      	b.n	800290e <_do_help+0x9e>
				while(cmd_name_len--) putc(*cmd_name++);
				while(blank_len--) putc(' ');
				puts("- ");
 8002900:	4826      	ldr	r0, [pc, #152]	; (800299c <_do_help+0x12c>)
 8002902:	f000 ffb3 	bl	800386c <iprintf>
				puts(usage);
 8002906:	4650      	mov	r0, sl
 8002908:	f000 ffb0 	bl	800386c <iprintf>
			if (!swaps)
				break;
		}

		/* print short help (usage) */
		for (i = 0; i < cmd_items; i++) {
 800290c:	3601      	adds	r6, #1
 800290e:	42b5      	cmp	r5, r6
 8002910:	dd23      	ble.n	800295a <_do_help+0xea>
			const char *usage = cmd_array[i]->usage;
 8002912:	f858 b026 	ldr.w	fp, [r8, r6, lsl #2]
 8002916:	f8db a010 	ldr.w	sl, [fp, #16]

			/* allow user abort */
			if (ctrlc ())
 800291a:	f000 fa4f 	bl	8002dbc <ctrlc>
 800291e:	4604      	mov	r4, r0
 8002920:	b9e8      	cbnz	r0, 800295e <_do_help+0xee>
				return 1;
			if (usage == NULL)
 8002922:	f1ba 0f00 	cmp.w	sl, #0
 8002926:	d0f1      	beq.n	800290c <_do_help+0x9c>
#if 0
			printf("%-*s- %s\n", CONFIG_SYS_HELP_CMD_WIDTH,
			       cmd_array[i]->name, usage);
#else
			{
				char* cmd_name = cmd_array[i]->name;
 8002928:	f8db 9000 	ldr.w	r9, [fp]
				int cmd_name_len = strlen(cmd_name);
 800292c:	4648      	mov	r0, r9
 800292e:	f7fd fc17 	bl	8000160 <strlen>
				int blank_len = (cmd_name_len < CONFIG_SYS_HELP_CMD_WIDTH)?  (CONFIG_SYS_HELP_CMD_WIDTH - cmd_name_len):0;
 8002932:	2807      	cmp	r0, #7
 8002934:	bfd8      	it	le
 8002936:	f1c0 0408 	rsble	r4, r0, #8
 800293a:	eb09 0b00 	add.w	fp, r9, r0
				while(cmd_name_len--) putc(*cmd_name++);
 800293e:	45d9      	cmp	r9, fp
 8002940:	d004      	beq.n	800294c <_do_help+0xdc>
 8002942:	f819 0b01 	ldrb.w	r0, [r9], #1
 8002946:	f000 f9b5 	bl	8002cb4 <usartPutc>
 800294a:	e7f8      	b.n	800293e <_do_help+0xce>
				while(blank_len--) putc(' ');
 800294c:	f114 34ff 	adds.w	r4, r4, #4294967295
 8002950:	d3d6      	bcc.n	8002900 <_do_help+0x90>
 8002952:	2020      	movs	r0, #32
 8002954:	f000 f9ae 	bl	8002cb4 <usartPutc>
 8002958:	e7f8      	b.n	800294c <_do_help+0xdc>
				puts(usage);
				//putc('\n');
			}
#endif
		}
		return 0;
 800295a:	2000      	movs	r0, #0
 800295c:	e000      	b.n	8002960 <_do_help+0xf0>
		for (i = 0; i < cmd_items; i++) {
			const char *usage = cmd_array[i]->usage;

			/* allow user abort */
			if (ctrlc ())
				return 1;
 800295e:	2001      	movs	r0, #1
 8002960:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8002964:	e016      	b.n	8002994 <_do_help+0x124>
	}
	/*
	 * command help (long version)
	 */
	for (i = 1; i < argc; ++i) {
		if ((cmdtp = find_cmd_tbl (argv[i], cmd_start, cmd_items )) != NULL) {
 8002966:	462a      	mov	r2, r5
 8002968:	4631      	mov	r1, r6
 800296a:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800296e:	f7ff ff17 	bl	80027a0 <find_cmd_tbl>
 8002972:	b138      	cbz	r0, 8002984 <_do_help+0x114>
			rcode |= cmd_usage(cmdtp);
 8002974:	f7ff ff5c 	bl	8002830 <cmd_usage>
 8002978:	4304      	orrs	r4, r0
		return 0;
	}
	/*
	 * command help (long version)
	 */
	for (i = 1; i < argc; ++i) {
 800297a:	f108 0801 	add.w	r8, r8, #1
 800297e:	45d0      	cmp	r8, sl
 8002980:	dbf1      	blt.n	8002966 <_do_help+0xf6>
 8002982:	e006      	b.n	8002992 <_do_help+0x122>
		if ((cmdtp = find_cmd_tbl (argv[i], cmd_start, cmd_items )) != NULL) {
			rcode |= cmd_usage(cmdtp);
		} else {
			printf ("Unknown command '%s' - try 'help'"
 8002984:	f8d9 1000 	ldr.w	r1, [r9]
 8002988:	4805      	ldr	r0, [pc, #20]	; (80029a0 <_do_help+0x130>)
 800298a:	f000 ff6f 	bl	800386c <iprintf>
				" without arguments for list of all"
				" known commands\n\n", argv[i]
					);
			rcode = 1;
 800298e:	2401      	movs	r4, #1
 8002990:	e7f3      	b.n	800297a <_do_help+0x10a>
 8002992:	4620      	mov	r0, r4
		}
	}
	return rcode;
}
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800299c:	08004158 	.word	0x08004158
 80029a0:	0800415b 	.word	0x0800415b

080029a4 <do_help>:
	return simple_strtoul(cp,endp,base);
}

/* --------------------------------------------------------------------------- */
int do_help(cmd_tbl_t * cmdtp, int flag, int argc, char *argv[])
{
 80029a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return _do_help(&__shell_cmd_start,
 80029a6:	4d07      	ldr	r5, [pc, #28]	; (80029c4 <do_help+0x20>)
 80029a8:	4c07      	ldr	r4, [pc, #28]	; (80029c8 <do_help+0x24>)
 80029aa:	e88d 000c 	stmia.w	sp, {r2, r3}
 80029ae:	1b64      	subs	r4, r4, r5
 80029b0:	460b      	mov	r3, r1
 80029b2:	4906      	ldr	r1, [pc, #24]	; (80029cc <do_help+0x28>)
 80029b4:	10e4      	asrs	r4, r4, #3
 80029b6:	4602      	mov	r2, r0
 80029b8:	4361      	muls	r1, r4
 80029ba:	4628      	mov	r0, r5
 80029bc:	f7ff ff58 	bl	8002870 <_do_help>
			&__shell_cmd_end - &__shell_cmd_start,
			cmdtp, flag, argc, argv);
}
 80029c0:	b003      	add	sp, #12
 80029c2:	bd30      	pop	{r4, r5, pc}
 80029c4:	080042c4 	.word	0x080042c4
 80029c8:	080042dc 	.word	0x080042dc
 80029cc:	aaaaaaab 	.word	0xaaaaaaab

080029d0 <stm32LiveTask>:
}

/* USER CODE BEGIN 4 */
/* stm32LiveTask function */
void stm32LiveTask(void const * argument)
{
 80029d0:	b510      	push	{r4, lr}
	unsigned int count = 0;
 80029d2:	2400      	movs	r4, #0

	for(;;)
	{
		if(count % 2)	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80029d4:	f014 0201 	ands.w	r2, r4, #1
 80029d8:	bf18      	it	ne
 80029da:	2201      	movne	r2, #1
		else			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80029dc:	2120      	movs	r1, #32
 80029de:	4806      	ldr	r0, [pc, #24]	; (80029f8 <stm32LiveTask+0x28>)
 80029e0:	f7fd ff14 	bl	800080c <HAL_GPIO_WritePin>

		if(count < 100) 	count++;
 80029e4:	2c63      	cmp	r4, #99	; 0x63
		else				count = 0;

		osDelay(1000);
 80029e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	for(;;)
	{
		if(count % 2)	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
		else			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);

		if(count < 100) 	count++;
 80029ea:	bf94      	ite	ls
 80029ec:	3401      	addls	r4, #1
		else				count = 0;
 80029ee:	2400      	movhi	r4, #0

		osDelay(1000);
 80029f0:	f7fe fdb7 	bl	8001562 <osDelay>
	}
 80029f4:	e7ee      	b.n	80029d4 <stm32LiveTask+0x4>
 80029f6:	bf00      	nop
 80029f8:	40010c00 	.word	0x40010c00

080029fc <alarmOutTask>:
}

/* alarmOutTask function */
void alarmOutTask(void const * argument)
{
 80029fc:	b508      	push	{r3, lr}
	for(;;)
	{
		osDelay(1000);
 80029fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a02:	f7fe fdae 	bl	8001562 <osDelay>
 8002a06:	e7fa      	b.n	80029fe <alarmOutTask+0x2>

08002a08 <stm32Usart1Task>:
	}
}

void stm32Usart1Task(void const * argument)
{
 8002a08:	b508      	push	{r3, lr}
	sInBuf = ShellInitRecvBuf();
 8002a0a:	f000 fd4d 	bl	80034a8 <ShellInitRecvBuf>
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <stm32Usart1Task+0x24>)
 8002a10:	6018      	str	r0, [r3, #0]
	if(uartRxQueueHandle != NULL) HAL_UART_Receive_IT(&huart1,uartRxQueueHandle,USART_RX_BUFF_SIZE);
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <stm32Usart1Task+0x28>)
 8002a14:	6819      	ldr	r1, [r3, #0]
 8002a16:	b119      	cbz	r1, 8002a20 <stm32Usart1Task+0x18>
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4806      	ldr	r0, [pc, #24]	; (8002a34 <stm32Usart1Task+0x2c>)
 8002a1c:	f7fe fc8a 	bl	8001334 <HAL_UART_Receive_IT>

	for(;;)
	{
		stm32ShellCommand();
 8002a20:	f000 fd26 	bl	8003470 <stm32ShellCommand>
		osDelay(10);
 8002a24:	200a      	movs	r0, #10
 8002a26:	f7fe fd9c 	bl	8001562 <osDelay>
 8002a2a:	e7f9      	b.n	8002a20 <stm32Usart1Task+0x18>
 8002a2c:	20001288 	.word	0x20001288
 8002a30:	20001340 	.word	0x20001340
 8002a34:	20001388 	.word	0x20001388

08002a38 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002a38:	b570      	push	{r4, r5, r6, lr}

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002a3a:	2309      	movs	r3, #9
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002a3c:	b092      	sub	sp, #72	; 0x48

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002a3e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a44:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002a46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a4a:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a4c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a4e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a50:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a52:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002a56:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a58:	960e      	str	r6, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a5a:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a5c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a5e:	f7fd ff07 	bl	8000870 <HAL_RCC_OscConfig>
 8002a62:	b100      	cbz	r0, 8002a66 <SystemClock_Config+0x2e>
 8002a64:	e7fe      	b.n	8002a64 <SystemClock_Config+0x2c>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a66:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a68:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a6a:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a6c:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a6e:	4631      	mov	r1, r6
 8002a70:	a803      	add	r0, sp, #12
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a72:	9503      	str	r5, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a74:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a76:	f7fe f9a3 	bl	8000dc0 <HAL_RCC_ClockConfig>
 8002a7a:	b100      	cbz	r0, 8002a7e <SystemClock_Config+0x46>
 8002a7c:	e7fe      	b.n	8002a7c <SystemClock_Config+0x44>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8002a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a82:	4668      	mov	r0, sp
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002a84:	9400      	str	r4, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8002a86:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a88:	f7fe fa82 	bl	8000f90 <HAL_RCCEx_PeriphCLKConfig>
 8002a8c:	4604      	mov	r4, r0
 8002a8e:	b100      	cbz	r0, 8002a92 <SystemClock_Config+0x5a>
 8002a90:	e7fe      	b.n	8002a90 <SystemClock_Config+0x58>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002a92:	f7fe fa47 	bl	8000f24 <HAL_RCC_GetHCLKFreq>
 8002a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a9e:	f7fd fdbb 	bl	8000618 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002aa2:	2004      	movs	r0, #4
 8002aa4:	f7fd fdce 	bl	8000644 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	4629      	mov	r1, r5
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab0:	f7fd fd72 	bl	8000598 <HAL_NVIC_SetPriority>
}
 8002ab4:	b012      	add	sp, #72	; 0x48
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}

08002ab8 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8002ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002abc:	b098      	sub	sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002abe:	f7fd fbb5 	bl	800022c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8002ac2:	f7ff ffb9 	bl	8002a38 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ac6:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <main+0x1a8>)

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac8:	2500      	movs	r5, #0
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aca:	699a      	ldr	r2, [r3, #24]
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002acc:	a913      	add	r1, sp, #76	; 0x4c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ace:	f042 0220 	orr.w	r2, r2, #32
 8002ad2:	619a      	str	r2, [r3, #24]
 8002ad4:	699a      	ldr	r2, [r3, #24]
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad6:	4863      	ldr	r0, [pc, #396]	; (8002c64 <main+0x1ac>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad8:	f002 0220 	and.w	r2, r2, #32
 8002adc:	9204      	str	r2, [sp, #16]
 8002ade:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae2:	2701      	movs	r7, #1

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae4:	f042 0204 	orr.w	r2, r2, #4
 8002ae8:	619a      	str	r2, [r3, #24]
 8002aea:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002aec:	f44f 6600 	mov.w	r6, #2048	; 0x800

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af0:	f002 0204 	and.w	r2, r2, #4
 8002af4:	9205      	str	r2, [sp, #20]
 8002af6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	f04f 0802 	mov.w	r8, #2
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	f042 0208 	orr.w	r2, r2, #8
 8002b02:	619a      	str	r2, [r3, #24]
 8002b04:	699b      	ldr	r3, [r3, #24]

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b06:	9514      	str	r5, [sp, #80]	; 0x50
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	9306      	str	r3, [sp, #24]
 8002b0e:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002b10:	23ff      	movs	r3, #255	; 0xff
 8002b12:	9313      	str	r3, [sp, #76]	; 0x4c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b16:	f7fd fda1 	bl	800065c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1a:	a913      	add	r1, sp, #76	; 0x4c
 8002b1c:	4851      	ldr	r0, [pc, #324]	; (8002c64 <main+0x1ac>)

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002b1e:	2478      	movs	r4, #120	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b20:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b22:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b28:	f7fd fd98 	bl	800065c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2c:	a913      	add	r1, sp, #76	; 0x4c
 8002b2e:	484e      	ldr	r0, [pc, #312]	; (8002c68 <main+0x1b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002b30:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b32:	9714      	str	r7, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b38:	f7fd fd90 	bl	800065c <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002b3c:	462a      	mov	r2, r5
 8002b3e:	4631      	mov	r1, r6
 8002b40:	4848      	ldr	r0, [pc, #288]	; (8002c64 <main+0x1ac>)
 8002b42:	f7fd fe63 	bl	800080c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002b46:	4621      	mov	r1, r4
 8002b48:	4847      	ldr	r0, [pc, #284]	; (8002c68 <main+0x1b0>)
 8002b4a:	462a      	mov	r2, r5
 8002b4c:	f7fd fe5e 	bl	800080c <HAL_GPIO_WritePin>

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8002b50:	4c46      	ldr	r4, [pc, #280]	; (8002c6c <main+0x1b4>)
 8002b52:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <main+0x1b8>)
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b54:	4620      	mov	r0, r4

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8002b56:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b58:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b5c:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b5e:	60e5      	str	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b60:	6165      	str	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b62:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b64:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002b66:	6127      	str	r7, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b68:	f7fd fc70 	bl	800044c <HAL_ADC_Init>
 8002b6c:	b100      	cbz	r0, 8002b70 <main+0xb8>
 8002b6e:	e7fe      	b.n	8002b6e <main+0xb6>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_8;
 8002b70:	2308      	movs	r3, #8
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b72:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b74:	a913      	add	r1, sp, #76	; 0x4c
 8002b76:	4620      	mov	r0, r4
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_8;
 8002b78:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfig.Rank = 1;
 8002b7a:	9714      	str	r7, [sp, #80]	; 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b7c:	f7fd fb84 	bl	8000288 <HAL_ADC_ConfigChannel>
 8002b80:	b100      	cbz	r0, 8002b84 <main+0xcc>
 8002b82:	e7fe      	b.n	8002b82 <main+0xca>

/* IWDG init function */
static void MX_IWDG_Init(void)
{

  hiwdg.Instance = IWDG;
 8002b84:	4b3b      	ldr	r3, [pc, #236]	; (8002c74 <main+0x1bc>)
 8002b86:	4a3c      	ldr	r2, [pc, #240]	; (8002c78 <main+0x1c0>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8002b88:	6058      	str	r0, [r3, #4]

/* IWDG init function */
static void MX_IWDG_Init(void)
{

  hiwdg.Instance = IWDG;
 8002b8a:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
  hiwdg.Init.Reload = 4095;
 8002b8c:	f640 72ff 	movw	r2, #4095	; 0xfff
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002b90:	4618      	mov	r0, r3
static void MX_IWDG_Init(void)
{

  hiwdg.Instance = IWDG;
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
  hiwdg.Init.Reload = 4095;
 8002b92:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002b94:	f7fd fe3f 	bl	8000816 <HAL_IWDG_Init>
 8002b98:	b100      	cbz	r0, 8002b9c <main+0xe4>
 8002b9a:	e7fe      	b.n	8002b9a <main+0xe2>

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8002b9c:	4b37      	ldr	r3, [pc, #220]	; (8002c7c <main+0x1c4>)
  huart1.Init.BaudRate = 115200;
 8002b9e:	4938      	ldr	r1, [pc, #224]	; (8002c80 <main+0x1c8>)
 8002ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ba4:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba8:	6098      	str	r0, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002baa:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bac:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bae:	220c      	movs	r2, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bb0:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb2:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bb4:	4618      	mov	r0, r3
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bb6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bb8:	f7fe fb34 	bl	8001224 <HAL_UART_Init>
 8002bbc:	4606      	mov	r6, r0
 8002bbe:	b100      	cbz	r0, 8002bc2 <main+0x10a>
 8002bc0:	e7fe      	b.n	8002bc0 <main+0x108>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8002bc2:	a818      	add	r0, sp, #96	; 0x60
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8002bc4:	4639      	mov	r1, r7
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8002bc6:	f840 6d5c 	str.w	r6, [r0, #-92]!
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8002bca:	f7fe fcd2 	bl	8001572 <osSemaphoreCreate>
 8002bce:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <main+0x1cc>)

  /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 8002bd0:	4639      	mov	r1, r7
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8002bd2:	6018      	str	r0, [r3, #0]

  /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
 8002bd4:	a818      	add	r0, sp, #96	; 0x60
 8002bd6:	f840 6d58 	str.w	r6, [r0, #-88]!
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 8002bda:	f7fe fcca 	bl	8001572 <osSemaphoreCreate>
 8002bde:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <main+0x1d0>)

  /* definition and creation of myBinarySem03 */
  osSemaphoreDef(myBinarySem03);
  myBinarySem03Handle = osSemaphoreCreate(osSemaphore(myBinarySem03), 1);
 8002be0:	4639      	mov	r1, r7
  osSemaphoreDef(myBinarySem01);
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);

  /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 8002be2:	6018      	str	r0, [r3, #0]

  /* definition and creation of myBinarySem03 */
  osSemaphoreDef(myBinarySem03);
 8002be4:	a818      	add	r0, sp, #96	; 0x60
 8002be6:	f840 6d54 	str.w	r6, [r0, #-84]!
  myBinarySem03Handle = osSemaphoreCreate(osSemaphore(myBinarySem03), 1);
 8002bea:	f7fe fcc2 	bl	8001572 <osSemaphoreCreate>
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(stm32LiveCheck, stm32LiveTask, osPriorityNormal, 0, 64);
 8002bee:	4c27      	ldr	r4, [pc, #156]	; (8002c8c <main+0x1d4>)
  osSemaphoreDef(myBinarySem02);
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);

  /* definition and creation of myBinarySem03 */
  osSemaphoreDef(myBinarySem03);
  myBinarySem03Handle = osSemaphoreCreate(osSemaphore(myBinarySem03), 1);
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <main+0x1d8>)
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(stm32LiveCheck, stm32LiveTask, osPriorityNormal, 0, 64);
 8002bf2:	af09      	add	r7, sp, #36	; 0x24
  osSemaphoreDef(myBinarySem02);
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);

  /* definition and creation of myBinarySem03 */
  osSemaphoreDef(myBinarySem03);
  myBinarySem03Handle = osSemaphoreCreate(osSemaphore(myBinarySem03), 1);
 8002bf4:	6018      	str	r0, [r3, #0]
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(stm32LiveCheck, stm32LiveTask, osPriorityNormal, 0, 64);
 8002bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf8:	4625      	mov	r5, r4
 8002bfa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002bfc:	f855 3b04 	ldr.w	r3, [r5], #4
  defaultTaskHandle = osThreadCreate(osThread(stm32LiveCheck), NULL);
 8002c00:	4631      	mov	r1, r6
 8002c02:	a809      	add	r0, sp, #36	; 0x24
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(stm32LiveCheck, stm32LiveTask, osPriorityNormal, 0, 64);
 8002c04:	603b      	str	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(stm32LiveCheck), NULL);
 8002c06:	f7fe fc90 	bl	800152a <osThreadCreate>
 8002c0a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8002c98 <main+0x1e0>

  osThreadDef(alarmOut, alarmOutTask, osPriorityNormal, 0, 64);
 8002c0e:	af0e      	add	r7, sp, #56	; 0x38

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(stm32LiveCheck, stm32LiveTask, osPriorityNormal, 0, 64);
  defaultTaskHandle = osThreadCreate(osThread(stm32LiveCheck), NULL);
 8002c10:	f8c8 0000 	str.w	r0, [r8]

  osThreadDef(alarmOut, alarmOutTask, osPriorityNormal, 0, 64);
 8002c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c16:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002c18:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(alarmOut), NULL);
 8002c1a:	4631      	mov	r1, r6
 8002c1c:	a80e      	add	r0, sp, #56	; 0x38
  /* add threads, ... */

  osThreadDef(stm32LiveCheck, stm32LiveTask, osPriorityNormal, 0, 64);
  defaultTaskHandle = osThreadCreate(osThread(stm32LiveCheck), NULL);

  osThreadDef(alarmOut, alarmOutTask, osPriorityNormal, 0, 64);
 8002c1e:	603b      	str	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(alarmOut), NULL);
 8002c20:	f7fe fc83 	bl	800152a <osThreadCreate>

  osThreadDef(stm32Usart1, stm32Usart1Task, osPriorityNormal, 0, 128);
 8002c24:	f104 0718 	add.w	r7, r4, #24
 8002c28:	ad13      	add	r5, sp, #76	; 0x4c

  osThreadDef(stm32LiveCheck, stm32LiveTask, osPriorityNormal, 0, 64);
  defaultTaskHandle = osThreadCreate(osThread(stm32LiveCheck), NULL);

  osThreadDef(alarmOut, alarmOutTask, osPriorityNormal, 0, 64);
  defaultTaskHandle = osThreadCreate(osThread(alarmOut), NULL);
 8002c2a:	f8c8 0000 	str.w	r0, [r8]

  osThreadDef(stm32Usart1, stm32Usart1Task, osPriorityNormal, 0, 128);
 8002c2e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c32:	683b      	ldr	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(stm32Usart1), NULL);
 8002c34:	4631      	mov	r1, r6
 8002c36:	a813      	add	r0, sp, #76	; 0x4c
  defaultTaskHandle = osThreadCreate(osThread(stm32LiveCheck), NULL);

  osThreadDef(alarmOut, alarmOutTask, osPriorityNormal, 0, 64);
  defaultTaskHandle = osThreadCreate(osThread(alarmOut), NULL);

  osThreadDef(stm32Usart1, stm32Usart1Task, osPriorityNormal, 0, 128);
 8002c38:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(stm32Usart1), NULL);
 8002c3a:	f7fe fc76 	bl	800152a <osThreadCreate>
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of uartRxQueue */
  osMessageQDef(uartRxQueue, 128, uint32_t);
 8002c3e:	342c      	adds	r4, #44	; 0x2c
 8002c40:	ab07      	add	r3, sp, #28

  osThreadDef(alarmOut, alarmOutTask, osPriorityNormal, 0, 64);
  defaultTaskHandle = osThreadCreate(osThread(alarmOut), NULL);

  osThreadDef(stm32Usart1, stm32Usart1Task, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(stm32Usart1), NULL);
 8002c42:	f8c8 0000 	str.w	r0, [r8]
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of uartRxQueue */
  osMessageQDef(uartRxQueue, 128, uint32_t);
 8002c46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c4a:	e883 0003 	stmia.w	r3, {r0, r1}
  uartRxQueueHandle = osMessageCreate(osMessageQ(uartRxQueue), NULL);
 8002c4e:	4618      	mov	r0, r3
 8002c50:	4631      	mov	r1, r6
 8002c52:	f7fe fca2 	bl	800159a <osMessageCreate>
 8002c56:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <main+0x1dc>)
 8002c58:	6018      	str	r0, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8002c5a:	f7fe fc61 	bl	8001520 <osKernelStart>
 8002c5e:	e7fe      	b.n	8002c5e <main+0x1a6>
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40010800 	.word	0x40010800
 8002c68:	40010c00 	.word	0x40010c00
 8002c6c:	20001358 	.word	0x20001358
 8002c70:	40012400 	.word	0x40012400
 8002c74:	20001344 	.word	0x20001344
 8002c78:	40003000 	.word	0x40003000
 8002c7c:	20001388 	.word	0x20001388
 8002c80:	40013800 	.word	0x40013800
 8002c84:	200013cc 	.word	0x200013cc
 8002c88:	200013c8 	.word	0x200013c8
 8002c8c:	080040a8 	.word	0x080040a8
 8002c90:	20001354 	.word	0x20001354
 8002c94:	20001340 	.word	0x20001340
 8002c98:	2000133c 	.word	0x2000133c

08002c9c <uart_isrx>:
SHELL_INBUF_t* sInBuf = NULL;

uint8_t uart_isrx(void)
{
	// checks if a character is present in the RX buffer
	return (sInBuf->idx != sInBuf->odx);
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <uart_isrx+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f893 0080 	ldrb.w	r0, [r3, #128]	; 0x80
 8002ca4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
}
 8002ca8:	1ac0      	subs	r0, r0, r3
 8002caa:	bf18      	it	ne
 8002cac:	2001      	movne	r0, #1
 8002cae:	4770      	bx	lr
 8002cb0:	20001288 	.word	0x20001288

08002cb4 <usartPutc>:

void usartPutc(uint8_t ch)
{
 8002cb4:	b507      	push	{r0, r1, r2, lr}
 8002cb6:	a902      	add	r1, sp, #8
 8002cb8:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_UART_Transmit(&huart1, &ch, 1, 10);
 8002cbc:	230a      	movs	r3, #10
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4802      	ldr	r0, [pc, #8]	; (8002ccc <usartPutc+0x18>)
 8002cc2:	f7fe fadb 	bl	800127c <HAL_UART_Transmit>
}
 8002cc6:	b003      	add	sp, #12
 8002cc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ccc:	20001388 	.word	0x20001388

08002cd0 <putnstr>:
#define putnstr(str,n)	do {			\
		printf ("%.*s", (int)n, str);	\
	} while (0)
#else
static void putnstr(char* str, int len)
{
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	4606      	mov	r6, r0
	int str_len = strlen(str);
 8002cd6:	f7fd fa43 	bl	8000160 <strlen>
	if(str_len < len) {
 8002cda:	42a0      	cmp	r0, r4
		printf ("%.*s", (int)n, str);	\
	} while (0)
#else
static void putnstr(char* str, int len)
{
	int str_len = strlen(str);
 8002cdc:	4605      	mov	r5, r0
	if(str_len < len) {
 8002cde:	da07      	bge.n	8002cf0 <putnstr+0x20>
		int blank_len = len - str_len;
 8002ce0:	1a24      	subs	r4, r4, r0
		while(blank_len--) putc(' ');
 8002ce2:	f114 34ff 	adds.w	r4, r4, #4294967295
 8002ce6:	d304      	bcc.n	8002cf2 <putnstr+0x22>
 8002ce8:	2020      	movs	r0, #32
 8002cea:	f7ff ffe3 	bl	8002cb4 <usartPutc>
 8002cee:	e7f8      	b.n	8002ce2 <putnstr+0x12>
 8002cf0:	4625      	mov	r5, r4
 8002cf2:	4435      	add	r5, r6
	} else {
		str_len = len;
	}
	while(str_len--) putc(*str++);
 8002cf4:	42ae      	cmp	r6, r5
 8002cf6:	d004      	beq.n	8002d02 <putnstr+0x32>
 8002cf8:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002cfc:	f7ff ffda 	bl	8002cb4 <usartPutc>
 8002d00:	e7f8      	b.n	8002cf4 <putnstr+0x24>
}
 8002d02:	bd70      	pop	{r4, r5, r6, pc}

08002d04 <cread_add_char>:
	}					\
}

static void cread_add_char(char ichar, int insert, unsigned long *num,
	       unsigned long *eol_num, char *buf, unsigned long len)
{
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	9e06      	ldr	r6, [sp, #24]
 8002d08:	4615      	mov	r5, r2
 8002d0a:	4607      	mov	r7, r0
 8002d0c:	9a07      	ldr	r2, [sp, #28]
 8002d0e:	681c      	ldr	r4, [r3, #0]
	unsigned long wlen = 0;

	/* room ??? */
	if (insert || *num == *eol_num) {
 8002d10:	b911      	cbnz	r1, 8002d18 <cread_add_char+0x14>
 8002d12:	6828      	ldr	r0, [r5, #0]
 8002d14:	42a0      	cmp	r0, r4
 8002d16:	d125      	bne.n	8002d64 <cread_add_char+0x60>
		if (*eol_num > len - 1) {
 8002d18:	3a01      	subs	r2, #1
 8002d1a:	4294      	cmp	r4, r2
 8002d1c:	d904      	bls.n	8002d28 <cread_add_char+0x24>
		wlen = 1;
		buf[*num] = ichar;
		putnstr(buf + *num, wlen);
		(*num)++;
	}
}
 8002d1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	unsigned long wlen = 0;

	/* room ??? */
	if (insert || *num == *eol_num) {
		if (*eol_num > len - 1) {
			getcmd_cbeep();		//alert(beep)
 8002d22:	2007      	movs	r0, #7
 8002d24:	f7ff bfc6 	b.w	8002cb4 <usartPutc>
			return;
		}
		(*eol_num)++;
 8002d28:	3401      	adds	r4, #1
 8002d2a:	601c      	str	r4, [r3, #0]
	}

	if (insert) {
 8002d2c:	b1d1      	cbz	r1, 8002d64 <cread_add_char+0x60>
		wlen = *eol_num - *num;
 8002d2e:	6829      	ldr	r1, [r5, #0]
 8002d30:	1a64      	subs	r4, r4, r1
		if (wlen > 1) {
 8002d32:	2c01      	cmp	r4, #1
 8002d34:	d905      	bls.n	8002d42 <cread_add_char+0x3e>
			memmove(&buf[*num+1], &buf[*num], wlen-1);
 8002d36:	1c48      	adds	r0, r1, #1
 8002d38:	1e62      	subs	r2, r4, #1
 8002d3a:	4431      	add	r1, r6
 8002d3c:	4430      	add	r0, r6
 8002d3e:	f001 f828 	bl	8003d92 <memmove>
		}

		buf[*num] = ichar;
 8002d42:	682b      	ldr	r3, [r5, #0]
		putnstr(buf + *num, wlen);
 8002d44:	4621      	mov	r1, r4
		wlen = *eol_num - *num;
		if (wlen > 1) {
			memmove(&buf[*num+1], &buf[*num], wlen-1);
		}

		buf[*num] = ichar;
 8002d46:	54f7      	strb	r7, [r6, r3]
		putnstr(buf + *num, wlen);
 8002d48:	6828      	ldr	r0, [r5, #0]
 8002d4a:	4430      	add	r0, r6
 8002d4c:	f7ff ffc0 	bl	8002cd0 <putnstr>
		(*num)++;
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	3301      	adds	r3, #1
 8002d54:	602b      	str	r3, [r5, #0]
		while (--wlen) {
 8002d56:	3c01      	subs	r4, #1
 8002d58:	d003      	beq.n	8002d62 <cread_add_char+0x5e>
			getcmd_putch(CTL_BACKSPACE);
 8002d5a:	2008      	movs	r0, #8
 8002d5c:	f7ff ffaa 	bl	8002cb4 <usartPutc>
 8002d60:	e7f9      	b.n	8002d56 <cread_add_char+0x52>
 8002d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	} else {
		/* echo the character */
		wlen = 1;
		buf[*num] = ichar;
 8002d64:	682b      	ldr	r3, [r5, #0]
		putnstr(buf + *num, wlen);
 8002d66:	2101      	movs	r1, #1
			getcmd_putch(CTL_BACKSPACE);
		}
	} else {
		/* echo the character */
		wlen = 1;
		buf[*num] = ichar;
 8002d68:	54f7      	strb	r7, [r6, r3]
		putnstr(buf + *num, wlen);
 8002d6a:	6828      	ldr	r0, [r5, #0]
 8002d6c:	4430      	add	r0, r6
 8002d6e:	f7ff ffaf 	bl	8002cd0 <putnstr>
		(*num)++;
 8002d72:	682b      	ldr	r3, [r5, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	602b      	str	r3, [r5, #0]
 8002d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d7c <usartGetC>:
{
	HAL_UART_Transmit(&huart1, (uint8_t*)ch, strlen(ch), 10);
}

uint8_t usartGetC(void)
{
 8002d7c:	b510      	push	{r4, lr}
	uint8_t c;

	// wait until a character is present
	while (uart_isrx()==0)
 8002d7e:	f7ff ff8d 	bl	8002c9c <uart_isrx>
 8002d82:	b918      	cbnz	r0, 8002d8c <usartGetC+0x10>
	{
		osDelay(10);
 8002d84:	200a      	movs	r0, #10
 8002d86:	f7fe fbec 	bl	8001562 <osDelay>
		continue;
 8002d8a:	e7f8      	b.n	8002d7e <usartGetC+0x2>
	}

	// get a character from RX buffer
	c = sInBuf->msgBuf[sInBuf->odx++];
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <usartGetC+0x3c>)
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8002d94:	1c53      	adds	r3, r2, #1
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
	if(sInBuf->odx > MAX_SIZE_MESSAGE - 1 ){
 8002d9c:	061b      	lsls	r3, r3, #24
		osDelay(10);
		continue;
	}

	// get a character from RX buffer
	c = sInBuf->msgBuf[sInBuf->odx++];
 8002d9e:	5c84      	ldrb	r4, [r0, r2]
	if(sInBuf->odx > MAX_SIZE_MESSAGE - 1 ){
 8002da0:	d507      	bpl.n	8002db2 <usartGetC+0x36>
		sInBuf->odx = 0;
 8002da2:	2100      	movs	r1, #0
 8002da4:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
		sInBuf->idx = 0;
 8002da8:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
		memset(sInBuf->msgBuf, 0, MAX_SIZE_MESSAGE);
 8002dac:	2280      	movs	r2, #128	; 0x80
 8002dae:	f001 f80b 	bl	8003dc8 <memset>
	}
	return c;
}
 8002db2:	4620      	mov	r0, r4
 8002db4:	bd10      	pop	{r4, pc}
 8002db6:	bf00      	nop
 8002db8:	20001288 	.word	0x20001288

08002dbc <ctrlc>:
static int ctrlc_disabled = 0;  /* see disable_ctrl() */
static int ctrlc_was_pressed = 0;

int ctrlc(void)
{
	if (!ctrlc_disabled) {
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <ctrlc+0x24>)
/* test if ctrl-c was pressed */
static int ctrlc_disabled = 0;  /* see disable_ctrl() */
static int ctrlc_was_pressed = 0;

int ctrlc(void)
{
 8002dbe:	b510      	push	{r4, lr}
	if (!ctrlc_disabled) {
 8002dc0:	681c      	ldr	r4, [r3, #0]
 8002dc2:	b954      	cbnz	r4, 8002dda <ctrlc+0x1e>
		if (tstc()) {
 8002dc4:	f7ff ff6a 	bl	8002c9c <uart_isrx>
 8002dc8:	b140      	cbz	r0, 8002ddc <ctrlc+0x20>
			switch (getc()) {
 8002dca:	f7ff ffd7 	bl	8002d7c <usartGetC>
 8002dce:	2803      	cmp	r0, #3
 8002dd0:	d104      	bne.n	8002ddc <ctrlc+0x20>
				case 0x03:      /* ^C - Control C */
					ctrlc_was_pressed = 1;
 8002dd2:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <ctrlc+0x28>)
 8002dd4:	2401      	movs	r4, #1
 8002dd6:	601c      	str	r4, [r3, #0]
					return 1;
 8002dd8:	e000      	b.n	8002ddc <ctrlc+0x20>
				default:
					break;
			}
		}
	}
	return 0;
 8002dda:	2400      	movs	r4, #0
}
 8002ddc:	4620      	mov	r0, r4
 8002dde:	bd10      	pop	{r4, pc}
 8002de0:	20001284 	.word	0x20001284
 8002de4:	20001278 	.word	0x20001278

08002de8 <readline_into_buffer>:
 *		-1 if break
 *		-2 if timed out
 */

int readline_into_buffer (const char *const prompt, char * buffer)
{
 8002de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * writable until after relocation to RAM.
	 * Revert to non-history version if still
	 * running from flash.
	 */
	if (1) {
		if (!initted) {
 8002dec:	4ba7      	ldr	r3, [pc, #668]	; (800308c <readline_into_buffer+0x2a4>)
 *		-1 if break
 *		-2 if timed out
 */

int readline_into_buffer (const char *const prompt, char * buffer)
{
 8002dee:	b087      	sub	sp, #28
	 * writable until after relocation to RAM.
	 * Revert to non-history version if still
	 * running from flash.
	 */
	if (1) {
		if (!initted) {
 8002df0:	681c      	ldr	r4, [r3, #0]
 *		-1 if break
 *		-2 if timed out
 */

int readline_into_buffer (const char *const prompt, char * buffer)
{
 8002df2:	4607      	mov	r7, r0
 8002df4:	460d      	mov	r5, r1
 8002df6:	461e      	mov	r6, r3
	 * writable until after relocation to RAM.
	 * Revert to non-history version if still
	 * running from flash.
	 */
	if (1) {
		if (!initted) {
 8002df8:	b9f4      	cbnz	r4, 8002e38 <readline_into_buffer+0x50>
			putc('\r');
 8002dfa:	200d      	movs	r0, #13
 8002dfc:	f7ff ff5a 	bl	8002cb4 <usartPutc>
			putc('\n');
 8002e00:	200a      	movs	r0, #10
 8002e02:	f7ff ff57 	bl	8002cb4 <usartPutc>

static void hist_init(void)
{
	int i;

	hist_max = 0;
 8002e06:	4ba2      	ldr	r3, [pc, #648]	; (8003090 <readline_into_buffer+0x2a8>)
	hist_add_idx = 0;
	hist_cur = -1;
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295

static void hist_init(void)
{
	int i;

	hist_max = 0;
 8002e0c:	601c      	str	r4, [r3, #0]
	hist_add_idx = 0;
 8002e0e:	4ba1      	ldr	r3, [pc, #644]	; (8003094 <readline_into_buffer+0x2ac>)
	hist_cur = -1;
	hist_num = 0;

	for (i = 0; i < HIST_MAX; i++) {
 8002e10:	f240 5014 	movw	r0, #1300	; 0x514
static void hist_init(void)
{
	int i;

	hist_max = 0;
	hist_add_idx = 0;
 8002e14:	601c      	str	r4, [r3, #0]
	hist_cur = -1;
 8002e16:	4ba0      	ldr	r3, [pc, #640]	; (8003098 <readline_into_buffer+0x2b0>)
 8002e18:	49a0      	ldr	r1, [pc, #640]	; (800309c <readline_into_buffer+0x2b4>)
 8002e1a:	601a      	str	r2, [r3, #0]
	hist_num = 0;
 8002e1c:	4ba0      	ldr	r3, [pc, #640]	; (80030a0 <readline_into_buffer+0x2b8>)

	for (i = 0; i < HIST_MAX; i++) {
		hist_list[i] = hist_lines[i];
 8002e1e:	4aa1      	ldr	r2, [pc, #644]	; (80030a4 <readline_into_buffer+0x2bc>)
	int i;

	hist_max = 0;
	hist_add_idx = 0;
	hist_cur = -1;
	hist_num = 0;
 8002e20:	601c      	str	r4, [r3, #0]
 8002e22:	4623      	mov	r3, r4

	for (i = 0; i < HIST_MAX; i++) {
		hist_list[i] = hist_lines[i];
 8002e24:	eb03 0e02 	add.w	lr, r3, r2
		hist_list[i][0] = '\0';
 8002e28:	549c      	strb	r4, [r3, r2]
 8002e2a:	3341      	adds	r3, #65	; 0x41
	hist_max = 0;
	hist_add_idx = 0;
	hist_cur = -1;
	hist_num = 0;

	for (i = 0; i < HIST_MAX; i++) {
 8002e2c:	4283      	cmp	r3, r0
		hist_list[i] = hist_lines[i];
 8002e2e:	f841 ef04 	str.w	lr, [r1, #4]!
	hist_max = 0;
	hist_add_idx = 0;
	hist_cur = -1;
	hist_num = 0;

	for (i = 0; i < HIST_MAX; i++) {
 8002e32:	d1f7      	bne.n	8002e24 <readline_into_buffer+0x3c>
	if (1) {
		if (!initted) {
			putc('\r');
			putc('\n');
			hist_init();
			initted = 1;
 8002e34:	2301      	movs	r3, #1
 8002e36:	6033      	str	r3, [r6, #0]
		}
		puts(prompt);
 8002e38:	4638      	mov	r0, r7
 8002e3a:	f000 fd17 	bl	800386c <iprintf>
	}
}

static int cread_line(const char *const prompt, char *buf, unsigned int *len)
{
	unsigned long num = 0;
 8002e3e:	2300      	movs	r3, #0
	unsigned long wlen;
	char ichar;
	int insert = 1;
	int esc_len = 0;
	char esc_save[8];
	int init_len = strlen(buf);
 8002e40:	4628      	mov	r0, r5
	}
}

static int cread_line(const char *const prompt, char *buf, unsigned int *len)
{
	unsigned long num = 0;
 8002e42:	9302      	str	r3, [sp, #8]
	unsigned long eol_num = 0;
 8002e44:	9303      	str	r3, [sp, #12]
	unsigned long wlen;
	char ichar;
	int insert = 1;
	int esc_len = 0;
	char esc_save[8];
	int init_len = strlen(buf);
 8002e46:	f7fd f98b 	bl	8000160 <strlen>

	if (init_len)
 8002e4a:	b118      	cbz	r0, 8002e54 <readline_into_buffer+0x6c>
 8002e4c:	182c      	adds	r4, r5, r0
 8002e4e:	462e      	mov	r6, r5

static void cread_add_str(char *str, int strsize, int insert, unsigned long *num,
	      unsigned long *eol_num, char *buf, unsigned long len)
{
	while (strsize--) {
		cread_add_char(*str, insert, num, eol_num, buf, len);
 8002e50:	2740      	movs	r7, #64	; 0x40
 8002e52:	e006      	b.n	8002e62 <readline_into_buffer+0x7a>

static char* hist_next(void)
{
	char *ret;

	if (hist_cur < 0)
 8002e54:	4e90      	ldr	r6, [pc, #576]	; (8003098 <readline_into_buffer+0x2b0>)
		case CTL_CH('p'):
		case CTL_CH('n'):
		{
			char * hline;

			esc_len = 0;
 8002e56:	2400      	movs	r4, #0
 8002e58:	2701      	movs	r7, #1
 8002e5a:	46b0      	mov	r8, r6
	char *ret;

	if (hist_cur < 0)
		return NULL;

	if (hist_cur == hist_add_idx)
 8002e5c:	f8df 9234 	ldr.w	r9, [pc, #564]	; 8003094 <readline_into_buffer+0x2ac>
 8002e60:	e01e      	b.n	8002ea0 <readline_into_buffer+0xb8>
}

static void cread_add_str(char *str, int strsize, int insert, unsigned long *num,
	      unsigned long *eol_num, char *buf, unsigned long len)
{
	while (strsize--) {
 8002e62:	42a6      	cmp	r6, r4
 8002e64:	d0f6      	beq.n	8002e54 <readline_into_buffer+0x6c>
		cread_add_char(*str, insert, num, eol_num, buf, len);
 8002e66:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002e6a:	ab03      	add	r3, sp, #12
 8002e6c:	e88d 00a0 	stmia.w	sp, {r5, r7}
 8002e70:	aa02      	add	r2, sp, #8
 8002e72:	2101      	movs	r1, #1
 8002e74:	f7ff ff46 	bl	8002d04 <cread_add_char>
 8002e78:	e7f3      	b.n	8002e62 <readline_into_buffer+0x7a>
	if (init_len)
		cread_add_str(buf, init_len, 1, &num, &eol_num, buf, *len);

	while (1) {
		ichar = getcmd_getch();
		if ((ichar == '\n') || (ichar == '\r')) {
 8002e7a:	280d      	cmp	r0, #13
 8002e7c:	d014      	beq.n	8002ea8 <readline_into_buffer+0xc0>
		}

		/*
		 * handle standard linux xterm esc sequences for arrow key, etc.
		 */
		if (esc_len != 0) {
 8002e7e:	2c00      	cmp	r4, #0
 8002e80:	d046      	beq.n	8002f10 <readline_into_buffer+0x128>
			if (esc_len == 1) {
 8002e82:	2c01      	cmp	r4, #1
 8002e84:	d120      	bne.n	8002ec8 <readline_into_buffer+0xe0>
				if (ichar == '[') {
 8002e86:	285b      	cmp	r0, #91	; 0x5b
 8002e88:	d01a      	beq.n	8002ec0 <readline_into_buffer+0xd8>

static void cread_add_str(char *str, int strsize, int insert, unsigned long *num,
	      unsigned long *eol_num, char *buf, unsigned long len)
{
	while (strsize--) {
		cread_add_char(*str, insert, num, eol_num, buf, len);
 8002e8a:	2340      	movs	r3, #64	; 0x40
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002e92:	9500      	str	r5, [sp, #0]
 8002e94:	ab03      	add	r3, sp, #12
 8002e96:	aa02      	add	r2, sp, #8
 8002e98:	4639      	mov	r1, r7
 8002e9a:	f7ff ff33 	bl	8002d04 <cread_add_char>
		case CTL_CH('p'):
		case CTL_CH('n'):
		{
			char * hline;

			esc_len = 0;
 8002e9e:	2400      	movs	r4, #0

	if (init_len)
		cread_add_str(buf, init_len, 1, &num, &eol_num, buf, *len);

	while (1) {
		ichar = getcmd_getch();
 8002ea0:	f7ff ff6c 	bl	8002d7c <usartGetC>
		if ((ichar == '\n') || (ichar == '\r')) {
 8002ea4:	280a      	cmp	r0, #10
 8002ea6:	d1e8      	bne.n	8002e7a <readline_into_buffer+0x92>
			puts("\r\n");
 8002ea8:	487f      	ldr	r0, [pc, #508]	; (80030a8 <readline_into_buffer+0x2c0>)
 8002eaa:	f000 fd03 	bl	80038b4 <puts>
			cread_add_char(ichar, insert, &num, &eol_num, buf, *len);
			break;
		}
		osDelay(10);
	}
	*len = eol_num;
 8002eae:	9e03      	ldr	r6, [sp, #12]
	buf[eol_num] = '\0';	/* lose the newline */
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	55ab      	strb	r3, [r5, r6]

	if (buf[0] && buf[0] != CREAD_HIST_CHAR)
 8002eb4:	782b      	ldrb	r3, [r5, #0]
 8002eb6:	4f77      	ldr	r7, [pc, #476]	; (8003094 <readline_into_buffer+0x2ac>)
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f040 818f 	bne.w	80031dc <readline_into_buffer+0x3f4>
 8002ebe:	e1a4      	b.n	800320a <readline_into_buffer+0x422>
		 * handle standard linux xterm esc sequences for arrow key, etc.
		 */
		if (esc_len != 0) {
			if (esc_len == 1) {
				if (ichar == '[') {
					esc_save[esc_len] = ichar;
 8002ec0:	f88d 0011 	strb.w	r0, [sp, #17]
					esc_len = 2;
 8002ec4:	2402      	movs	r4, #2
 8002ec6:	e7eb      	b.n	8002ea0 <readline_into_buffer+0xb8>
					esc_len = 0;
				}
				continue;
			}

			switch (ichar) {
 8002ec8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8002ecc:	2b07      	cmp	r3, #7
 8002ece:	d809      	bhi.n	8002ee4 <readline_into_buffer+0xfc>
 8002ed0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002ed4:	01290111 	.word	0x01290111
 8002ed8:	0068005d 	.word	0x0068005d
 8002edc:	00080008 	.word	0x00080008
 8002ee0:	004e0008 	.word	0x004e0008
			case 'B':	/* down arrow */
				ichar = CTL_CH('n');
				esc_len = 0;
				break;	/* pass off to ^N handler */
			default:
				esc_save[esc_len++] = ichar;
 8002ee4:	ab06      	add	r3, sp, #24
 8002ee6:	4423      	add	r3, r4
 8002ee8:	f803 0c08 	strb.w	r0, [r3, #-8]
 8002eec:	ab04      	add	r3, sp, #16
 8002eee:	469a      	mov	sl, r3
 8002ef0:	3401      	adds	r4, #1
 8002ef2:	441c      	add	r4, r3

static void cread_add_str(char *str, int strsize, int insert, unsigned long *num,
	      unsigned long *eol_num, char *buf, unsigned long len)
{
	while (strsize--) {
		cread_add_char(*str, insert, num, eol_num, buf, len);
 8002ef4:	f04f 0b40 	mov.w	fp, #64	; 0x40
}

static void cread_add_str(char *str, int strsize, int insert, unsigned long *num,
	      unsigned long *eol_num, char *buf, unsigned long len)
{
	while (strsize--) {
 8002ef8:	4554      	cmp	r4, sl
 8002efa:	d0d0      	beq.n	8002e9e <readline_into_buffer+0xb6>
		cread_add_char(*str, insert, num, eol_num, buf, len);
 8002efc:	f81a 0b01 	ldrb.w	r0, [sl], #1
 8002f00:	ab03      	add	r3, sp, #12
 8002f02:	e88d 0820 	stmia.w	sp, {r5, fp}
 8002f06:	aa02      	add	r2, sp, #8
 8002f08:	4639      	mov	r1, r7
 8002f0a:	f7ff fefb 	bl	8002d04 <cread_add_char>
 8002f0e:	e7f3      	b.n	8002ef8 <readline_into_buffer+0x110>
				esc_len = 0;
				continue;
			}
		}

		switch (ichar) {
 8002f10:	280b      	cmp	r0, #11
 8002f12:	d070      	beq.n	8002ff6 <readline_into_buffer+0x20e>
 8002f14:	d80e      	bhi.n	8002f34 <readline_into_buffer+0x14c>
 8002f16:	2804      	cmp	r0, #4
 8002f18:	d04f      	beq.n	8002fba <readline_into_buffer+0x1d2>
 8002f1a:	d806      	bhi.n	8002f2a <readline_into_buffer+0x142>
 8002f1c:	2802      	cmp	r0, #2
 8002f1e:	d041      	beq.n	8002fa4 <readline_into_buffer+0x1bc>
 8002f20:	d831      	bhi.n	8002f86 <readline_into_buffer+0x19e>
 8002f22:	2801      	cmp	r0, #1
 8002f24:	f040 814c 	bne.w	80031c0 <readline_into_buffer+0x3d8>
 8002f28:	e022      	b.n	8002f70 <readline_into_buffer+0x188>
 8002f2a:	2806      	cmp	r0, #6
 8002f2c:	d02f      	beq.n	8002f8e <readline_into_buffer+0x1a6>
 8002f2e:	d37b      	bcc.n	8003028 <readline_into_buffer+0x240>
 8002f30:	2808      	cmp	r0, #8
 8002f32:	e016      	b.n	8002f62 <readline_into_buffer+0x17a>
 8002f34:	2815      	cmp	r0, #21
 8002f36:	f000 8086 	beq.w	8003046 <readline_into_buffer+0x25e>
 8002f3a:	d808      	bhi.n	8002f4e <readline_into_buffer+0x166>
 8002f3c:	280f      	cmp	r0, #15
 8002f3e:	d07f      	beq.n	8003040 <readline_into_buffer+0x258>
 8002f40:	2810      	cmp	r0, #16
 8002f42:	f000 80d8 	beq.w	80030f6 <readline_into_buffer+0x30e>
 8002f46:	280e      	cmp	r0, #14
 8002f48:	f040 813a 	bne.w	80031c0 <readline_into_buffer+0x3d8>
 8002f4c:	e0eb      	b.n	8003126 <readline_into_buffer+0x33e>
 8002f4e:	281b      	cmp	r0, #27
 8002f50:	d00a      	beq.n	8002f68 <readline_into_buffer+0x180>
 8002f52:	d802      	bhi.n	8002f5a <readline_into_buffer+0x172>
 8002f54:	2818      	cmp	r0, #24
 8002f56:	d076      	beq.n	8003046 <readline_into_buffer+0x25e>
 8002f58:	e132      	b.n	80031c0 <readline_into_buffer+0x3d8>
 8002f5a:	287f      	cmp	r0, #127	; 0x7f
 8002f5c:	f000 80a6 	beq.w	80030ac <readline_into_buffer+0x2c4>
 8002f60:	28ff      	cmp	r0, #255	; 0xff
 8002f62:	f000 80a3 	beq.w	80030ac <readline_into_buffer+0x2c4>
 8002f66:	e12b      	b.n	80031c0 <readline_into_buffer+0x3d8>
		case 0x1b:				//escape
			if (esc_len == 0) {
				esc_save[esc_len] = ichar;
 8002f68:	f88d 0010 	strb.w	r0, [sp, #16]
				esc_len = 1;
 8002f6c:	2401      	movs	r4, #1
 8002f6e:	e131      	b.n	80031d4 <readline_into_buffer+0x3ec>
				puts("impossible condition #876\n");
				esc_len = 0;
			}
			break;
		case CTL_CH('a'):
			BEGINNING_OF_LINE();
 8002f70:	9c02      	ldr	r4, [sp, #8]
 8002f72:	2c00      	cmp	r4, #0
 8002f74:	f000 812e 	beq.w	80031d4 <readline_into_buffer+0x3ec>
 8002f78:	2008      	movs	r0, #8
 8002f7a:	f7ff fe9b 	bl	8002cb4 <usartPutc>
 8002f7e:	9b02      	ldr	r3, [sp, #8]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	9302      	str	r3, [sp, #8]
 8002f84:	e7f4      	b.n	8002f70 <readline_into_buffer+0x188>
			break;
		case CTL_CH('c'):	/* ^C - break */
			*buf = '\0';	/* discard input */
 8002f86:	702c      	strb	r4, [r5, #0]
			return (-1);
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8c:	e146      	b.n	800321c <readline_into_buffer+0x434>
		case CTL_CH('f'):
			if (num < eol_num) {
 8002f8e:	9b02      	ldr	r3, [sp, #8]
 8002f90:	9a03      	ldr	r2, [sp, #12]
 8002f92:	4293      	cmp	r3, r2
 8002f94:	f080 811d 	bcs.w	80031d2 <readline_into_buffer+0x3ea>
				getcmd_putch(buf[num]);
 8002f98:	5ce8      	ldrb	r0, [r5, r3]
 8002f9a:	f7ff fe8b 	bl	8002cb4 <usartPutc>
				num++;
 8002f9e:	9b02      	ldr	r3, [sp, #8]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	e008      	b.n	8002fb6 <readline_into_buffer+0x1ce>
			}
			break;
		case CTL_CH('b'):
			if (num) {
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	2c00      	cmp	r4, #0
 8002fa8:	f000 8114 	beq.w	80031d4 <readline_into_buffer+0x3ec>
				getcmd_putch(CTL_BACKSPACE);
 8002fac:	2008      	movs	r0, #8
 8002fae:	f7ff fe81 	bl	8002cb4 <usartPutc>
				num--;
 8002fb2:	9b02      	ldr	r3, [sp, #8]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	9302      	str	r3, [sp, #8]
 8002fb8:	e10b      	b.n	80031d2 <readline_into_buffer+0x3ea>
			}
			break;
		case CTL_CH('d'):
			if (num < eol_num) {
 8002fba:	9902      	ldr	r1, [sp, #8]
 8002fbc:	9b03      	ldr	r3, [sp, #12]
 8002fbe:	4299      	cmp	r1, r3
 8002fc0:	f080 8108 	bcs.w	80031d4 <readline_into_buffer+0x3ec>
				wlen = eol_num - num - 1;
 8002fc4:	f103 3aff 	add.w	sl, r3, #4294967295
				if (wlen) {
 8002fc8:	ebba 0a01 	subs.w	sl, sl, r1
 8002fcc:	d009      	beq.n	8002fe2 <readline_into_buffer+0x1fa>
					memmove(&buf[num], &buf[num+1], wlen);
 8002fce:	186b      	adds	r3, r5, r1
 8002fd0:	3101      	adds	r1, #1
 8002fd2:	4429      	add	r1, r5
 8002fd4:	4652      	mov	r2, sl
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fedb 	bl	8003d92 <memmove>
					putnstr(buf + num, wlen);
 8002fdc:	4651      	mov	r1, sl
 8002fde:	f7ff fe77 	bl	8002cd0 <putnstr>
				}

				getcmd_putch(' ');
 8002fe2:	2020      	movs	r0, #32
 8002fe4:	f7ff fe66 	bl	8002cb4 <usartPutc>
				do {
					getcmd_putch(CTL_BACKSPACE);
 8002fe8:	2008      	movs	r0, #8
 8002fea:	f7ff fe63 	bl	8002cb4 <usartPutc>
				} while (wlen--);
 8002fee:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8002ff2:	d2f9      	bcs.n	8002fe8 <readline_into_buffer+0x200>
 8002ff4:	e07b      	b.n	80030ee <readline_into_buffer+0x306>
				eol_num--;
			}
			break;
		case CTL_CH('k'):
			ERASE_TO_EOL();
 8002ff6:	9b02      	ldr	r3, [sp, #8]
 8002ff8:	9a03      	ldr	r2, [sp, #12]
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	f080 80ea 	bcs.w	80031d4 <readline_into_buffer+0x3ec>
 8003000:	469a      	mov	sl, r3
 8003002:	9b03      	ldr	r3, [sp, #12]
 8003004:	459a      	cmp	sl, r3
 8003006:	d205      	bcs.n	8003014 <readline_into_buffer+0x22c>
 8003008:	2020      	movs	r0, #32
 800300a:	f7ff fe53 	bl	8002cb4 <usartPutc>
 800300e:	f10a 0a01 	add.w	sl, sl, #1
 8003012:	e7f6      	b.n	8003002 <readline_into_buffer+0x21a>
 8003014:	9b02      	ldr	r3, [sp, #8]
 8003016:	f10a 3bff 	add.w	fp, sl, #4294967295
 800301a:	4553      	cmp	r3, sl
 800301c:	d269      	bcs.n	80030f2 <readline_into_buffer+0x30a>
 800301e:	2008      	movs	r0, #8
 8003020:	f7ff fe48 	bl	8002cb4 <usartPutc>
 8003024:	46da      	mov	sl, fp
 8003026:	e7f5      	b.n	8003014 <readline_into_buffer+0x22c>
			break;
		case CTL_CH('e'):
			REFRESH_TO_EOL();
 8003028:	9802      	ldr	r0, [sp, #8]
 800302a:	9903      	ldr	r1, [sp, #12]
 800302c:	4288      	cmp	r0, r1
 800302e:	f080 80d1 	bcs.w	80031d4 <readline_into_buffer+0x3ec>
 8003032:	1a09      	subs	r1, r1, r0
 8003034:	4428      	add	r0, r5
 8003036:	f7ff fe4b 	bl	8002cd0 <putnstr>
 800303a:	9b03      	ldr	r3, [sp, #12]
 800303c:	9302      	str	r3, [sp, #8]
 800303e:	e0c9      	b.n	80031d4 <readline_into_buffer+0x3ec>
 8003040:	f087 0701 	eor.w	r7, r7, #1
 8003044:	e0c6      	b.n	80031d4 <readline_into_buffer+0x3ec>
		case CTL_CH('o'):
			insert = !insert;
			break;
		case CTL_CH('x'):
		case CTL_CH('u'):
			BEGINNING_OF_LINE();
 8003046:	9b02      	ldr	r3, [sp, #8]
 8003048:	b133      	cbz	r3, 8003058 <readline_into_buffer+0x270>
 800304a:	2008      	movs	r0, #8
 800304c:	f7ff fe32 	bl	8002cb4 <usartPutc>
 8003050:	9b02      	ldr	r3, [sp, #8]
 8003052:	3b01      	subs	r3, #1
 8003054:	9302      	str	r3, [sp, #8]
 8003056:	e7f6      	b.n	8003046 <readline_into_buffer+0x25e>
			ERASE_TO_EOL();
 8003058:	9a03      	ldr	r2, [sp, #12]
 800305a:	2a00      	cmp	r2, #0
 800305c:	f000 80ba 	beq.w	80031d4 <readline_into_buffer+0x3ec>
 8003060:	469a      	mov	sl, r3
 8003062:	9b03      	ldr	r3, [sp, #12]
 8003064:	459a      	cmp	sl, r3
 8003066:	d205      	bcs.n	8003074 <readline_into_buffer+0x28c>
 8003068:	2020      	movs	r0, #32
 800306a:	f7ff fe23 	bl	8002cb4 <usartPutc>
 800306e:	f10a 0a01 	add.w	sl, sl, #1
 8003072:	e7f6      	b.n	8003062 <readline_into_buffer+0x27a>
 8003074:	9a02      	ldr	r2, [sp, #8]
 8003076:	4592      	cmp	sl, r2
 8003078:	f10a 3aff 	add.w	sl, sl, #4294967295
 800307c:	d903      	bls.n	8003086 <readline_into_buffer+0x29e>
 800307e:	2008      	movs	r0, #8
 8003080:	f7ff fe18 	bl	8002cb4 <usartPutc>
 8003084:	e7f6      	b.n	8003074 <readline_into_buffer+0x28c>
 8003086:	9203      	str	r2, [sp, #12]
 8003088:	e0a4      	b.n	80031d4 <readline_into_buffer+0x3ec>
 800308a:	bf00      	nop
 800308c:	200012cc 	.word	0x200012cc
 8003090:	2000127c 	.word	0x2000127c
 8003094:	20001280 	.word	0x20001280
 8003098:	20000008 	.word	0x20000008
 800309c:	20001410 	.word	0x20001410
 80030a0:	200012d0 	.word	0x200012d0
 80030a4:	20001464 	.word	0x20001464
 80030a8:	08004260 	.word	0x08004260
			break;
		case DEL:
		case DEL7:
		case 8:
			if (num) {
 80030ac:	9902      	ldr	r1, [sp, #8]
 80030ae:	2900      	cmp	r1, #0
 80030b0:	f000 8090 	beq.w	80031d4 <readline_into_buffer+0x3ec>
				wlen = eol_num - num;
 80030b4:	9b03      	ldr	r3, [sp, #12]
				num--;
 80030b6:	1e48      	subs	r0, r1, #1
			break;
		case DEL:
		case DEL7:
		case 8:
			if (num) {
				wlen = eol_num - num;
 80030b8:	ebc1 0a03 	rsb	sl, r1, r3
				num--;
				memmove(&buf[num], &buf[num+1], wlen);
 80030bc:	4652      	mov	r2, sl
 80030be:	4429      	add	r1, r5
		case DEL:
		case DEL7:
		case 8:
			if (num) {
				wlen = eol_num - num;
				num--;
 80030c0:	9002      	str	r0, [sp, #8]
				memmove(&buf[num], &buf[num+1], wlen);
 80030c2:	4428      	add	r0, r5
 80030c4:	f000 fe65 	bl	8003d92 <memmove>
				getcmd_putch(CTL_BACKSPACE);
 80030c8:	2008      	movs	r0, #8
 80030ca:	f7ff fdf3 	bl	8002cb4 <usartPutc>
				putnstr(buf + num, wlen);
 80030ce:	9802      	ldr	r0, [sp, #8]
 80030d0:	4651      	mov	r1, sl
 80030d2:	4428      	add	r0, r5
 80030d4:	f7ff fdfc 	bl	8002cd0 <putnstr>
				getcmd_putch(' ');
 80030d8:	2020      	movs	r0, #32
 80030da:	f7ff fdeb 	bl	8002cb4 <usartPutc>
				do {
					getcmd_putch(CTL_BACKSPACE);
 80030de:	2008      	movs	r0, #8
 80030e0:	f7ff fde8 	bl	8002cb4 <usartPutc>
 80030e4:	4653      	mov	r3, sl
 80030e6:	f10a 3aff 	add.w	sl, sl, #4294967295
				} while (wlen--);
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f7      	bne.n	80030de <readline_into_buffer+0x2f6>
				eol_num--;
 80030ee:	9b03      	ldr	r3, [sp, #12]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	9303      	str	r3, [sp, #12]
 80030f4:	e06e      	b.n	80031d4 <readline_into_buffer+0x3ec>
static char* hist_prev(void)
{
	char *ret;
	int old_cur;

	if (hist_cur < 0)
 80030f6:	6833      	ldr	r3, [r6, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f2c0 808b 	blt.w	8003214 <readline_into_buffer+0x42c>
		return NULL;

	old_cur = hist_cur;
	if (--hist_cur < 0)
 80030fe:	1e5a      	subs	r2, r3, #1
 8003100:	6032      	str	r2, [r6, #0]
 8003102:	3201      	adds	r2, #1
		hist_cur = hist_max;
 8003104:	bf08      	it	eq
 8003106:	4a47      	ldreq	r2, [pc, #284]	; (8003224 <readline_into_buffer+0x43c>)

	if (hist_cur == hist_add_idx) {
 8003108:	f8d9 1000 	ldr.w	r1, [r9]
	if (hist_cur < 0)
		return NULL;

	old_cur = hist_cur;
	if (--hist_cur < 0)
		hist_cur = hist_max;
 800310c:	bf04      	itt	eq
 800310e:	6812      	ldreq	r2, [r2, #0]
 8003110:	6032      	streq	r2, [r6, #0]

	if (hist_cur == hist_add_idx) {
 8003112:	f8d8 2000 	ldr.w	r2, [r8]
 8003116:	428a      	cmp	r2, r1
 8003118:	d101      	bne.n	800311e <readline_into_buffer+0x336>
		hist_cur = old_cur;
 800311a:	6033      	str	r3, [r6, #0]
 800311c:	e07a      	b.n	8003214 <readline_into_buffer+0x42c>
		ret = NULL;
	} else
		ret = hist_list[hist_cur];
 800311e:	4b42      	ldr	r3, [pc, #264]	; (8003228 <readline_into_buffer+0x440>)
 8003120:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8003124:	e015      	b.n	8003152 <readline_into_buffer+0x36a>

static char* hist_next(void)
{
	char *ret;

	if (hist_cur < 0)
 8003126:	6833      	ldr	r3, [r6, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	db73      	blt.n	8003214 <readline_into_buffer+0x42c>
		return NULL;

	if (hist_cur == hist_add_idx)
 800312c:	f8d9 2000 	ldr.w	r2, [r9]
 8003130:	4293      	cmp	r3, r2
 8003132:	d06f      	beq.n	8003214 <readline_into_buffer+0x42c>
		return NULL;

	if (++hist_cur > hist_max)
 8003134:	493b      	ldr	r1, [pc, #236]	; (8003224 <readline_into_buffer+0x43c>)
 8003136:	3301      	adds	r3, #1
 8003138:	6809      	ldr	r1, [r1, #0]
 800313a:	6033      	str	r3, [r6, #0]
 800313c:	428b      	cmp	r3, r1
		hist_cur = 0;
 800313e:	bfc4      	itt	gt
 8003140:	2300      	movgt	r3, #0
 8003142:	6033      	strgt	r3, [r6, #0]

	if (hist_cur == hist_add_idx) {
 8003144:	f8d8 3000 	ldr.w	r3, [r8]
 8003148:	429a      	cmp	r2, r3
 800314a:	d006      	beq.n	800315a <readline_into_buffer+0x372>
		ret = "";
	} else
		ret = hist_list[hist_cur];
 800314c:	4a36      	ldr	r2, [pc, #216]	; (8003228 <readline_into_buffer+0x440>)
 800314e:	f852 a023 	ldr.w	sl, [r2, r3, lsl #2]
			if (ichar == CTL_CH('p'))
				hline = hist_prev();
			else
				hline = hist_next();

			if (!hline) {
 8003152:	f1ba 0f00 	cmp.w	sl, #0
 8003156:	d102      	bne.n	800315e <readline_into_buffer+0x376>
 8003158:	e05c      	b.n	8003214 <readline_into_buffer+0x42c>

	if (++hist_cur > hist_max)
		hist_cur = 0;

	if (hist_cur == hist_add_idx) {
		ret = "";
 800315a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003234 <readline_into_buffer+0x44c>
				continue;
			}

			/* nuke the current line */
			/* first, go home */
			BEGINNING_OF_LINE();
 800315e:	9c02      	ldr	r4, [sp, #8]
 8003160:	b134      	cbz	r4, 8003170 <readline_into_buffer+0x388>
 8003162:	2008      	movs	r0, #8
 8003164:	f7ff fda6 	bl	8002cb4 <usartPutc>
 8003168:	9b02      	ldr	r3, [sp, #8]
 800316a:	3b01      	subs	r3, #1
 800316c:	9302      	str	r3, [sp, #8]
 800316e:	e7f6      	b.n	800315e <readline_into_buffer+0x376>

			/* erase to end of line */
			ERASE_TO_EOL();
 8003170:	9b03      	ldr	r3, [sp, #12]
 8003172:	b193      	cbz	r3, 800319a <readline_into_buffer+0x3b2>
 8003174:	9b03      	ldr	r3, [sp, #12]
 8003176:	429c      	cmp	r4, r3
 8003178:	d204      	bcs.n	8003184 <readline_into_buffer+0x39c>
 800317a:	2020      	movs	r0, #32
 800317c:	f7ff fd9a 	bl	8002cb4 <usartPutc>
 8003180:	3401      	adds	r4, #1
 8003182:	e7f7      	b.n	8003174 <readline_into_buffer+0x38c>
 8003184:	9b02      	ldr	r3, [sp, #8]
 8003186:	f104 3bff 	add.w	fp, r4, #4294967295
 800318a:	42a3      	cmp	r3, r4
 800318c:	d204      	bcs.n	8003198 <readline_into_buffer+0x3b0>
 800318e:	2008      	movs	r0, #8
 8003190:	f7ff fd90 	bl	8002cb4 <usartPutc>
 8003194:	465c      	mov	r4, fp
 8003196:	e7f5      	b.n	8003184 <readline_into_buffer+0x39c>
 8003198:	9303      	str	r3, [sp, #12]

			/* copy new line into place and display */
			strcpy(buf, hline);
 800319a:	4651      	mov	r1, sl
 800319c:	4628      	mov	r0, r5
 800319e:	f000 fe3b 	bl	8003e18 <strcpy>
			eol_num = strlen(buf);
 80031a2:	4628      	mov	r0, r5
 80031a4:	f7fc ffdc 	bl	8000160 <strlen>
			REFRESH_TO_EOL();
 80031a8:	9b02      	ldr	r3, [sp, #8]
			/* erase to end of line */
			ERASE_TO_EOL();

			/* copy new line into place and display */
			strcpy(buf, hline);
			eol_num = strlen(buf);
 80031aa:	9003      	str	r0, [sp, #12]
			REFRESH_TO_EOL();
 80031ac:	4298      	cmp	r0, r3
 80031ae:	f67f ae76 	bls.w	8002e9e <readline_into_buffer+0xb6>
 80031b2:	1ac1      	subs	r1, r0, r3
 80031b4:	18e8      	adds	r0, r5, r3
 80031b6:	f7ff fd8b 	bl	8002cd0 <putnstr>
 80031ba:	9b03      	ldr	r3, [sp, #12]
 80031bc:	9302      	str	r3, [sp, #8]
 80031be:	e66e      	b.n	8002e9e <readline_into_buffer+0xb6>
			}
			break;
		}
#endif
		default:
			cread_add_char(ichar, insert, &num, &eol_num, buf, *len);
 80031c0:	2340      	movs	r3, #64	; 0x40
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	9500      	str	r5, [sp, #0]
 80031c6:	ab03      	add	r3, sp, #12
 80031c8:	aa02      	add	r2, sp, #8
 80031ca:	4639      	mov	r1, r7
 80031cc:	f7ff fd9a 	bl	8002d04 <cread_add_char>
 80031d0:	e000      	b.n	80031d4 <readline_into_buffer+0x3ec>
			break;
		case CTL_CH('c'):	/* ^C - break */
			*buf = '\0';	/* discard input */
			return (-1);
		case CTL_CH('f'):
			if (num < eol_num) {
 80031d2:	2400      	movs	r4, #0
#endif
		default:
			cread_add_char(ichar, insert, &num, &eol_num, buf, *len);
			break;
		}
		osDelay(10);
 80031d4:	200a      	movs	r0, #10
 80031d6:	f7fe f9c4 	bl	8001562 <osDelay>
 80031da:	e661      	b.n	8002ea0 <readline_into_buffer+0xb8>
	}
	*len = eol_num;
	buf[eol_num] = '\0';	/* lose the newline */

	if (buf[0] && buf[0] != CREAD_HIST_CHAR)
 80031dc:	2b21      	cmp	r3, #33	; 0x21
 80031de:	d014      	beq.n	800320a <readline_into_buffer+0x422>
	}
}

static void cread_add_to_hist(char *line)
{
	strcpy(hist_list[hist_add_idx], line);
 80031e0:	683c      	ldr	r4, [r7, #0]
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <readline_into_buffer+0x440>)
 80031e4:	4629      	mov	r1, r5
 80031e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80031ea:	f000 fe15 	bl	8003e18 <strcpy>

	if (++hist_add_idx >= HIST_MAX)
		hist_add_idx = 0;

	if (hist_add_idx > hist_max)
 80031ee:	4a0d      	ldr	r2, [pc, #52]	; (8003224 <readline_into_buffer+0x43c>)

static void cread_add_to_hist(char *line)
{
	strcpy(hist_list[hist_add_idx], line);

	if (++hist_add_idx >= HIST_MAX)
 80031f0:	1c63      	adds	r3, r4, #1
		hist_add_idx = 0;

	if (hist_add_idx > hist_max)
 80031f2:	6811      	ldr	r1, [r2, #0]

static void cread_add_to_hist(char *line)
{
	strcpy(hist_list[hist_add_idx], line);

	if (++hist_add_idx >= HIST_MAX)
 80031f4:	2b13      	cmp	r3, #19
 80031f6:	bfc8      	it	gt
 80031f8:	2300      	movgt	r3, #0
		hist_add_idx = 0;

	if (hist_add_idx > hist_max)
 80031fa:	428b      	cmp	r3, r1
		hist_max = hist_add_idx;
 80031fc:	bfc8      	it	gt
 80031fe:	6013      	strgt	r3, [r2, #0]

	hist_num++;
 8003200:	4a0a      	ldr	r2, [pc, #40]	; (800322c <readline_into_buffer+0x444>)

static void cread_add_to_hist(char *line)
{
	strcpy(hist_list[hist_add_idx], line);

	if (++hist_add_idx >= HIST_MAX)
 8003202:	603b      	str	r3, [r7, #0]
		hist_add_idx = 0;

	if (hist_add_idx > hist_max)
		hist_max = hist_add_idx;

	hist_num++;
 8003204:	6813      	ldr	r3, [r2, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	6013      	str	r3, [r2, #0]
	*len = eol_num;
	buf[eol_num] = '\0';	/* lose the newline */

	if (buf[0] && buf[0] != CREAD_HIST_CHAR)
		cread_add_to_hist(buf);
	hist_cur = hist_add_idx;
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	4b08      	ldr	r3, [pc, #32]	; (8003230 <readline_into_buffer+0x448>)
			initted = 1;
		}
		puts(prompt);

		rc = cread_line(prompt, p, &len);
		return rc < 0 ? rc : len;
 800320e:	4630      	mov	r0, r6
	*len = eol_num;
	buf[eol_num] = '\0';	/* lose the newline */

	if (buf[0] && buf[0] != CREAD_HIST_CHAR)
		cread_add_to_hist(buf);
	hist_cur = hist_add_idx;
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	e003      	b.n	800321c <readline_into_buffer+0x434>
				hline = hist_prev();
			else
				hline = hist_next();

			if (!hline) {
				getcmd_cbeep();
 8003214:	2007      	movs	r0, #7
 8003216:	f7ff fd4d 	bl	8002cb4 <usartPutc>
 800321a:	e640      	b.n	8002e9e <readline_into_buffer+0xb6>
		}
	}
#ifdef CONFIG_CMDLINE_EDITING
	}
#endif
}
 800321c:	b007      	add	sp, #28
 800321e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003222:	bf00      	nop
 8003224:	2000127c 	.word	0x2000127c
 8003228:	20001414 	.word	0x20001414
 800322c:	200012d0 	.word	0x200012d0
 8003230:	20000008 	.word	0x20000008
 8003234:	080041af 	.word	0x080041af

08003238 <readline>:
{
	/*
	 * If console_buffer isn't 0-length the user will be prompted to modify
	 * it instead of entering it from scratch as desired.
	 */
	console_buffer[0] = '\0';
 8003238:	4902      	ldr	r1, [pc, #8]	; (8003244 <readline+0xc>)
 800323a:	2300      	movs	r3, #0
 800323c:	700b      	strb	r3, [r1, #0]

	return readline_into_buffer(prompt, console_buffer);
 800323e:	f7ff bdd3 	b.w	8002de8 <readline_into_buffer>
 8003242:	bf00      	nop
 8003244:	200013d0 	.word	0x200013d0

08003248 <parse_line>:
}

/****************************************************************************/

int parse_line (char *line, char *argv[])
{
 8003248:	b570      	push	{r4, r5, r6, lr}
	int nargs = 0;
 800324a:	2400      	movs	r4, #0
		printf ("parse_line: nargs=%d\n", nargs);
#endif
			return (nargs);
		}

		*line++ = '\0';		/* terminate current arg	 */
 800324c:	4626      	mov	r6, r4
 800324e:	1f0d      	subs	r5, r1, #4
	printf ("parse_line: \"%s\"\n", line);
#endif
	while (nargs < CONFIG_SYS_MAXARGS) {

		/* skip any white space */
		while ((*line == ' ') || (*line == '\t')) {
 8003250:	4602      	mov	r2, r0
 8003252:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003256:	2b20      	cmp	r3, #32
 8003258:	d101      	bne.n	800325e <parse_line+0x16>
}

/****************************************************************************/

int parse_line (char *line, char *argv[])
{
 800325a:	4610      	mov	r0, r2
 800325c:	e7f8      	b.n	8003250 <parse_line+0x8>
	printf ("parse_line: \"%s\"\n", line);
#endif
	while (nargs < CONFIG_SYS_MAXARGS) {

		/* skip any white space */
		while ((*line == ' ') || (*line == '\t')) {
 800325e:	2b09      	cmp	r3, #9
 8003260:	d0fb      	beq.n	800325a <parse_line+0x12>
			++line;
		}

		if (*line == '\0') {	/* end of line, no more args	*/
 8003262:	b15b      	cbz	r3, 800327c <parse_line+0x34>
		printf ("parse_line: nargs=%d\n", nargs);
#endif
			return (nargs);
		}

		argv[nargs++] = line;	/* begin of argument string	*/
 8003264:	3401      	adds	r4, #1
 8003266:	f845 0f04 	str.w	r0, [r5, #4]!
 800326a:	4602      	mov	r2, r0

		/* find end of string */
		while (*line && (*line != ' ') && (*line != '\t')) {
 800326c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003270:	b123      	cbz	r3, 800327c <parse_line+0x34>
 8003272:	2b20      	cmp	r3, #32
 8003274:	d005      	beq.n	8003282 <parse_line+0x3a>
 8003276:	2b09      	cmp	r3, #9
 8003278:	d1f7      	bne.n	800326a <parse_line+0x22>
 800327a:	e002      	b.n	8003282 <parse_line+0x3a>
			++line;
		}

		if (*line == '\0') {	/* end of line, no more args	*/
			argv[nargs] = NULL;
 800327c:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
#ifdef DEBUG_PARSER
		printf ("parse_line: nargs=%d\n", nargs);
#endif
			return (nargs);
 8003280:	e008      	b.n	8003294 <parse_line+0x4c>
	int nargs = 0;

#ifdef DEBUG_PARSER
	printf ("parse_line: \"%s\"\n", line);
#endif
	while (nargs < CONFIG_SYS_MAXARGS) {
 8003282:	2c08      	cmp	r4, #8
		printf ("parse_line: nargs=%d\n", nargs);
#endif
			return (nargs);
		}

		*line++ = '\0';		/* terminate current arg	 */
 8003284:	f102 0001 	add.w	r0, r2, #1
 8003288:	7016      	strb	r6, [r2, #0]
	int nargs = 0;

#ifdef DEBUG_PARSER
	printf ("parse_line: \"%s\"\n", line);
#endif
	while (nargs < CONFIG_SYS_MAXARGS) {
 800328a:	d1e1      	bne.n	8003250 <parse_line+0x8>
		}

		*line++ = '\0';		/* terminate current arg	 */
	}

	printf ("** Too many args (max. %d) **\n", CONFIG_SYS_MAXARGS);
 800328c:	4621      	mov	r1, r4
 800328e:	4802      	ldr	r0, [pc, #8]	; (8003298 <parse_line+0x50>)
 8003290:	f000 faec 	bl	800386c <iprintf>

#ifdef DEBUG_PARSER
	printf ("parse_line: nargs=%d\n", nargs);
#endif
	return (nargs);
}
 8003294:	4620      	mov	r0, r4
 8003296:	bd70      	pop	{r4, r5, r6, pc}
 8003298:	08004262 	.word	0x08004262

0800329c <run_command>:
 * may be the result from getenv(), which returns a pointer directly to
 * the environment data, which may change magicly when the command we run
 * creates or modifies environment variables (like "bootp" does).
 */
int run_command (const char *cmd, int flag)
{
 800329c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ctrlc_was_pressed;
}

void clear_ctrlc(void)
{
	ctrlc_was_pressed = 0;
 80032a0:	4b70      	ldr	r3, [pc, #448]	; (8003464 <run_command+0x1c8>)
 * may be the result from getenv(), which returns a pointer directly to
 * the environment data, which may change magicly when the command we run
 * creates or modifies environment variables (like "bootp" does).
 */
int run_command (const char *cmd, int flag)
{
 80032a2:	b0ad      	sub	sp, #180	; 0xb4
	return ctrlc_was_pressed;
}

void clear_ctrlc(void)
{
	ctrlc_was_pressed = 0;
 80032a4:	2400      	movs	r4, #0
 * may be the result from getenv(), which returns a pointer directly to
 * the environment data, which may change magicly when the command we run
 * creates or modifies environment variables (like "bootp" does).
 */
int run_command (const char *cmd, int flag)
{
 80032a6:	9101      	str	r1, [sp, #4]
	return ctrlc_was_pressed;
}

void clear_ctrlc(void)
{
	ctrlc_was_pressed = 0;
 80032a8:	601c      	str	r4, [r3, #0]
	puts ("\"\n");
#endif

	clear_ctrlc();		/* forget any previous Control C */

	if (!cmd || !*cmd) {
 80032aa:	4605      	mov	r5, r0
 80032ac:	4698      	mov	r8, r3
 80032ae:	2800      	cmp	r0, #0
 80032b0:	f000 80d0 	beq.w	8003454 <run_command+0x1b8>
 80032b4:	7803      	ldrb	r3, [r0, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80cc 	beq.w	8003454 <run_command+0x1b8>
		return -1;	/* empty command */
	}

	if (strlen(cmd) >= CONFIG_SYS_CBSIZE) {
 80032bc:	f7fc ff50 	bl	8000160 <strlen>
 80032c0:	283f      	cmp	r0, #63	; 0x3f
 80032c2:	d903      	bls.n	80032cc <run_command+0x30>
		puts ("## Command too long!\n");
 80032c4:	4868      	ldr	r0, [pc, #416]	; (8003468 <run_command+0x1cc>)
 80032c6:	f000 faf5 	bl	80038b4 <puts>
 80032ca:	e0c3      	b.n	8003454 <run_command+0x1b8>
		return -1;
	}

	strcpy (cmdbuf, cmd);
 80032cc:	4629      	mov	r1, r5
 80032ce:	a80c      	add	r0, sp, #48	; 0x30
 80032d0:	f000 fda2 	bl	8003e18 <strcpy>
{
	char c, prev;
	const char *varname_start = NULL;
	int inputcnt = strlen (input);
	int outputcnt = CONFIG_SYS_CBSIZE;
	int state = 0;		/* 0 = waiting for '$'  */
 80032d4:	46a1      	mov	r9, r4
	char *sep;			/* end of token (separator) in cmdbuf */
	char finaltoken[CONFIG_SYS_CBSIZE];
	char *str = cmdbuf;
	char *argv[CONFIG_SYS_MAXARGS + 1];	/* NULL terminated	*/
	int argc, inquotes;
	int repeatable = 1;
 80032d6:	2501      	movs	r5, #1
	cmd_tbl_t *cmdtp;
	char cmdbuf[CONFIG_SYS_CBSIZE];	/* working copy of cmd		*/
	char *token;			/* start of token in cmdbuf	*/
	char *sep;			/* end of token (separator) in cmdbuf */
	char finaltoken[CONFIG_SYS_CBSIZE];
	char *str = cmdbuf;
 80032d8:	af0c      	add	r7, sp, #48	; 0x30
	 */

#ifdef DEBUG_PARSER
	printf ("[PROCESS_SEPARATORS] %s\n", cmd);
#endif
	while (*str) {
 80032da:	783b      	ldrb	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80b8 	beq.w	8003452 <run_command+0x1b6>
 80032e2:	1e7a      	subs	r2, r7, #1
 80032e4:	2300      	movs	r3, #0
 80032e6:	3201      	adds	r2, #1

		/*
		 * Find separator, or string end
		 * Allow simple escape of ';' by writing "\;"
		 */
		for (inquotes = 0, sep = str; *sep; sep++) {
 80032e8:	7811      	ldrb	r1, [r2, #0]
 80032ea:	4616      	mov	r6, r2
 80032ec:	b1b1      	cbz	r1, 800331c <run_command+0x80>
			if ((*sep=='\'') &&
 80032ee:	2927      	cmp	r1, #39	; 0x27
 80032f0:	d106      	bne.n	8003300 <run_command+0x64>
 80032f2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80032f6:	295c      	cmp	r1, #92	; 0x5c
 80032f8:	d0f5      	beq.n	80032e6 <run_command+0x4a>
 80032fa:	f083 0301 	eor.w	r3, r3, #1
 80032fe:	e7f2      	b.n	80032e6 <run_command+0x4a>
			    (*(sep-1) != '\\'))
				inquotes=!inquotes;

			if (!inquotes &&
 8003300:	b953      	cbnz	r3, 8003318 <run_command+0x7c>
 8003302:	293b      	cmp	r1, #59	; 0x3b
 8003304:	d1ef      	bne.n	80032e6 <run_command+0x4a>
			    (*sep == ';') &&	/* separator		*/
 8003306:	42b7      	cmp	r7, r6
 8003308:	d0ed      	beq.n	80032e6 <run_command+0x4a>
			    ( sep != str) &&	/* past string start	*/
 800330a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800330e:	295c      	cmp	r1, #92	; 0x5c
 8003310:	d0e9      	beq.n	80032e6 <run_command+0x4a>
		 * Limit the token to data between separators
		 */
		token = str;
		if (*sep) {
			str = sep + 1;	/* start of command for next pass */
			*sep = '\0';
 8003312:	7033      	strb	r3, [r6, #0]
		/*
		 * Limit the token to data between separators
		 */
		token = str;
		if (*sep) {
			str = sep + 1;	/* start of command for next pass */
 8003314:	3601      	adds	r6, #1
 8003316:	e001      	b.n	800331c <run_command+0x80>
 8003318:	2301      	movs	r3, #1
 800331a:	e7e4      	b.n	80032e6 <run_command+0x4a>

static void process_macros (const char *input, char *output)
{
	char c, prev;
	const char *varname_start = NULL;
	int inputcnt = strlen (input);
 800331c:	4638      	mov	r0, r7
 800331e:	f7fc ff1f 	bl	8000160 <strlen>
	int outputcnt = CONFIG_SYS_CBSIZE;
	int state = 0;		/* 0 = waiting for '$'  */
 8003322:	2300      	movs	r3, #0

	printf ("[PROCESS_MACROS] INPUT len %d: \"%s\"\n", strlen (input),
		input);
#endif

	prev = '\0';		/* previous character   */
 8003324:	469c      	mov	ip, r3
static void process_macros (const char *input, char *output)
{
	char c, prev;
	const char *varname_start = NULL;
	int inputcnt = strlen (input);
	int outputcnt = CONFIG_SYS_CBSIZE;
 8003326:	f04f 0e40 	mov.w	lr, #64	; 0x40

static void process_macros (const char *input, char *output)
{
	char c, prev;
	const char *varname_start = NULL;
	int inputcnt = strlen (input);
 800332a:	aa1c      	add	r2, sp, #112	; 0x70
		input);
#endif

	prev = '\0';		/* previous character   */

	while (inputcnt && outputcnt) {
 800332c:	2800      	cmp	r0, #0
 800332e:	d060      	beq.n	80033f2 <run_command+0x156>
 8003330:	f1be 0f00 	cmp.w	lr, #0
 8003334:	d060      	beq.n	80033f8 <run_command+0x15c>
		c = *input++;
		inputcnt--;

		if (state != 3) {
 8003336:	2b03      	cmp	r3, #3
#endif

	prev = '\0';		/* previous character   */

	while (inputcnt && outputcnt) {
		c = *input++;
 8003338:	f107 0b01 	add.w	fp, r7, #1
 800333c:	7839      	ldrb	r1, [r7, #0]
		inputcnt--;
 800333e:	f100 3aff 	add.w	sl, r0, #4294967295

		if (state != 3) {
 8003342:	d03d      	beq.n	80033c0 <run_command+0x124>
			/* remove one level of escape characters */
			if ((c == '\\') && (prev != '\\')) {
 8003344:	295c      	cmp	r1, #92	; 0x5c
 8003346:	d10e      	bne.n	8003366 <run_command+0xca>
 8003348:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
 800334c:	d046      	beq.n	80033dc <run_command+0x140>
				if (inputcnt-- == 0)
 800334e:	3802      	subs	r0, #2
 8003350:	f1ba 0f00 	cmp.w	sl, #0
 8003354:	d102      	bne.n	800335c <run_command+0xc0>
		}
		prev = c;
	}

	if (outputcnt)
		*output = 0;
 8003356:	f882 9000 	strb.w	r9, [r2]
 800335a:	e04f      	b.n	80033fc <run_command+0x160>
		inputcnt--;

		if (state != 3) {
			/* remove one level of escape characters */
			if ((c == '\\') && (prev != '\\')) {
				if (inputcnt-- == 0)
 800335c:	4682      	mov	sl, r0
					break;
				prev = c;
				c = *input++;
 800335e:	468c      	mov	ip, r1
 8003360:	7879      	ldrb	r1, [r7, #1]
 8003362:	f107 0b02 	add.w	fp, r7, #2
			}
		}

		switch (state) {
 8003366:	2b01      	cmp	r3, #1
 8003368:	d011      	beq.n	800338e <run_command+0xf2>
 800336a:	2b02      	cmp	r3, #2
 800336c:	d023      	beq.n	80033b6 <run_command+0x11a>
		case 0:	/* Waiting for (unescaped) $    */
			if ((c == '\'') && (prev != '\\')) {
 800336e:	2927      	cmp	r1, #39	; 0x27
 8003370:	d103      	bne.n	800337a <run_command+0xde>
 8003372:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
 8003376:	d12d      	bne.n	80033d4 <run_command+0x138>
 8003378:	e004      	b.n	8003384 <run_command+0xe8>
				state = 3;
				break;
			}
			if ((c == '$') && (prev != '\\')) {
 800337a:	2924      	cmp	r1, #36	; 0x24
 800337c:	d102      	bne.n	8003384 <run_command+0xe8>
 800337e:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
 8003382:	d129      	bne.n	80033d8 <run_command+0x13c>
				state++;
			} else {
				*(output++) = c;
 8003384:	7011      	strb	r1, [r2, #0]
				outputcnt--;
 8003386:	f10e 3eff 	add.w	lr, lr, #4294967295
				break;
			}
			if ((c == '$') && (prev != '\\')) {
				state++;
			} else {
				*(output++) = c;
 800338a:	3201      	adds	r2, #1
 800338c:	e02c      	b.n	80033e8 <run_command+0x14c>
				outputcnt--;
			}
			break;
		case 1:	/* Waiting for (        */
			if (c == '(' || c == '{') {
 800338e:	2928      	cmp	r1, #40	; 0x28
 8003390:	d028      	beq.n	80033e4 <run_command+0x148>
 8003392:	297b      	cmp	r1, #123	; 0x7b
 8003394:	d026      	beq.n	80033e4 <run_command+0x148>
				state++;
				varname_start = input;
			} else {
				state = 0;
				*(output++) = '$';
 8003396:	f04f 0324 	mov.w	r3, #36	; 0x24
				outputcnt--;

				if (outputcnt) {
 800339a:	f1be 0f01 	cmp.w	lr, #1
			if (c == '(' || c == '{') {
				state++;
				varname_start = input;
			} else {
				state = 0;
				*(output++) = '$';
 800339e:	7013      	strb	r3, [r2, #0]
				outputcnt--;

				if (outputcnt) {
 80033a0:	d104      	bne.n	80033ac <run_command+0x110>
		case 1:	/* Waiting for (        */
			if (c == '(' || c == '{') {
				state++;
				varname_start = input;
			} else {
				state = 0;
 80033a2:	f04f 0e00 	mov.w	lr, #0
				*(output++) = '$';
 80033a6:	3201      	adds	r2, #1
 80033a8:	4673      	mov	r3, lr
 80033aa:	e01e      	b.n	80033ea <run_command+0x14e>
				outputcnt--;

				if (outputcnt) {
					*(output++) = c;
 80033ac:	7051      	strb	r1, [r2, #1]
					outputcnt--;
 80033ae:	f1ae 0e02 	sub.w	lr, lr, #2
				state = 0;
				*(output++) = '$';
				outputcnt--;

				if (outputcnt) {
					*(output++) = c;
 80033b2:	3202      	adds	r2, #2
 80033b4:	e018      	b.n	80033e8 <run_command+0x14c>
					outputcnt--;
				}
			}
			break;
		case 2:	/* Waiting for )        */
			if (c == ')' || c == '}') {
 80033b6:	2929      	cmp	r1, #41	; 0x29
 80033b8:	d016      	beq.n	80033e8 <run_command+0x14c>
 80033ba:	297d      	cmp	r1, #125	; 0x7d
 80033bc:	d112      	bne.n	80033e4 <run_command+0x148>
 80033be:	e013      	b.n	80033e8 <run_command+0x14c>
				/* Look for another '$' */
				state = 0;
			}
			break;
		case 3:	/* Waiting for '        */
			if ((c == '\'') && (prev != '\\')) {
 80033c0:	2927      	cmp	r1, #39	; 0x27
 80033c2:	d102      	bne.n	80033ca <run_command+0x12e>
 80033c4:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
 80033c8:	d10e      	bne.n	80033e8 <run_command+0x14c>
				state = 0;
			} else {
				*(output++) = c;
 80033ca:	7011      	strb	r1, [r2, #0]
				outputcnt--;
 80033cc:	f10e 3eff 	add.w	lr, lr, #4294967295
			break;
		case 3:	/* Waiting for '        */
			if ((c == '\'') && (prev != '\\')) {
				state = 0;
			} else {
				*(output++) = c;
 80033d0:	3201      	adds	r2, #1
 80033d2:	e00a      	b.n	80033ea <run_command+0x14e>
		}

		switch (state) {
		case 0:	/* Waiting for (unescaped) $    */
			if ((c == '\'') && (prev != '\\')) {
				state = 3;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e008      	b.n	80033ea <run_command+0x14e>
				break;
			}
			if ((c == '$') && (prev != '\\')) {
				state++;
 80033d8:	2301      	movs	r3, #1
 80033da:	e006      	b.n	80033ea <run_command+0x14e>
				prev = c;
				c = *input++;
			}
		}

		switch (state) {
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d0da      	beq.n	8003396 <run_command+0xfa>
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d1cf      	bne.n	8003384 <run_command+0xe8>
					outputcnt--;
				}
			}
			break;
		case 2:	/* Waiting for )        */
			if (c == ')' || c == '}') {
 80033e4:	2302      	movs	r3, #2
 80033e6:	e000      	b.n	80033ea <run_command+0x14e>
				state = 0;
			}
			break;
		case 3:	/* Waiting for '        */
			if ((c == '\'') && (prev != '\\')) {
				state = 0;
 80033e8:	2300      	movs	r3, #0
						*(output++) = *(envval++);
						outputcnt--;
					}
#endif
				/* Look for another '$' */
				state = 0;
 80033ea:	4650      	mov	r0, sl
 80033ec:	468c      	mov	ip, r1
 80033ee:	465f      	mov	r7, fp
 80033f0:	e79c      	b.n	800332c <run_command+0x90>
			break;
		}
		prev = c;
	}

	if (outputcnt)
 80033f2:	f1be 0f00 	cmp.w	lr, #0
 80033f6:	d1ae      	bne.n	8003356 <run_command+0xba>
		*output = 0;
	else
		*(output - 1) = 0;
 80033f8:	f802 9c01 	strb.w	r9, [r2, #-1]

		/* find macros in this token and replace them */
		process_macros (token, finaltoken);

		/* Extract arguments */
		if ((argc = parse_line (finaltoken, argv)) == 0) {
 80033fc:	a903      	add	r1, sp, #12
 80033fe:	a81c      	add	r0, sp, #112	; 0x70
 8003400:	f7ff ff22 	bl	8003248 <parse_line>
 8003404:	4607      	mov	r7, r0
 8003406:	b300      	cbz	r0, 800344a <run_command+0x1ae>
			rc = -1;	/* no command at all */
			continue;
		}

		/* Look up command in command table */
		if ((cmdtp = find_cmd(argv[0])) == NULL) {
 8003408:	9803      	ldr	r0, [sp, #12]
 800340a:	f7ff fa03 	bl	8002814 <find_cmd>
 800340e:	4682      	mov	sl, r0
 8003410:	b920      	cbnz	r0, 800341c <run_command+0x180>
			printf ("Unknown command '%s' - try 'help'\n", argv[0]);
 8003412:	9903      	ldr	r1, [sp, #12]
 8003414:	4815      	ldr	r0, [pc, #84]	; (800346c <run_command+0x1d0>)
 8003416:	f000 fa29 	bl	800386c <iprintf>
 800341a:	e016      	b.n	800344a <run_command+0x1ae>
			rc = -1;	/* give up after bad command */
			continue;
		}

		/* found - check max args */
		if (argc > cmdtp->maxargs) {
 800341c:	6843      	ldr	r3, [r0, #4]
 800341e:	429f      	cmp	r7, r3
 8003420:	dd02      	ble.n	8003428 <run_command+0x18c>
			cmd_usage(cmdtp);
 8003422:	f7ff fa05 	bl	8002830 <cmd_usage>
 8003426:	e010      	b.n	800344a <run_command+0x1ae>
			rc = -1;
			continue;
		}

		/* OK - call function to do the command */
		if ((cmdtp->cmd) (cmdtp, flag, argc, argv) != 0) {
 8003428:	ab03      	add	r3, sp, #12
 800342a:	463a      	mov	r2, r7
 800342c:	9901      	ldr	r1, [sp, #4]
 800342e:	68c7      	ldr	r7, [r0, #12]
 8003430:	47b8      	blx	r7
			rc = -1;
		}

		repeatable &= cmdtp->repeatable;
 8003432:	f8da 3008 	ldr.w	r3, [sl, #8]
			continue;
		}

		/* OK - call function to do the command */
		if ((cmdtp->cmd) (cmdtp, flag, argc, argv) != 0) {
			rc = -1;
 8003436:	2800      	cmp	r0, #0
		}

		repeatable &= cmdtp->repeatable;
 8003438:	ea05 0503 	and.w	r5, r5, r3

		/* Did the user stop this? */
		if (had_ctrlc ())
 800343c:	f8d8 3000 	ldr.w	r3, [r8]
			continue;
		}

		/* OK - call function to do the command */
		if ((cmdtp->cmd) (cmdtp, flag, argc, argv) != 0) {
			rc = -1;
 8003440:	bf18      	it	ne
 8003442:	f04f 34ff 	movne.w	r4, #4294967295
		}

		repeatable &= cmdtp->repeatable;

		/* Did the user stop this? */
		if (had_ctrlc ())
 8003446:	b113      	cbz	r3, 800344e <run_command+0x1b2>
 8003448:	e004      	b.n	8003454 <run_command+0x1b8>
		/* find macros in this token and replace them */
		process_macros (token, finaltoken);

		/* Extract arguments */
		if ((argc = parse_line (finaltoken, argv)) == 0) {
			rc = -1;	/* no command at all */
 800344a:	f04f 34ff 	mov.w	r4, #4294967295
		}

		/* found - check max args */
		if (argc > cmdtp->maxargs) {
			cmd_usage(cmdtp);
			rc = -1;
 800344e:	4637      	mov	r7, r6
 8003450:	e743      	b.n	80032da <run_command+0x3e>

		/* Did the user stop this? */
		if (had_ctrlc ())
			return -1;	/* if stopped then not repeatable */
	}
	return rc ? rc : repeatable;
 8003452:	b114      	cbz	r4, 800345a <run_command+0x1be>
	cmd_tbl_t *cmdtp;
	char cmdbuf[CONFIG_SYS_CBSIZE];	/* working copy of cmd		*/
	char *token;			/* start of token in cmdbuf	*/
	char *sep;			/* end of token (separator) in cmdbuf */
	char finaltoken[CONFIG_SYS_CBSIZE];
	char *str = cmdbuf;
 8003454:	f04f 30ff 	mov.w	r0, #4294967295
 8003458:	e000      	b.n	800345c <run_command+0x1c0>
 800345a:	4628      	mov	r0, r5
		/* Did the user stop this? */
		if (had_ctrlc ())
			return -1;	/* if stopped then not repeatable */
	}
	return rc ? rc : repeatable;
}
 800345c:	b02d      	add	sp, #180	; 0xb4
 800345e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003462:	bf00      	nop
 8003464:	20001278 	.word	0x20001278
 8003468:	08004281 	.word	0x08004281
 800346c:	08004296 	.word	0x08004296

08003470 <stm32ShellCommand>:

void stm32ShellCommand(void)
{
 8003470:	b508      	push	{r3, lr}
	install_auto_complete();
#endif
	/*
	 * Main Loop for Monitor Command Processing
	 */
	len = readline (CONFIG_SYS_PROMPT);
 8003472:	480a      	ldr	r0, [pc, #40]	; (800349c <stm32ShellCommand+0x2c>)
 8003474:	f7ff fee0 	bl	8003238 <readline>
 8003478:	b200      	sxth	r0, r0
	flag = 0;	/* assume no special flags for now */

	if (len > 0)		strcpy (lastcommand, console_buffer);
 800347a:	2800      	cmp	r0, #0
 800347c:	dd05      	ble.n	800348a <stm32ShellCommand+0x1a>
 800347e:	4908      	ldr	r1, [pc, #32]	; (80034a0 <stm32ShellCommand+0x30>)
 8003480:	4808      	ldr	r0, [pc, #32]	; (80034a4 <stm32ShellCommand+0x34>)
 8003482:	f000 fcc9 	bl	8003e18 <strcpy>
#endif
	/*
	 * Main Loop for Monitor Command Processing
	 */
	len = readline (CONFIG_SYS_PROMPT);
	flag = 0;	/* assume no special flags for now */
 8003486:	2100      	movs	r1, #0
 8003488:	e001      	b.n	800348e <stm32ShellCommand+0x1e>

	if (len > 0)		strcpy (lastcommand, console_buffer);
	else if (len == 0)	flag |= CMD_FLAG_REPEAT;

	if (len <= -1){
 800348a:	d103      	bne.n	8003494 <stm32ShellCommand+0x24>
 800348c:	2101      	movs	r1, #1
	}else{
		run_command (lastcommand, flag);
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <stm32ShellCommand+0x34>)
 8003490:	f7ff ff04 	bl	800329c <run_command>
	}
	/* invalid command or not repeatable, forget it */
	lastcommand[0] = 0;
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <stm32ShellCommand+0x34>)
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	bd08      	pop	{r3, pc}
 800349c:	080042b9 	.word	0x080042b9
 80034a0:	200013d0 	.word	0x200013d0
 80034a4:	2000128c 	.word	0x2000128c

080034a8 <ShellInitRecvBuf>:
}

SHELL_INBUF_t* ShellInitRecvBuf(void)
{
 80034a8:	b510      	push	{r4, lr}
	SHELL_INBUF_t* _sObjBuf;
	_sObjBuf = (SHELL_INBUF_t*)malloc(sizeof(SHELL_INBUF_t));
 80034aa:	2082      	movs	r0, #130	; 0x82
 80034ac:	f000 fa42 	bl	8003934 <malloc>
	if(_sObjBuf != NULL)	memset((SHELL_INBUF_t*)_sObjBuf, 0, sizeof(SHELL_INBUF_t));
 80034b0:	4604      	mov	r4, r0
 80034b2:	b118      	cbz	r0, 80034bc <ShellInitRecvBuf+0x14>
 80034b4:	2282      	movs	r2, #130	; 0x82
 80034b6:	2100      	movs	r1, #0
 80034b8:	f000 fc86 	bl	8003dc8 <memset>

	return _sObjBuf;
}
 80034bc:	4620      	mov	r0, r4
 80034be:	bd10      	pop	{r4, pc}

080034c0 <ShellSaveRecv>:

void ShellSaveRecv(SHELL_INBUF_t* _sInBuf, uint8_t d)
{
	if (_sInBuf->idx < MAX_SIZE_MESSAGE) {
 80034c0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80034c4:	061a      	lsls	r2, r3, #24
		_sInBuf->msgBuf[_sInBuf->idx++] = d;
 80034c6:	bf5e      	ittt	pl
 80034c8:	1c5a      	addpl	r2, r3, #1
 80034ca:	f880 2080 	strbpl.w	r2, [r0, #128]	; 0x80
 80034ce:	54c1      	strbpl	r1, [r0, r3]
 80034d0:	4770      	bx	lr
	...

080034d4 <HAL_UART_RxCpltCallback>:
	}else{
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if(huart->Instance == USART1)
 80034d6:	6802      	ldr	r2, [r0, #0]
 80034d8:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_UART_RxCpltCallback+0x48>)
 80034da:	429a      	cmp	r2, r3
 80034dc:	d11b      	bne.n	8003516 <HAL_UART_RxCpltCallback+0x42>
	{
	  evt = osMessageGet(uartRxQueueHandle, 0);
 80034de:	4c10      	ldr	r4, [pc, #64]	; (8003520 <HAL_UART_RxCpltCallback+0x4c>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	6821      	ldr	r1, [r4, #0]
 80034e4:	4668      	mov	r0, sp
 80034e6:	4d0f      	ldr	r5, [pc, #60]	; (8003524 <HAL_UART_RxCpltCallback+0x50>)
 80034e8:	f7fe f85c 	bl	80015a4 <osMessageGet>
 80034ec:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}

	  if(evt.status == osEventMessage)
 80034f0:	2810      	cmp	r0, #16

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART1)
	{
	  evt = osMessageGet(uartRxQueueHandle, 0);
 80034f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	  if(evt.status == osEventMessage)
 80034f6:	d106      	bne.n	8003506 <HAL_UART_RxCpltCallback+0x32>
	  {
		  uint8_t recvData = evt.value.v & BIT8_MASK;
		  ShellSaveRecv(sInBuf, recvData);
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_UART_RxCpltCallback+0x54>)
 80034fa:	b2c9      	uxtb	r1, r1
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	f7ff ffdf 	bl	80034c0 <ShellSaveRecv>
		  evt.status = osOK;
 8003502:	2300      	movs	r3, #0
 8003504:	602b      	str	r3, [r5, #0]
	  }
	  HAL_UART_Receive_IT(&huart1,uartRxQueueHandle, USART_RX_BUFF_SIZE);
 8003506:	6821      	ldr	r1, [r4, #0]
 8003508:	4808      	ldr	r0, [pc, #32]	; (800352c <HAL_UART_RxCpltCallback+0x58>)
 800350a:	2201      	movs	r2, #1
	}
}
 800350c:	b004      	add	sp, #16
 800350e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  {
		  uint8_t recvData = evt.value.v & BIT8_MASK;
		  ShellSaveRecv(sInBuf, recvData);
		  evt.status = osOK;
	  }
	  HAL_UART_Receive_IT(&huart1,uartRxQueueHandle, USART_RX_BUFF_SIZE);
 8003512:	f7fd bf0f 	b.w	8001334 <HAL_UART_Receive_IT>
	}
}
 8003516:	b004      	add	sp, #16
 8003518:	bd70      	pop	{r4, r5, r6, pc}
 800351a:	bf00      	nop
 800351c:	40013800 	.word	0x40013800
 8003520:	20001340 	.word	0x20001340
 8003524:	20001978 	.word	0x20001978
 8003528:	20001288 	.word	0x20001288
 800352c:	20001388 	.word	0x20001388

08003530 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003530:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <HAL_MspInit+0x84>)

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003532:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003534:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003536:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	619a      	str	r2, [r3, #24]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003548:	f7fd f814 	bl	8000574 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	4611      	mov	r1, r2
 8003550:	f06f 000b 	mvn.w	r0, #11
 8003554:	f7fd f820 	bl	8000598 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003558:	2200      	movs	r2, #0
 800355a:	4611      	mov	r1, r2
 800355c:	f06f 000a 	mvn.w	r0, #10
 8003560:	f7fd f81a 	bl	8000598 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003564:	2200      	movs	r2, #0
 8003566:	4611      	mov	r1, r2
 8003568:	f06f 0009 	mvn.w	r0, #9
 800356c:	f7fd f814 	bl	8000598 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003570:	2200      	movs	r2, #0
 8003572:	4611      	mov	r1, r2
 8003574:	f06f 0004 	mvn.w	r0, #4
 8003578:	f7fd f80e 	bl	8000598 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800357c:	2200      	movs	r2, #0
 800357e:	4611      	mov	r1, r2
 8003580:	f06f 0003 	mvn.w	r0, #3
 8003584:	f7fd f808 	bl	8000598 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003588:	2200      	movs	r2, #0
 800358a:	210f      	movs	r1, #15
 800358c:	f06f 0001 	mvn.w	r0, #1
 8003590:	f7fd f802 	bl	8000598 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003594:	2200      	movs	r2, #0
 8003596:	210f      	movs	r1, #15
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	f7fc fffc 	bl	8000598 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80035a0:	4a05      	ldr	r2, [pc, #20]	; (80035b8 <HAL_MspInit+0x88>)
 80035a2:	6853      	ldr	r3, [r2, #4]
 80035a4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80035a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ae:	b003      	add	sp, #12
 80035b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40010000 	.word	0x40010000

080035bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80035be:	6802      	ldr	r2, [r0, #0]
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_ADC_MspInit+0x34>)
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d111      	bne.n	80035ea <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035c6:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80035ca:	699a      	ldr	r2, [r3, #24]
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035cc:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d2:	619a      	str	r2, [r3, #24]
 80035d4:	699b      	ldr	r3, [r3, #24]
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d6:	4807      	ldr	r0, [pc, #28]	; (80035f4 <HAL_ADC_MspInit+0x38>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	9b01      	ldr	r3, [sp, #4]
  
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035e0:	2303      	movs	r3, #3
 80035e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035e4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e6:	f7fd f839 	bl	800065c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035ea:	b007      	add	sp, #28
 80035ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80035f0:	40012400 	.word	0x40012400
 80035f4:	40010c00 	.word	0x40010c00

080035f8 <HAL_UART_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035f8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80035fa:	6802      	ldr	r2, [r0, #0]
 80035fc:	4b16      	ldr	r3, [pc, #88]	; (8003658 <HAL_UART_MspInit+0x60>)
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035fe:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003600:	429a      	cmp	r2, r3
 8003602:	d127      	bne.n	8003654 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003604:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003608:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360a:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800360c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003610:	619a      	str	r2, [r3, #24]
 8003612:	699b      	ldr	r3, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003614:	4811      	ldr	r0, [pc, #68]	; (800365c <HAL_UART_MspInit+0x64>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800361e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003622:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003624:	2302      	movs	r3, #2
 8003626:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003628:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800362a:	2400      	movs	r4, #0
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800362c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362e:	f7fd f815 	bl	800065c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003632:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003636:	a902      	add	r1, sp, #8
 8003638:	4808      	ldr	r0, [pc, #32]	; (800365c <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800363a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800363c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003640:	f7fd f80c 	bl	800065c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003644:	2025      	movs	r0, #37	; 0x25
 8003646:	4622      	mov	r2, r4
 8003648:	2105      	movs	r1, #5
 800364a:	f7fc ffa5 	bl	8000598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800364e:	2025      	movs	r0, #37	; 0x25
 8003650:	f7fc ffd6 	bl	8000600 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003654:	b006      	add	sp, #24
 8003656:	bd10      	pop	{r4, pc}
 8003658:	40013800 	.word	0x40013800
 800365c:	40010800 	.word	0x40010800

08003660 <NMI_Handler>:
 8003660:	4770      	bx	lr

08003662 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003662:	e7fe      	b.n	8003662 <HardFault_Handler>

08003664 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003664:	e7fe      	b.n	8003664 <MemManage_Handler>

08003666 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003666:	e7fe      	b.n	8003666 <BusFault_Handler>

08003668 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003668:	e7fe      	b.n	8003668 <UsageFault_Handler>

0800366a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800366a:	4770      	bx	lr

0800366c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800366c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800366e:	f7fc fdef 	bl	8000250 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8003672:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  osSystickHandler();
 8003676:	f7fd bfcb 	b.w	8001610 <osSystickHandler>
	...

0800367c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800367c:	4801      	ldr	r0, [pc, #4]	; (8003684 <USART1_IRQHandler+0x8>)
 800367e:	f7fd be8d 	b.w	800139c <HAL_UART_IRQHandler>
 8003682:	bf00      	nop
 8003684:	20001388 	.word	0x20001388

08003688 <_write>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8003688:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800368a:	4615      	mov	r5, r2
 800368c:	460c      	mov	r4, r1
 800368e:	188e      	adds	r6, r1, r2
	/* Implement your write code here, this is used by puts and printf for example */
		for(unsigned int i = 0; i < len; i++)
 8003690:	42b4      	cmp	r4, r6
 8003692:	4621      	mov	r1, r4
 8003694:	d010      	beq.n	80036b8 <_write+0x30>
		{
			if(*ptr == '\n')
 8003696:	780b      	ldrb	r3, [r1, #0]
				HAL_UART_Transmit(&huart1, temp, 2, 10);
				ptr++;
			}
			else
			{
				HAL_UART_Transmit(&huart1, ptr, 1, 10);
 8003698:	4809      	ldr	r0, [pc, #36]	; (80036c0 <_write+0x38>)
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	/* Implement your write code here, this is used by puts and printf for example */
		for(unsigned int i = 0; i < len; i++)
		{
			if(*ptr == '\n')
 800369a:	2b0a      	cmp	r3, #10
			{
				uint8_t temp[2] = "\r\n";
 800369c:	bf03      	ittte	eq
 800369e:	f640 220d 	movweq	r2, #2573	; 0xa0d
 80036a2:	a902      	addeq	r1, sp, #8
 80036a4:	f821 2d04 	strheq.w	r2, [r1, #-4]!
				HAL_UART_Transmit(&huart1, temp, 2, 10);
				ptr++;
			}
			else
			{
				HAL_UART_Transmit(&huart1, ptr, 1, 10);
 80036a8:	230a      	movne	r3, #10
		for(unsigned int i = 0; i < len; i++)
		{
			if(*ptr == '\n')
			{
				uint8_t temp[2] = "\r\n";
				HAL_UART_Transmit(&huart1, temp, 2, 10);
 80036aa:	bf0c      	ite	eq
 80036ac:	2202      	moveq	r2, #2
				ptr++;
			}
			else
			{
				HAL_UART_Transmit(&huart1, ptr, 1, 10);
 80036ae:	2201      	movne	r2, #1
 80036b0:	3401      	adds	r4, #1
 80036b2:	f7fd fde3 	bl	800127c <HAL_UART_Transmit>
 80036b6:	e7eb      	b.n	8003690 <_write+0x8>
				ptr++;
			}
		}
		return len;
}
 80036b8:	4628      	mov	r0, r5
 80036ba:	b002      	add	sp, #8
 80036bc:	bd70      	pop	{r4, r5, r6, pc}
 80036be:	bf00      	nop
 80036c0:	20001388 	.word	0x20001388

080036c4 <_sbrk>:
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <_sbrk+0x2c>)
		}
		return len;
}

caddr_t _sbrk(int32_t incr)
{
 80036c6:	b510      	push	{r4, lr}
  extern uint32_t _Min_Heap_Size; /* _Min_Heap_Size symbol defined in the linker script. */
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 80036c8:	490a      	ldr	r1, [pc, #40]	; (80036f4 <_sbrk+0x30>)
 80036ca:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <_sbrk+0x34>)
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 80036cc:	681c      	ldr	r4, [r3, #0]

caddr_t _sbrk(int32_t incr)
{
  extern uint32_t _Min_Heap_Size; /* _Min_Heap_Size symbol defined in the linker script. */
  extern uint8_t end asm("end");
  const uint8_t *max_heap = (uint8_t*)((uint32_t)&end + (uint32_t)&_Min_Heap_Size);
 80036ce:	440a      	add	r2, r1
  static uint8_t *heap_end;
  uint8_t *prev_heap_end;

  if (heap_end == 0)
 80036d0:	b904      	cbnz	r4, 80036d4 <_sbrk+0x10>
    heap_end = &end;
 80036d2:	6019      	str	r1, [r3, #0]

  prev_heap_end = heap_end;
 80036d4:	681b      	ldr	r3, [r3, #0]
  if (heap_end + incr > max_heap)
 80036d6:	4418      	add	r0, r3
 80036d8:	4282      	cmp	r2, r0
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 80036da:	bf37      	itett	cc
 80036dc:	4b07      	ldrcc	r3, [pc, #28]	; (80036fc <_sbrk+0x38>)
    return (caddr_t) -1;
  }

  heap_end += incr;
 80036de:	4a04      	ldrcs	r2, [pc, #16]	; (80036f0 <_sbrk+0x2c>)
  prev_heap_end = heap_end;
  if (heap_end + incr > max_heap)
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 80036e0:	220c      	movcc	r2, #12
    return (caddr_t) -1;
 80036e2:	f04f 30ff 	movcc.w	r0, #4294967295
  }

  heap_end += incr;
 80036e6:	bf2a      	itet	cs
 80036e8:	6010      	strcs	r0, [r2, #0]
  prev_heap_end = heap_end;
  if (heap_end + incr > max_heap)
  {
//    write(1, "Heap and stack collision\n", 25);
//    abort();
    errno = ENOMEM;
 80036ea:	601a      	strcc	r2, [r3, #0]
    return (caddr_t) -1;
  }

  heap_end += incr;

  return (caddr_t) prev_heap_end;
 80036ec:	4618      	movcs	r0, r3
}
 80036ee:	bd10      	pop	{r4, pc}
 80036f0:	200012d4 	.word	0x200012d4
 80036f4:	20001988 	.word	0x20001988
 80036f8:	00000200 	.word	0x00000200
 80036fc:	20001984 	.word	0x20001984

08003700 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003700:	b570      	push	{r4, r5, r6, lr}
	int div = 1;
 8003702:	2301      	movs	r3, #1
	while (d/div >= base)
 8003704:	fbb1 f4f3 	udiv	r4, r1, r3
 8003708:	4294      	cmp	r4, r2
 800370a:	d301      	bcc.n	8003710 <ts_itoa+0x10>
		div *= base;
 800370c:	4353      	muls	r3, r2
 800370e:	e7f9      	b.n	8003704 <ts_itoa+0x4>

	while (div != 0)
 8003710:	b17b      	cbz	r3, 8003732 <ts_itoa+0x32>
	{
		int num = d/div;
 8003712:	fbb1 f4f3 	udiv	r4, r1, r3
 8003716:	6805      	ldr	r5, [r0, #0]
		d = d%div;
		div /= base;
		if (num > 9)
 8003718:	2c09      	cmp	r4, #9
		div *= base;

	while (div != 0)
	{
		int num = d/div;
		d = d%div;
 800371a:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
 800371e:	f105 0601 	add.w	r6, r5, #1
 8003722:	bfcc      	ite	gt
 8003724:	3437      	addgt	r4, #55	; 0x37
		else
			*((*buf)++) = num + '0';
 8003726:	3430      	addle	r4, #48	; 0x30
	{
		int num = d/div;
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
 8003728:	6006      	str	r6, [r0, #0]

	while (div != 0)
	{
		int num = d/div;
		d = d%div;
		div /= base;
 800372a:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
 800372e:	702c      	strb	r4, [r5, #0]
 8003730:	e7ee      	b.n	8003710 <ts_itoa+0x10>
	}
}
 8003732:	bd70      	pop	{r4, r5, r6, pc}

08003734 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003734:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003738:	4613      	mov	r3, r2
 800373a:	460c      	mov	r4, r1
	char *start_buf = buf;
 800373c:	4606      	mov	r6, r0
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800373e:	ad02      	add	r5, sp, #8
 8003740:	f845 0d04 	str.w	r0, [r5, #-4]!
				{
					signed int val = va_arg(va, signed int);
					if (val < 0)
					{
						val *= -1;
						*buf++ = '-';
 8003744:	272d      	movs	r7, #45	; 0x2d
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 8003746:	7822      	ldrb	r2, [r4, #0]
 8003748:	2a00      	cmp	r2, #0
 800374a:	d050      	beq.n	80037ee <ts_formatstring+0xba>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800374c:	2a25      	cmp	r2, #37	; 0x25
 800374e:	d148      	bne.n	80037e2 <ts_formatstring+0xae>
		{
			switch (*(++fmt))
 8003750:	7862      	ldrb	r2, [r4, #1]
 8003752:	2a64      	cmp	r2, #100	; 0x64
 8003754:	d01e      	beq.n	8003794 <ts_formatstring+0x60>
 8003756:	d80a      	bhi.n	800376e <ts_formatstring+0x3a>
 8003758:	2a58      	cmp	r2, #88	; 0x58
 800375a:	d038      	beq.n	80037ce <ts_formatstring+0x9a>
 800375c:	2a63      	cmp	r2, #99	; 0x63
 800375e:	d011      	beq.n	8003784 <ts_formatstring+0x50>
 8003760:	2a25      	cmp	r2, #37	; 0x25
 8003762:	d13c      	bne.n	80037de <ts_formatstring+0xaa>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 8003764:	9901      	ldr	r1, [sp, #4]
 8003766:	1c48      	adds	r0, r1, #1
 8003768:	9001      	str	r0, [sp, #4]
 800376a:	700a      	strb	r2, [r1, #0]
				  break;
 800376c:	e037      	b.n	80037de <ts_formatstring+0xaa>
	while(*fmt)
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 800376e:	2a73      	cmp	r2, #115	; 0x73
 8003770:	d01c      	beq.n	80037ac <ts_formatstring+0x78>
 8003772:	d802      	bhi.n	800377a <ts_formatstring+0x46>
 8003774:	2a69      	cmp	r2, #105	; 0x69
 8003776:	d00d      	beq.n	8003794 <ts_formatstring+0x60>
 8003778:	e031      	b.n	80037de <ts_formatstring+0xaa>
 800377a:	2a75      	cmp	r2, #117	; 0x75
 800377c:	d023      	beq.n	80037c6 <ts_formatstring+0x92>
 800377e:	2a78      	cmp	r2, #120	; 0x78
 8003780:	d025      	beq.n	80037ce <ts_formatstring+0x9a>
 8003782:	e02c      	b.n	80037de <ts_formatstring+0xaa>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003784:	9a01      	ldr	r2, [sp, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	1c51      	adds	r1, r2, #1
 800378a:	9101      	str	r1, [sp, #4]
 800378c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8003790:	7011      	strb	r1, [r2, #0]
				break;
 8003792:	e024      	b.n	80037de <ts_formatstring+0xaa>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003794:	6819      	ldr	r1, [r3, #0]
 8003796:	f103 0804 	add.w	r8, r3, #4
					if (val < 0)
 800379a:	2900      	cmp	r1, #0
 800379c:	da04      	bge.n	80037a8 <ts_formatstring+0x74>
					{
						val *= -1;
						*buf++ = '-';
 800379e:	9b01      	ldr	r3, [sp, #4]
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
					if (val < 0)
					{
						val *= -1;
 80037a0:	4249      	negs	r1, r1
						*buf++ = '-';
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	9201      	str	r2, [sp, #4]
 80037a6:	701f      	strb	r7, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80037a8:	220a      	movs	r2, #10
 80037aa:	e014      	b.n	80037d6 <ts_formatstring+0xa2>
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80037ac:	1d19      	adds	r1, r3, #4
 80037ae:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 80037b0:	781a      	ldrb	r2, [r3, #0]
 80037b2:	b132      	cbz	r2, 80037c2 <ts_formatstring+0x8e>
					{
						*buf++ = *arg++;
 80037b4:	9a01      	ldr	r2, [sp, #4]
 80037b6:	1c50      	adds	r0, r2, #1
 80037b8:	9001      	str	r0, [sp, #4]
 80037ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 80037be:	7010      	strb	r0, [r2, #0]
 80037c0:	e7f6      	b.n	80037b0 <ts_formatstring+0x7c>
					ts_itoa(&buf, val, 10);
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80037c2:	460b      	mov	r3, r1
 80037c4:	e00b      	b.n	80037de <ts_formatstring+0xaa>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80037c6:	f103 0804 	add.w	r8, r3, #4
 80037ca:	220a      	movs	r2, #10
 80037cc:	e002      	b.n	80037d4 <ts_formatstring+0xa0>
				break;
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80037ce:	f103 0804 	add.w	r8, r3, #4
 80037d2:	2210      	movs	r2, #16
 80037d4:	6819      	ldr	r1, [r3, #0]
 80037d6:	4628      	mov	r0, r5
 80037d8:	f7ff ff92 	bl	8003700 <ts_itoa>
 80037dc:	4643      	mov	r3, r8
				break;
			  case '%':
				  *buf++ = '%';
				  break;
			}
			fmt++;
 80037de:	3402      	adds	r4, #2
 80037e0:	e7b1      	b.n	8003746 <ts_formatstring+0x12>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80037e2:	9901      	ldr	r1, [sp, #4]
 80037e4:	3401      	adds	r4, #1
 80037e6:	1c48      	adds	r0, r1, #1
 80037e8:	9001      	str	r0, [sp, #4]
 80037ea:	700a      	strb	r2, [r1, #0]
 80037ec:	e7ab      	b.n	8003746 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80037ee:	9b01      	ldr	r3, [sp, #4]
 80037f0:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 80037f2:	9801      	ldr	r0, [sp, #4]
 80037f4:	1b80      	subs	r0, r0, r6
 80037f6:	b002      	add	sp, #8
 80037f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080037fc <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80037fc:	b530      	push	{r4, r5, lr}
 80037fe:	4604      	mov	r4, r0
	int length = 0;
 8003800:	2000      	movs	r0, #0
	while (*fmt)
 8003802:	7823      	ldrb	r3, [r4, #0]
 8003804:	b38b      	cbz	r3, 800386a <ts_formatlength+0x6e>
	{
		if (*fmt == '%')
 8003806:	2b25      	cmp	r3, #37	; 0x25
 8003808:	d128      	bne.n	800385c <ts_formatlength+0x60>
		{
			++fmt;
			switch (*fmt)
 800380a:	7863      	ldrb	r3, [r4, #1]
	int length = 0;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			++fmt;
 800380c:	1c65      	adds	r5, r4, #1
			switch (*fmt)
 800380e:	2b69      	cmp	r3, #105	; 0x69
 8003810:	d014      	beq.n	800383c <ts_formatlength+0x40>
 8003812:	d806      	bhi.n	8003822 <ts_formatlength+0x26>
 8003814:	2b63      	cmp	r3, #99	; 0x63
 8003816:	d00e      	beq.n	8003836 <ts_formatlength+0x3a>
 8003818:	2b64      	cmp	r3, #100	; 0x64
 800381a:	d00f      	beq.n	800383c <ts_formatlength+0x40>
 800381c:	2b58      	cmp	r3, #88	; 0x58
 800381e:	d11a      	bne.n	8003856 <ts_formatlength+0x5a>
 8003820:	e015      	b.n	800384e <ts_formatlength+0x52>
 8003822:	2b75      	cmp	r3, #117	; 0x75
 8003824:	d00a      	beq.n	800383c <ts_formatlength+0x40>
 8003826:	2b78      	cmp	r3, #120	; 0x78
 8003828:	d011      	beq.n	800384e <ts_formatlength+0x52>
 800382a:	2b73      	cmp	r3, #115	; 0x73
 800382c:	d113      	bne.n	8003856 <ts_formatlength+0x5a>
				  length += 11;
				  va_arg(va, int);
				  break;
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 800382e:	1d0a      	adds	r2, r1, #4
 8003830:	6809      	ldr	r1, [r1, #0]
 8003832:	1a40      	subs	r0, r0, r1
			  		  while (*str++)
 8003834:	e005      	b.n	8003842 <ts_formatlength+0x46>
		{
			++fmt;
			switch (*fmt)
			{
			  case 'c':
		  		  va_arg(va, int);
 8003836:	1d0a      	adds	r2, r1, #4
				  ++length;
 8003838:	1c43      	adds	r3, r0, #1
				  break;
 800383a:	e012      	b.n	8003862 <ts_formatlength+0x66>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 800383c:	f100 030b 	add.w	r3, r0, #11
 8003840:	e007      	b.n	8003852 <ts_formatlength+0x56>
 8003842:	180b      	adds	r3, r1, r0
				  va_arg(va, int);
				  break;
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
			  		  while (*str++)
 8003844:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003848:	2c00      	cmp	r4, #0
 800384a:	d1fa      	bne.n	8003842 <ts_formatlength+0x46>
 800384c:	e009      	b.n	8003862 <ts_formatlength+0x66>
			  	  }
				  break;
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 800384e:	f100 0308 	add.w	r3, r0, #8
				  va_arg(va, unsigned int);
 8003852:	1d0a      	adds	r2, r1, #4
				  break;
 8003854:	e005      	b.n	8003862 <ts_formatlength+0x66>
			  default:
				  ++length;
 8003856:	1c43      	adds	r3, r0, #1
				  break;
 8003858:	460a      	mov	r2, r1
 800385a:	e002      	b.n	8003862 <ts_formatlength+0x66>
			}
		}
		else
		{
			++length;
 800385c:	460a      	mov	r2, r1
 800385e:	4625      	mov	r5, r4
 8003860:	1c43      	adds	r3, r0, #1
		}
		++fmt;
 8003862:	1c6c      	adds	r4, r5, #1
 8003864:	4611      	mov	r1, r2
 8003866:	4618      	mov	r0, r3
 8003868:	e7cb      	b.n	8003802 <ts_formatlength+0x6>
	}
	return length;
}
 800386a:	bd30      	pop	{r4, r5, pc}

0800386c <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 800386c:	b40f      	push	{r0, r1, r2, r3}
 800386e:	b5b0      	push	{r4, r5, r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	f107 0418 	add.w	r4, r7, #24
 8003878:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
	length = ts_formatlength(fmt, va);
 800387c:	4621      	mov	r1, r4
 800387e:	4628      	mov	r0, r5
*/
int iprintf(const char *fmt, ...)
{
	int length = 0;
	va_list va;
	va_start(va, fmt);
 8003880:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 8003882:	f7ff ffbb 	bl	80037fc <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 8003886:	3007      	adds	r0, #7
 8003888:	f020 0007 	bic.w	r0, r0, #7
 800388c:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
 8003890:	4622      	mov	r2, r4
 8003892:	4629      	mov	r1, r5
 8003894:	4668      	mov	r0, sp
	va_start(va, fmt);
	length = ts_formatlength(fmt, va);
	va_end(va);
	{
		char buf[length];
		va_start(va, fmt);
 8003896:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 8003898:	f7ff ff4c 	bl	8003734 <ts_formatstring>
		length = _write(1, buf, length);
 800389c:	4669      	mov	r1, sp
 800389e:	4602      	mov	r2, r0
 80038a0:	2001      	movs	r0, #1
 80038a2:	f7ff fef1 	bl	8003688 <_write>
		va_end(va);
	}
	return length;
}
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80038ae:	b004      	add	sp, #16
 80038b0:	4770      	bx	lr
	...

080038b4 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	4605      	mov	r5, r0
	int length = strlen(s);
 80038b8:	f7fc fc52 	bl	8000160 <strlen>
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 80038bc:	4629      	mov	r1, r5
 80038be:	4602      	mov	r2, r0
**
**===========================================================================
*/
int puts(const char *s)
{
	int length = strlen(s);
 80038c0:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 80038c2:	2001      	movs	r0, #1
 80038c4:	f7ff fee0 	bl	8003688 <_write>
	numbytes += _write(1, "\n", 1);
 80038c8:	2201      	movs	r2, #1
{
	int length = strlen(s);
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 80038ca:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 80038cc:	4905      	ldr	r1, [pc, #20]	; (80038e4 <puts+0x30>)
 80038ce:	4610      	mov	r0, r2
 80038d0:	f7ff feda 	bl	8003688 <_write>
	else
	{
		res = EOF;
	}

	return res;
 80038d4:	3401      	adds	r4, #1
 80038d6:	4428      	add	r0, r5
}
 80038d8:	1b00      	subs	r0, r0, r4
 80038da:	bf18      	it	ne
 80038dc:	f04f 30ff 	movne.w	r0, #4294967295
 80038e0:	bd38      	pop	{r3, r4, r5, pc}
 80038e2:	bf00      	nop
 80038e4:	080041ae 	.word	0x080041ae

080038e8 <__libc_init_array>:
 80038e8:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <__libc_init_array+0x3c>)
 80038ea:	b570      	push	{r4, r5, r6, lr}
 80038ec:	461e      	mov	r6, r3
 80038ee:	4c0e      	ldr	r4, [pc, #56]	; (8003928 <__libc_init_array+0x40>)
 80038f0:	2500      	movs	r5, #0
 80038f2:	1ae4      	subs	r4, r4, r3
 80038f4:	10a4      	asrs	r4, r4, #2
 80038f6:	42a5      	cmp	r5, r4
 80038f8:	d004      	beq.n	8003904 <__libc_init_array+0x1c>
 80038fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038fe:	4798      	blx	r3
 8003900:	3501      	adds	r5, #1
 8003902:	e7f8      	b.n	80038f6 <__libc_init_array+0xe>
 8003904:	f000 fbba 	bl	800407c <_init>
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <__libc_init_array+0x44>)
 800390a:	4c09      	ldr	r4, [pc, #36]	; (8003930 <__libc_init_array+0x48>)
 800390c:	461e      	mov	r6, r3
 800390e:	1ae4      	subs	r4, r4, r3
 8003910:	10a4      	asrs	r4, r4, #2
 8003912:	2500      	movs	r5, #0
 8003914:	42a5      	cmp	r5, r4
 8003916:	d004      	beq.n	8003922 <__libc_init_array+0x3a>
 8003918:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800391c:	4798      	blx	r3
 800391e:	3501      	adds	r5, #1
 8003920:	e7f8      	b.n	8003914 <__libc_init_array+0x2c>
 8003922:	bd70      	pop	{r4, r5, r6, pc}
 8003924:	080042dc 	.word	0x080042dc
 8003928:	080042dc 	.word	0x080042dc
 800392c:	080042dc 	.word	0x080042dc
 8003930:	080042e0 	.word	0x080042e0

08003934 <malloc>:
 8003934:	4b02      	ldr	r3, [pc, #8]	; (8003940 <malloc+0xc>)
 8003936:	4601      	mov	r1, r0
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	f000 b803 	b.w	8003944 <_malloc_r>
 800393e:	bf00      	nop
 8003940:	2000050c 	.word	0x2000050c

08003944 <_malloc_r>:
 8003944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003948:	f101 040b 	add.w	r4, r1, #11
 800394c:	2c16      	cmp	r4, #22
 800394e:	b085      	sub	sp, #20
 8003950:	4681      	mov	r9, r0
 8003952:	d903      	bls.n	800395c <_malloc_r+0x18>
 8003954:	f034 0407 	bics.w	r4, r4, #7
 8003958:	d501      	bpl.n	800395e <_malloc_r+0x1a>
 800395a:	e002      	b.n	8003962 <_malloc_r+0x1e>
 800395c:	2410      	movs	r4, #16
 800395e:	428c      	cmp	r4, r1
 8003960:	d203      	bcs.n	800396a <_malloc_r+0x26>
 8003962:	230c      	movs	r3, #12
 8003964:	f8c9 3000 	str.w	r3, [r9]
 8003968:	e1e7      	b.n	8003d3a <_malloc_r+0x3f6>
 800396a:	4648      	mov	r0, r9
 800396c:	f000 fa34 	bl	8003dd8 <__malloc_lock>
 8003970:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8003974:	4d9d      	ldr	r5, [pc, #628]	; (8003bec <_malloc_r+0x2a8>)
 8003976:	d217      	bcs.n	80039a8 <_malloc_r+0x64>
 8003978:	f104 0208 	add.w	r2, r4, #8
 800397c:	442a      	add	r2, r5
 800397e:	6856      	ldr	r6, [r2, #4]
 8003980:	f1a2 0108 	sub.w	r1, r2, #8
 8003984:	428e      	cmp	r6, r1
 8003986:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800398a:	d102      	bne.n	8003992 <_malloc_r+0x4e>
 800398c:	68d6      	ldr	r6, [r2, #12]
 800398e:	42b2      	cmp	r2, r6
 8003990:	d008      	beq.n	80039a4 <_malloc_r+0x60>
 8003992:	6873      	ldr	r3, [r6, #4]
 8003994:	68f2      	ldr	r2, [r6, #12]
 8003996:	68b1      	ldr	r1, [r6, #8]
 8003998:	f023 0303 	bic.w	r3, r3, #3
 800399c:	60ca      	str	r2, [r1, #12]
 800399e:	4433      	add	r3, r6
 80039a0:	6091      	str	r1, [r2, #8]
 80039a2:	e02f      	b.n	8003a04 <_malloc_r+0xc0>
 80039a4:	3302      	adds	r3, #2
 80039a6:	e03d      	b.n	8003a24 <_malloc_r+0xe0>
 80039a8:	0a63      	lsrs	r3, r4, #9
 80039aa:	d01a      	beq.n	80039e2 <_malloc_r+0x9e>
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d802      	bhi.n	80039b6 <_malloc_r+0x72>
 80039b0:	09a3      	lsrs	r3, r4, #6
 80039b2:	3338      	adds	r3, #56	; 0x38
 80039b4:	e018      	b.n	80039e8 <_malloc_r+0xa4>
 80039b6:	2b14      	cmp	r3, #20
 80039b8:	d801      	bhi.n	80039be <_malloc_r+0x7a>
 80039ba:	335b      	adds	r3, #91	; 0x5b
 80039bc:	e014      	b.n	80039e8 <_malloc_r+0xa4>
 80039be:	2b54      	cmp	r3, #84	; 0x54
 80039c0:	d802      	bhi.n	80039c8 <_malloc_r+0x84>
 80039c2:	0b23      	lsrs	r3, r4, #12
 80039c4:	336e      	adds	r3, #110	; 0x6e
 80039c6:	e00f      	b.n	80039e8 <_malloc_r+0xa4>
 80039c8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80039cc:	d802      	bhi.n	80039d4 <_malloc_r+0x90>
 80039ce:	0be3      	lsrs	r3, r4, #15
 80039d0:	3377      	adds	r3, #119	; 0x77
 80039d2:	e009      	b.n	80039e8 <_malloc_r+0xa4>
 80039d4:	f240 5254 	movw	r2, #1364	; 0x554
 80039d8:	4293      	cmp	r3, r2
 80039da:	d804      	bhi.n	80039e6 <_malloc_r+0xa2>
 80039dc:	0ca3      	lsrs	r3, r4, #18
 80039de:	337c      	adds	r3, #124	; 0x7c
 80039e0:	e002      	b.n	80039e8 <_malloc_r+0xa4>
 80039e2:	233f      	movs	r3, #63	; 0x3f
 80039e4:	e000      	b.n	80039e8 <_malloc_r+0xa4>
 80039e6:	237e      	movs	r3, #126	; 0x7e
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80039ee:	f1a2 0008 	sub.w	r0, r2, #8
 80039f2:	6856      	ldr	r6, [r2, #4]
 80039f4:	e00c      	b.n	8003a10 <_malloc_r+0xcc>
 80039f6:	2900      	cmp	r1, #0
 80039f8:	68f1      	ldr	r1, [r6, #12]
 80039fa:	db08      	blt.n	8003a0e <_malloc_r+0xca>
 80039fc:	68b3      	ldr	r3, [r6, #8]
 80039fe:	60d9      	str	r1, [r3, #12]
 8003a00:	608b      	str	r3, [r1, #8]
 8003a02:	18b3      	adds	r3, r6, r2
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	e1a0      	b.n	8003d50 <_malloc_r+0x40c>
 8003a0e:	460e      	mov	r6, r1
 8003a10:	4286      	cmp	r6, r0
 8003a12:	d006      	beq.n	8003a22 <_malloc_r+0xde>
 8003a14:	6872      	ldr	r2, [r6, #4]
 8003a16:	f022 0203 	bic.w	r2, r2, #3
 8003a1a:	1b11      	subs	r1, r2, r4
 8003a1c:	290f      	cmp	r1, #15
 8003a1e:	ddea      	ble.n	80039f6 <_malloc_r+0xb2>
 8003a20:	3b01      	subs	r3, #1
 8003a22:	3301      	adds	r3, #1
 8003a24:	4a71      	ldr	r2, [pc, #452]	; (8003bec <_malloc_r+0x2a8>)
 8003a26:	692e      	ldr	r6, [r5, #16]
 8003a28:	f102 0708 	add.w	r7, r2, #8
 8003a2c:	42be      	cmp	r6, r7
 8003a2e:	4639      	mov	r1, r7
 8003a30:	d079      	beq.n	8003b26 <_malloc_r+0x1e2>
 8003a32:	6870      	ldr	r0, [r6, #4]
 8003a34:	f020 0003 	bic.w	r0, r0, #3
 8003a38:	ebc4 0e00 	rsb	lr, r4, r0
 8003a3c:	f1be 0f0f 	cmp.w	lr, #15
 8003a40:	dd0d      	ble.n	8003a5e <_malloc_r+0x11a>
 8003a42:	1933      	adds	r3, r6, r4
 8003a44:	f044 0401 	orr.w	r4, r4, #1
 8003a48:	6074      	str	r4, [r6, #4]
 8003a4a:	6153      	str	r3, [r2, #20]
 8003a4c:	6113      	str	r3, [r2, #16]
 8003a4e:	f04e 0201 	orr.w	r2, lr, #1
 8003a52:	60df      	str	r7, [r3, #12]
 8003a54:	609f      	str	r7, [r3, #8]
 8003a56:	605a      	str	r2, [r3, #4]
 8003a58:	f843 e00e 	str.w	lr, [r3, lr]
 8003a5c:	e178      	b.n	8003d50 <_malloc_r+0x40c>
 8003a5e:	f1be 0f00 	cmp.w	lr, #0
 8003a62:	6157      	str	r7, [r2, #20]
 8003a64:	6117      	str	r7, [r2, #16]
 8003a66:	db05      	blt.n	8003a74 <_malloc_r+0x130>
 8003a68:	4430      	add	r0, r6
 8003a6a:	6843      	ldr	r3, [r0, #4]
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6043      	str	r3, [r0, #4]
 8003a72:	e16d      	b.n	8003d50 <_malloc_r+0x40c>
 8003a74:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003a78:	d215      	bcs.n	8003aa6 <_malloc_r+0x162>
 8003a7a:	08c0      	lsrs	r0, r0, #3
 8003a7c:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8003a80:	2701      	movs	r7, #1
 8003a82:	fa07 fe0e 	lsl.w	lr, r7, lr
 8003a86:	6857      	ldr	r7, [r2, #4]
 8003a88:	3001      	adds	r0, #1
 8003a8a:	ea4e 0707 	orr.w	r7, lr, r7
 8003a8e:	6057      	str	r7, [r2, #4]
 8003a90:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8003a94:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8003a98:	3f08      	subs	r7, #8
 8003a9a:	60f7      	str	r7, [r6, #12]
 8003a9c:	f8c6 e008 	str.w	lr, [r6, #8]
 8003aa0:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8003aa4:	e03d      	b.n	8003b22 <_malloc_r+0x1de>
 8003aa6:	0a42      	lsrs	r2, r0, #9
 8003aa8:	2a04      	cmp	r2, #4
 8003aaa:	d802      	bhi.n	8003ab2 <_malloc_r+0x16e>
 8003aac:	0982      	lsrs	r2, r0, #6
 8003aae:	3238      	adds	r2, #56	; 0x38
 8003ab0:	e015      	b.n	8003ade <_malloc_r+0x19a>
 8003ab2:	2a14      	cmp	r2, #20
 8003ab4:	d801      	bhi.n	8003aba <_malloc_r+0x176>
 8003ab6:	325b      	adds	r2, #91	; 0x5b
 8003ab8:	e011      	b.n	8003ade <_malloc_r+0x19a>
 8003aba:	2a54      	cmp	r2, #84	; 0x54
 8003abc:	d802      	bhi.n	8003ac4 <_malloc_r+0x180>
 8003abe:	0b02      	lsrs	r2, r0, #12
 8003ac0:	326e      	adds	r2, #110	; 0x6e
 8003ac2:	e00c      	b.n	8003ade <_malloc_r+0x19a>
 8003ac4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003ac8:	d802      	bhi.n	8003ad0 <_malloc_r+0x18c>
 8003aca:	0bc2      	lsrs	r2, r0, #15
 8003acc:	3277      	adds	r2, #119	; 0x77
 8003ace:	e006      	b.n	8003ade <_malloc_r+0x19a>
 8003ad0:	f240 5754 	movw	r7, #1364	; 0x554
 8003ad4:	42ba      	cmp	r2, r7
 8003ad6:	bf9a      	itte	ls
 8003ad8:	0c82      	lsrls	r2, r0, #18
 8003ada:	327c      	addls	r2, #124	; 0x7c
 8003adc:	227e      	movhi	r2, #126	; 0x7e
 8003ade:	1c57      	adds	r7, r2, #1
 8003ae0:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8003ae4:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8003ae8:	45be      	cmp	lr, r7
 8003aea:	f8df c100 	ldr.w	ip, [pc, #256]	; 8003bec <_malloc_r+0x2a8>
 8003aee:	d10d      	bne.n	8003b0c <_malloc_r+0x1c8>
 8003af0:	2001      	movs	r0, #1
 8003af2:	1092      	asrs	r2, r2, #2
 8003af4:	fa00 f202 	lsl.w	r2, r0, r2
 8003af8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8003afc:	4310      	orrs	r0, r2
 8003afe:	f8cc 0004 	str.w	r0, [ip, #4]
 8003b02:	4672      	mov	r2, lr
 8003b04:	e009      	b.n	8003b1a <_malloc_r+0x1d6>
 8003b06:	68bf      	ldr	r7, [r7, #8]
 8003b08:	45be      	cmp	lr, r7
 8003b0a:	d004      	beq.n	8003b16 <_malloc_r+0x1d2>
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	f022 0203 	bic.w	r2, r2, #3
 8003b12:	4290      	cmp	r0, r2
 8003b14:	d3f7      	bcc.n	8003b06 <_malloc_r+0x1c2>
 8003b16:	46be      	mov	lr, r7
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	60f2      	str	r2, [r6, #12]
 8003b1c:	f8c6 e008 	str.w	lr, [r6, #8]
 8003b20:	6096      	str	r6, [r2, #8]
 8003b22:	f8ce 600c 	str.w	r6, [lr, #12]
 8003b26:	2001      	movs	r0, #1
 8003b28:	109a      	asrs	r2, r3, #2
 8003b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b2e:	6868      	ldr	r0, [r5, #4]
 8003b30:	4282      	cmp	r2, r0
 8003b32:	d85d      	bhi.n	8003bf0 <_malloc_r+0x2ac>
 8003b34:	4202      	tst	r2, r0
 8003b36:	d106      	bne.n	8003b46 <_malloc_r+0x202>
 8003b38:	f023 0303 	bic.w	r3, r3, #3
 8003b3c:	0052      	lsls	r2, r2, #1
 8003b3e:	4202      	tst	r2, r0
 8003b40:	f103 0304 	add.w	r3, r3, #4
 8003b44:	d0fa      	beq.n	8003b3c <_malloc_r+0x1f8>
 8003b46:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 8003b4a:	46c2      	mov	sl, r8
 8003b4c:	469c      	mov	ip, r3
 8003b4e:	f8da 600c 	ldr.w	r6, [sl, #12]
 8003b52:	4556      	cmp	r6, sl
 8003b54:	d02c      	beq.n	8003bb0 <_malloc_r+0x26c>
 8003b56:	6870      	ldr	r0, [r6, #4]
 8003b58:	68f7      	ldr	r7, [r6, #12]
 8003b5a:	f020 0003 	bic.w	r0, r0, #3
 8003b5e:	ebc4 0e00 	rsb	lr, r4, r0
 8003b62:	f1be 0f0f 	cmp.w	lr, #15
 8003b66:	dd11      	ble.n	8003b8c <_malloc_r+0x248>
 8003b68:	1933      	adds	r3, r6, r4
 8003b6a:	f044 0401 	orr.w	r4, r4, #1
 8003b6e:	6074      	str	r4, [r6, #4]
 8003b70:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8003b74:	60d7      	str	r7, [r2, #12]
 8003b76:	60ba      	str	r2, [r7, #8]
 8003b78:	f04e 0201 	orr.w	r2, lr, #1
 8003b7c:	616b      	str	r3, [r5, #20]
 8003b7e:	612b      	str	r3, [r5, #16]
 8003b80:	60d9      	str	r1, [r3, #12]
 8003b82:	6099      	str	r1, [r3, #8]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	f843 e00e 	str.w	lr, [r3, lr]
 8003b8a:	e00b      	b.n	8003ba4 <_malloc_r+0x260>
 8003b8c:	f1be 0f00 	cmp.w	lr, #0
 8003b90:	db0c      	blt.n	8003bac <_malloc_r+0x268>
 8003b92:	1833      	adds	r3, r6, r0
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	605a      	str	r2, [r3, #4]
 8003b9c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8003ba0:	60df      	str	r7, [r3, #12]
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	4648      	mov	r0, r9
 8003ba6:	f000 f918 	bl	8003dda <__malloc_unlock>
 8003baa:	e0d5      	b.n	8003d58 <_malloc_r+0x414>
 8003bac:	463e      	mov	r6, r7
 8003bae:	e7d0      	b.n	8003b52 <_malloc_r+0x20e>
 8003bb0:	f10c 0c01 	add.w	ip, ip, #1
 8003bb4:	f01c 0f03 	tst.w	ip, #3
 8003bb8:	f10a 0a08 	add.w	sl, sl, #8
 8003bbc:	d1c7      	bne.n	8003b4e <_malloc_r+0x20a>
 8003bbe:	0798      	lsls	r0, r3, #30
 8003bc0:	d104      	bne.n	8003bcc <_malloc_r+0x288>
 8003bc2:	686b      	ldr	r3, [r5, #4]
 8003bc4:	ea23 0302 	bic.w	r3, r3, r2
 8003bc8:	606b      	str	r3, [r5, #4]
 8003bca:	e004      	b.n	8003bd6 <_malloc_r+0x292>
 8003bcc:	f858 0908 	ldr.w	r0, [r8], #-8
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	4580      	cmp	r8, r0
 8003bd4:	d0f3      	beq.n	8003bbe <_malloc_r+0x27a>
 8003bd6:	6868      	ldr	r0, [r5, #4]
 8003bd8:	0052      	lsls	r2, r2, #1
 8003bda:	4282      	cmp	r2, r0
 8003bdc:	d808      	bhi.n	8003bf0 <_malloc_r+0x2ac>
 8003bde:	b13a      	cbz	r2, 8003bf0 <_malloc_r+0x2ac>
 8003be0:	4663      	mov	r3, ip
 8003be2:	4202      	tst	r2, r0
 8003be4:	d1af      	bne.n	8003b46 <_malloc_r+0x202>
 8003be6:	3304      	adds	r3, #4
 8003be8:	0052      	lsls	r2, r2, #1
 8003bea:	e7fa      	b.n	8003be2 <_malloc_r+0x29e>
 8003bec:	2000000c 	.word	0x2000000c
 8003bf0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8003bf4:	f8db 6004 	ldr.w	r6, [fp, #4]
 8003bf8:	f026 0603 	bic.w	r6, r6, #3
 8003bfc:	42b4      	cmp	r4, r6
 8003bfe:	d803      	bhi.n	8003c08 <_malloc_r+0x2c4>
 8003c00:	1b33      	subs	r3, r6, r4
 8003c02:	2b0f      	cmp	r3, #15
 8003c04:	f300 809b 	bgt.w	8003d3e <_malloc_r+0x3fa>
 8003c08:	4a55      	ldr	r2, [pc, #340]	; (8003d60 <_malloc_r+0x41c>)
 8003c0a:	4956      	ldr	r1, [pc, #344]	; (8003d64 <_malloc_r+0x420>)
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	6808      	ldr	r0, [r1, #0]
 8003c10:	f102 0810 	add.w	r8, r2, #16
 8003c14:	4a54      	ldr	r2, [pc, #336]	; (8003d68 <_malloc_r+0x424>)
 8003c16:	3001      	adds	r0, #1
 8003c18:	9101      	str	r1, [sp, #4]
 8003c1a:	44a0      	add	r8, r4
 8003c1c:	bf1f      	itttt	ne
 8003c1e:	f102 31ff 	addne.w	r1, r2, #4294967295
 8003c22:	4488      	addne	r8, r1
 8003c24:	4251      	negne	r1, r2
 8003c26:	ea01 0808 	andne.w	r8, r1, r8
 8003c2a:	eb0b 0306 	add.w	r3, fp, r6
 8003c2e:	4641      	mov	r1, r8
 8003c30:	4648      	mov	r0, r9
 8003c32:	9203      	str	r2, [sp, #12]
 8003c34:	9302      	str	r3, [sp, #8]
 8003c36:	f000 f8d1 	bl	8003ddc <_sbrk_r>
 8003c3a:	1c42      	adds	r2, r0, #1
 8003c3c:	4607      	mov	r7, r0
 8003c3e:	d06f      	beq.n	8003d20 <_malloc_r+0x3dc>
 8003c40:	9b02      	ldr	r3, [sp, #8]
 8003c42:	9a03      	ldr	r2, [sp, #12]
 8003c44:	4283      	cmp	r3, r0
 8003c46:	d901      	bls.n	8003c4c <_malloc_r+0x308>
 8003c48:	45ab      	cmp	fp, r5
 8003c4a:	d169      	bne.n	8003d20 <_malloc_r+0x3dc>
 8003c4c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8003d74 <_malloc_r+0x430>
 8003c50:	42bb      	cmp	r3, r7
 8003c52:	f8da 0000 	ldr.w	r0, [sl]
 8003c56:	f8df c120 	ldr.w	ip, [pc, #288]	; 8003d78 <_malloc_r+0x434>
 8003c5a:	4440      	add	r0, r8
 8003c5c:	f8ca 0000 	str.w	r0, [sl]
 8003c60:	d108      	bne.n	8003c74 <_malloc_r+0x330>
 8003c62:	ea13 0f0c 	tst.w	r3, ip
 8003c66:	d105      	bne.n	8003c74 <_malloc_r+0x330>
 8003c68:	68ab      	ldr	r3, [r5, #8]
 8003c6a:	4446      	add	r6, r8
 8003c6c:	f046 0601 	orr.w	r6, r6, #1
 8003c70:	605e      	str	r6, [r3, #4]
 8003c72:	e049      	b.n	8003d08 <_malloc_r+0x3c4>
 8003c74:	9901      	ldr	r1, [sp, #4]
 8003c76:	f8d1 e000 	ldr.w	lr, [r1]
 8003c7a:	f1be 3fff 	cmp.w	lr, #4294967295
 8003c7e:	bf15      	itete	ne
 8003c80:	1afb      	subne	r3, r7, r3
 8003c82:	4b38      	ldreq	r3, [pc, #224]	; (8003d64 <_malloc_r+0x420>)
 8003c84:	181b      	addne	r3, r3, r0
 8003c86:	601f      	streq	r7, [r3, #0]
 8003c88:	bf18      	it	ne
 8003c8a:	f8ca 3000 	strne.w	r3, [sl]
 8003c8e:	f017 0307 	ands.w	r3, r7, #7
 8003c92:	bf1c      	itt	ne
 8003c94:	f1c3 0308 	rsbne	r3, r3, #8
 8003c98:	18ff      	addne	r7, r7, r3
 8003c9a:	44b8      	add	r8, r7
 8003c9c:	441a      	add	r2, r3
 8003c9e:	ea08 080c 	and.w	r8, r8, ip
 8003ca2:	ebc8 0802 	rsb	r8, r8, r2
 8003ca6:	4641      	mov	r1, r8
 8003ca8:	4648      	mov	r0, r9
 8003caa:	f000 f897 	bl	8003ddc <_sbrk_r>
 8003cae:	1c43      	adds	r3, r0, #1
 8003cb0:	bf04      	itt	eq
 8003cb2:	4638      	moveq	r0, r7
 8003cb4:	f04f 0800 	moveq.w	r8, #0
 8003cb8:	f8da 3000 	ldr.w	r3, [sl]
 8003cbc:	1bc2      	subs	r2, r0, r7
 8003cbe:	4442      	add	r2, r8
 8003cc0:	4443      	add	r3, r8
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	45ab      	cmp	fp, r5
 8003cc8:	60af      	str	r7, [r5, #8]
 8003cca:	f8ca 3000 	str.w	r3, [sl]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	d01a      	beq.n	8003d08 <_malloc_r+0x3c4>
 8003cd2:	2e0f      	cmp	r6, #15
 8003cd4:	d802      	bhi.n	8003cdc <_malloc_r+0x398>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	e021      	b.n	8003d20 <_malloc_r+0x3dc>
 8003cdc:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003ce0:	3e0c      	subs	r6, #12
 8003ce2:	f026 0607 	bic.w	r6, r6, #7
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	4333      	orrs	r3, r6
 8003cec:	f8cb 3004 	str.w	r3, [fp, #4]
 8003cf0:	2205      	movs	r2, #5
 8003cf2:	eb0b 0306 	add.w	r3, fp, r6
 8003cf6:	2e0f      	cmp	r6, #15
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	d904      	bls.n	8003d08 <_malloc_r+0x3c4>
 8003cfe:	f10b 0108 	add.w	r1, fp, #8
 8003d02:	4648      	mov	r0, r9
 8003d04:	f000 f8fc 	bl	8003f00 <_free_r>
 8003d08:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <_malloc_r+0x428>)
 8003d0a:	f8da 3000 	ldr.w	r3, [sl]
 8003d0e:	6811      	ldr	r1, [r2, #0]
 8003d10:	428b      	cmp	r3, r1
 8003d12:	bf88      	it	hi
 8003d14:	6013      	strhi	r3, [r2, #0]
 8003d16:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <_malloc_r+0x42c>)
 8003d18:	6811      	ldr	r1, [r2, #0]
 8003d1a:	428b      	cmp	r3, r1
 8003d1c:	bf88      	it	hi
 8003d1e:	6013      	strhi	r3, [r2, #0]
 8003d20:	68ab      	ldr	r3, [r5, #8]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	f022 0203 	bic.w	r2, r2, #3
 8003d28:	4294      	cmp	r4, r2
 8003d2a:	eba2 0304 	sub.w	r3, r2, r4
 8003d2e:	d801      	bhi.n	8003d34 <_malloc_r+0x3f0>
 8003d30:	2b0f      	cmp	r3, #15
 8003d32:	dc04      	bgt.n	8003d3e <_malloc_r+0x3fa>
 8003d34:	4648      	mov	r0, r9
 8003d36:	f000 f850 	bl	8003dda <__malloc_unlock>
 8003d3a:	2600      	movs	r6, #0
 8003d3c:	e00c      	b.n	8003d58 <_malloc_r+0x414>
 8003d3e:	68ae      	ldr	r6, [r5, #8]
 8003d40:	f044 0201 	orr.w	r2, r4, #1
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	4434      	add	r4, r6
 8003d4a:	6072      	str	r2, [r6, #4]
 8003d4c:	60ac      	str	r4, [r5, #8]
 8003d4e:	6063      	str	r3, [r4, #4]
 8003d50:	4648      	mov	r0, r9
 8003d52:	f000 f842 	bl	8003dda <__malloc_unlock>
 8003d56:	3608      	adds	r6, #8
 8003d58:	4630      	mov	r0, r6
 8003d5a:	b005      	add	sp, #20
 8003d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d60:	200012e0 	.word	0x200012e0
 8003d64:	20000418 	.word	0x20000418
 8003d68:	00000080 	.word	0x00000080
 8003d6c:	200012dc 	.word	0x200012dc
 8003d70:	200012d8 	.word	0x200012d8
 8003d74:	200012e4 	.word	0x200012e4
 8003d78:	0000007f 	.word	0x0000007f

08003d7c <memcpy>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	1e43      	subs	r3, r0, #1
 8003d80:	440a      	add	r2, r1
 8003d82:	4291      	cmp	r1, r2
 8003d84:	d004      	beq.n	8003d90 <memcpy+0x14>
 8003d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d8e:	e7f8      	b.n	8003d82 <memcpy+0x6>
 8003d90:	bd10      	pop	{r4, pc}

08003d92 <memmove>:
 8003d92:	4288      	cmp	r0, r1
 8003d94:	b510      	push	{r4, lr}
 8003d96:	eb01 0302 	add.w	r3, r1, r2
 8003d9a:	d801      	bhi.n	8003da0 <memmove+0xe>
 8003d9c:	1e42      	subs	r2, r0, #1
 8003d9e:	e00b      	b.n	8003db8 <memmove+0x26>
 8003da0:	4298      	cmp	r0, r3
 8003da2:	d2fb      	bcs.n	8003d9c <memmove+0xa>
 8003da4:	1881      	adds	r1, r0, r2
 8003da6:	1ad2      	subs	r2, r2, r3
 8003da8:	42d3      	cmn	r3, r2
 8003daa:	d004      	beq.n	8003db6 <memmove+0x24>
 8003dac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003db0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003db4:	e7f8      	b.n	8003da8 <memmove+0x16>
 8003db6:	bd10      	pop	{r4, pc}
 8003db8:	4299      	cmp	r1, r3
 8003dba:	d004      	beq.n	8003dc6 <memmove+0x34>
 8003dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dc0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003dc4:	e7f8      	b.n	8003db8 <memmove+0x26>
 8003dc6:	bd10      	pop	{r4, pc}

08003dc8 <memset>:
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4402      	add	r2, r0
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d002      	beq.n	8003dd6 <memset+0xe>
 8003dd0:	f803 1b01 	strb.w	r1, [r3], #1
 8003dd4:	e7fa      	b.n	8003dcc <memset+0x4>
 8003dd6:	4770      	bx	lr

08003dd8 <__malloc_lock>:
 8003dd8:	4770      	bx	lr

08003dda <__malloc_unlock>:
 8003dda:	4770      	bx	lr

08003ddc <_sbrk_r>:
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	4c06      	ldr	r4, [pc, #24]	; (8003df8 <_sbrk_r+0x1c>)
 8003de0:	2300      	movs	r3, #0
 8003de2:	4605      	mov	r5, r0
 8003de4:	4608      	mov	r0, r1
 8003de6:	6023      	str	r3, [r4, #0]
 8003de8:	f7ff fc6c 	bl	80036c4 <_sbrk>
 8003dec:	1c43      	adds	r3, r0, #1
 8003dee:	d102      	bne.n	8003df6 <_sbrk_r+0x1a>
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	b103      	cbz	r3, 8003df6 <_sbrk_r+0x1a>
 8003df4:	602b      	str	r3, [r5, #0]
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
 8003df8:	20001984 	.word	0x20001984

08003dfc <strchr>:
 8003dfc:	b2c9      	uxtb	r1, r1
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e04:	b11a      	cbz	r2, 8003e0e <strchr+0x12>
 8003e06:	4291      	cmp	r1, r2
 8003e08:	d1f9      	bne.n	8003dfe <strchr+0x2>
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	4770      	bx	lr
 8003e0e:	2900      	cmp	r1, #0
 8003e10:	bf0c      	ite	eq
 8003e12:	4618      	moveq	r0, r3
 8003e14:	2000      	movne	r0, #0
 8003e16:	4770      	bx	lr

08003e18 <strcpy>:
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e1e:	f803 2b01 	strb.w	r2, [r3], #1
 8003e22:	2a00      	cmp	r2, #0
 8003e24:	d1f9      	bne.n	8003e1a <strcpy+0x2>
 8003e26:	4770      	bx	lr

08003e28 <strncmp>:
 8003e28:	b530      	push	{r4, r5, lr}
 8003e2a:	b182      	cbz	r2, 8003e4e <strncmp+0x26>
 8003e2c:	1e45      	subs	r5, r0, #1
 8003e2e:	3901      	subs	r1, #1
 8003e30:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003e34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003e38:	42a3      	cmp	r3, r4
 8003e3a:	d106      	bne.n	8003e4a <strncmp+0x22>
 8003e3c:	43ec      	mvns	r4, r5
 8003e3e:	4414      	add	r4, r2
 8003e40:	42e0      	cmn	r0, r4
 8003e42:	d001      	beq.n	8003e48 <strncmp+0x20>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f3      	bne.n	8003e30 <strncmp+0x8>
 8003e48:	461c      	mov	r4, r3
 8003e4a:	1b18      	subs	r0, r3, r4
 8003e4c:	bd30      	pop	{r4, r5, pc}
 8003e4e:	4610      	mov	r0, r2
 8003e50:	bd30      	pop	{r4, r5, pc}
	...

08003e54 <_malloc_trim_r>:
 8003e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e58:	4689      	mov	r9, r1
 8003e5a:	4f25      	ldr	r7, [pc, #148]	; (8003ef0 <_malloc_trim_r+0x9c>)
 8003e5c:	4606      	mov	r6, r0
 8003e5e:	f7ff ffbb 	bl	8003dd8 <__malloc_lock>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8003efc <_malloc_trim_r+0xa8>
 8003e68:	685d      	ldr	r5, [r3, #4]
 8003e6a:	f1a8 0411 	sub.w	r4, r8, #17
 8003e6e:	f025 0503 	bic.w	r5, r5, #3
 8003e72:	442c      	add	r4, r5
 8003e74:	ebc9 0404 	rsb	r4, r9, r4
 8003e78:	fbb4 f4f8 	udiv	r4, r4, r8
 8003e7c:	3c01      	subs	r4, #1
 8003e7e:	fb08 f404 	mul.w	r4, r8, r4
 8003e82:	4544      	cmp	r4, r8
 8003e84:	da05      	bge.n	8003e92 <_malloc_trim_r+0x3e>
 8003e86:	4630      	mov	r0, r6
 8003e88:	f7ff ffa7 	bl	8003dda <__malloc_unlock>
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e92:	2100      	movs	r1, #0
 8003e94:	4630      	mov	r0, r6
 8003e96:	f7ff ffa1 	bl	8003ddc <_sbrk_r>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	442b      	add	r3, r5
 8003e9e:	4298      	cmp	r0, r3
 8003ea0:	d1f1      	bne.n	8003e86 <_malloc_trim_r+0x32>
 8003ea2:	4261      	negs	r1, r4
 8003ea4:	4630      	mov	r0, r6
 8003ea6:	f7ff ff99 	bl	8003ddc <_sbrk_r>
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d110      	bne.n	8003ed0 <_malloc_trim_r+0x7c>
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	f7ff ff93 	bl	8003ddc <_sbrk_r>
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	1a83      	subs	r3, r0, r2
 8003eba:	2b0f      	cmp	r3, #15
 8003ebc:	dde3      	ble.n	8003e86 <_malloc_trim_r+0x32>
 8003ebe:	490d      	ldr	r1, [pc, #52]	; (8003ef4 <_malloc_trim_r+0xa0>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6809      	ldr	r1, [r1, #0]
 8003ec6:	6053      	str	r3, [r2, #4]
 8003ec8:	1a40      	subs	r0, r0, r1
 8003eca:	490b      	ldr	r1, [pc, #44]	; (8003ef8 <_malloc_trim_r+0xa4>)
 8003ecc:	6008      	str	r0, [r1, #0]
 8003ece:	e7da      	b.n	8003e86 <_malloc_trim_r+0x32>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <_malloc_trim_r+0xa4>)
 8003ed4:	1b2d      	subs	r5, r5, r4
 8003ed6:	f045 0501 	orr.w	r5, r5, #1
 8003eda:	605d      	str	r5, [r3, #4]
 8003edc:	6813      	ldr	r3, [r2, #0]
 8003ede:	4630      	mov	r0, r6
 8003ee0:	1b1c      	subs	r4, r3, r4
 8003ee2:	6014      	str	r4, [r2, #0]
 8003ee4:	f7ff ff79 	bl	8003dda <__malloc_unlock>
 8003ee8:	2001      	movs	r0, #1
 8003eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eee:	bf00      	nop
 8003ef0:	2000000c 	.word	0x2000000c
 8003ef4:	20000418 	.word	0x20000418
 8003ef8:	200012e4 	.word	0x200012e4
 8003efc:	00000080 	.word	0x00000080

08003f00 <_free_r>:
 8003f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f04:	4604      	mov	r4, r0
 8003f06:	4688      	mov	r8, r1
 8003f08:	2900      	cmp	r1, #0
 8003f0a:	f000 80ad 	beq.w	8004068 <_free_r+0x168>
 8003f0e:	f7ff ff63 	bl	8003dd8 <__malloc_lock>
 8003f12:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8003f16:	4d55      	ldr	r5, [pc, #340]	; (800406c <_free_r+0x16c>)
 8003f18:	f022 0001 	bic.w	r0, r2, #1
 8003f1c:	f1a8 0308 	sub.w	r3, r8, #8
 8003f20:	181f      	adds	r7, r3, r0
 8003f22:	68a9      	ldr	r1, [r5, #8]
 8003f24:	687e      	ldr	r6, [r7, #4]
 8003f26:	428f      	cmp	r7, r1
 8003f28:	f026 0603 	bic.w	r6, r6, #3
 8003f2c:	f002 0201 	and.w	r2, r2, #1
 8003f30:	d11b      	bne.n	8003f6a <_free_r+0x6a>
 8003f32:	4430      	add	r0, r6
 8003f34:	b93a      	cbnz	r2, 8003f46 <_free_r+0x46>
 8003f36:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	6899      	ldr	r1, [r3, #8]
 8003f3e:	4410      	add	r0, r2
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	60ca      	str	r2, [r1, #12]
 8003f44:	6091      	str	r1, [r2, #8]
 8003f46:	f040 0201 	orr.w	r2, r0, #1
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	60ab      	str	r3, [r5, #8]
 8003f4e:	4b48      	ldr	r3, [pc, #288]	; (8004070 <_free_r+0x170>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4298      	cmp	r0, r3
 8003f54:	d304      	bcc.n	8003f60 <_free_r+0x60>
 8003f56:	4b47      	ldr	r3, [pc, #284]	; (8004074 <_free_r+0x174>)
 8003f58:	4620      	mov	r0, r4
 8003f5a:	6819      	ldr	r1, [r3, #0]
 8003f5c:	f7ff ff7a 	bl	8003e54 <_malloc_trim_r>
 8003f60:	4620      	mov	r0, r4
 8003f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f66:	f7ff bf38 	b.w	8003dda <__malloc_unlock>
 8003f6a:	607e      	str	r6, [r7, #4]
 8003f6c:	b97a      	cbnz	r2, 8003f8e <_free_r+0x8e>
 8003f6e:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8003f72:	f105 0e08 	add.w	lr, r5, #8
 8003f76:	1a5b      	subs	r3, r3, r1
 8003f78:	4408      	add	r0, r1
 8003f7a:	6899      	ldr	r1, [r3, #8]
 8003f7c:	4571      	cmp	r1, lr
 8003f7e:	d008      	beq.n	8003f92 <_free_r+0x92>
 8003f80:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8003f84:	f8c1 e00c 	str.w	lr, [r1, #12]
 8003f88:	f8ce 1008 	str.w	r1, [lr, #8]
 8003f8c:	e002      	b.n	8003f94 <_free_r+0x94>
 8003f8e:	2200      	movs	r2, #0
 8003f90:	e000      	b.n	8003f94 <_free_r+0x94>
 8003f92:	2201      	movs	r2, #1
 8003f94:	19b9      	adds	r1, r7, r6
 8003f96:	6849      	ldr	r1, [r1, #4]
 8003f98:	07c9      	lsls	r1, r1, #31
 8003f9a:	d40e      	bmi.n	8003fba <_free_r+0xba>
 8003f9c:	4430      	add	r0, r6
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	b942      	cbnz	r2, 8003fb4 <_free_r+0xb4>
 8003fa2:	4e35      	ldr	r6, [pc, #212]	; (8004078 <_free_r+0x178>)
 8003fa4:	42b1      	cmp	r1, r6
 8003fa6:	d105      	bne.n	8003fb4 <_free_r+0xb4>
 8003fa8:	616b      	str	r3, [r5, #20]
 8003faa:	612b      	str	r3, [r5, #16]
 8003fac:	2201      	movs	r2, #1
 8003fae:	60d9      	str	r1, [r3, #12]
 8003fb0:	6099      	str	r1, [r3, #8]
 8003fb2:	e002      	b.n	8003fba <_free_r+0xba>
 8003fb4:	68fe      	ldr	r6, [r7, #12]
 8003fb6:	60ce      	str	r6, [r1, #12]
 8003fb8:	60b1      	str	r1, [r6, #8]
 8003fba:	f040 0101 	orr.w	r1, r0, #1
 8003fbe:	6059      	str	r1, [r3, #4]
 8003fc0:	5018      	str	r0, [r3, r0]
 8003fc2:	2a00      	cmp	r2, #0
 8003fc4:	d1cc      	bne.n	8003f60 <_free_r+0x60>
 8003fc6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003fca:	d212      	bcs.n	8003ff2 <_free_r+0xf2>
 8003fcc:	08c0      	lsrs	r0, r0, #3
 8003fce:	1081      	asrs	r1, r0, #2
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	fa02 f101 	lsl.w	r1, r2, r1
 8003fd6:	686a      	ldr	r2, [r5, #4]
 8003fd8:	3001      	adds	r0, #1
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	606a      	str	r2, [r5, #4]
 8003fde:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8003fe2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8003fe6:	3a08      	subs	r2, #8
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	6099      	str	r1, [r3, #8]
 8003fec:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8003ff0:	e038      	b.n	8004064 <_free_r+0x164>
 8003ff2:	0a42      	lsrs	r2, r0, #9
 8003ff4:	2a04      	cmp	r2, #4
 8003ff6:	d802      	bhi.n	8003ffe <_free_r+0xfe>
 8003ff8:	0982      	lsrs	r2, r0, #6
 8003ffa:	3238      	adds	r2, #56	; 0x38
 8003ffc:	e015      	b.n	800402a <_free_r+0x12a>
 8003ffe:	2a14      	cmp	r2, #20
 8004000:	d801      	bhi.n	8004006 <_free_r+0x106>
 8004002:	325b      	adds	r2, #91	; 0x5b
 8004004:	e011      	b.n	800402a <_free_r+0x12a>
 8004006:	2a54      	cmp	r2, #84	; 0x54
 8004008:	d802      	bhi.n	8004010 <_free_r+0x110>
 800400a:	0b02      	lsrs	r2, r0, #12
 800400c:	326e      	adds	r2, #110	; 0x6e
 800400e:	e00c      	b.n	800402a <_free_r+0x12a>
 8004010:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004014:	d802      	bhi.n	800401c <_free_r+0x11c>
 8004016:	0bc2      	lsrs	r2, r0, #15
 8004018:	3277      	adds	r2, #119	; 0x77
 800401a:	e006      	b.n	800402a <_free_r+0x12a>
 800401c:	f240 5154 	movw	r1, #1364	; 0x554
 8004020:	428a      	cmp	r2, r1
 8004022:	bf9a      	itte	ls
 8004024:	0c82      	lsrls	r2, r0, #18
 8004026:	327c      	addls	r2, #124	; 0x7c
 8004028:	227e      	movhi	r2, #126	; 0x7e
 800402a:	1c51      	adds	r1, r2, #1
 800402c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8004030:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8004034:	428e      	cmp	r6, r1
 8004036:	4f0d      	ldr	r7, [pc, #52]	; (800406c <_free_r+0x16c>)
 8004038:	d10b      	bne.n	8004052 <_free_r+0x152>
 800403a:	2101      	movs	r1, #1
 800403c:	1092      	asrs	r2, r2, #2
 800403e:	fa01 f202 	lsl.w	r2, r1, r2
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4311      	orrs	r1, r2
 8004046:	6079      	str	r1, [r7, #4]
 8004048:	4631      	mov	r1, r6
 800404a:	e008      	b.n	800405e <_free_r+0x15e>
 800404c:	6889      	ldr	r1, [r1, #8]
 800404e:	428e      	cmp	r6, r1
 8004050:	d004      	beq.n	800405c <_free_r+0x15c>
 8004052:	684a      	ldr	r2, [r1, #4]
 8004054:	f022 0203 	bic.w	r2, r2, #3
 8004058:	4290      	cmp	r0, r2
 800405a:	d3f7      	bcc.n	800404c <_free_r+0x14c>
 800405c:	68ce      	ldr	r6, [r1, #12]
 800405e:	60de      	str	r6, [r3, #12]
 8004060:	6099      	str	r1, [r3, #8]
 8004062:	60b3      	str	r3, [r6, #8]
 8004064:	60cb      	str	r3, [r1, #12]
 8004066:	e77b      	b.n	8003f60 <_free_r+0x60>
 8004068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800406c:	2000000c 	.word	0x2000000c
 8004070:	20000414 	.word	0x20000414
 8004074:	200012e0 	.word	0x200012e0
 8004078:	20000014 	.word	0x20000014

0800407c <_init>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	bf00      	nop
 8004080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004082:	bc08      	pop	{r3}
 8004084:	469e      	mov	lr, r3
 8004086:	4770      	bx	lr

08004088 <_fini>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	bf00      	nop
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr
