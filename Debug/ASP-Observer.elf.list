
ASP-Observer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .shell_cmd    00000018  08004298  08004298  00014298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .init_array   00000004  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080042b4  080042b4  000142b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080042b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001470  2000000c  080042c4  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000147c  080042c4  0002147c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_line   000081f4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00014b8c  00000000  00000000  00028229  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003f78  00000000  00000000  0003cdb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ec0  00000000  00000000  00040d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001320  00000000  00000000  00041bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000bdc5  00000000  00000000  00042f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004cc3  00000000  00000000  0004ecd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00053998  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002a2c  00000000  00000000  00053a18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fa4 	.word	0x08003fa4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003fa4 	.word	0x08003fa4

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000170:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000172:	e003      	b.n	800017c <LoopCopyDataInit>

08000174 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000174:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000176:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000178:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800017a:	3104      	adds	r1, #4

0800017c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800017c:	480a      	ldr	r0, [pc, #40]	; (80001a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800017e:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000180:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000182:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000184:	d3f6      	bcc.n	8000174 <CopyDataInit>
  ldr r2, =_sbss
 8000186:	4a0a      	ldr	r2, [pc, #40]	; (80001b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000188:	e002      	b.n	8000190 <LoopFillZerobss>

0800018a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800018a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800018c:	f842 3b04 	str.w	r3, [r2], #4

08000190 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000190:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000192:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000194:	d3f9      	bcc.n	800018a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000196:	f000 f811 	bl	80001bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800019a:	f003 fe83 	bl	8003ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800019e:	f003 f885 	bl	80032ac <main>
  bx lr
 80001a2:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80001a4:	080042b8 	.word	0x080042b8
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80001a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80001ac:	2000000c 	.word	0x2000000c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80001b0:	2000000c 	.word	0x2000000c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80001b4:	2000147c 	.word	0x2000147c

080001b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001b8:	e7fe      	b.n	80001b8 <ADC1_IRQHandler>
	...

080001bc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001bc:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <SystemInit+0x40>)
 80001be:	681a      	ldr	r2, [r3, #0]
 80001c0:	f042 0201 	orr.w	r2, r2, #1
 80001c4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80001c6:	6859      	ldr	r1, [r3, #4]
 80001c8:	4a0d      	ldr	r2, [pc, #52]	; (8000200 <SystemInit+0x44>)
 80001ca:	400a      	ands	r2, r1
 80001cc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80001d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80001d8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80001e0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80001e2:	685a      	ldr	r2, [r3, #4]
 80001e4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80001e8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80001ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80001ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <SystemInit+0x48>)
 80001f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000
 8000200:	f8ff0000 	.word	0xf8ff0000
 8000204:	e000ed00 	.word	0xe000ed00

08000208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000208:	b510      	push	{r4, lr}
 800020a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800020c:	f001 f834 	bl	8001278 <HAL_RCC_GetHCLKFreq>
 8000210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000214:	fbb0 f0f3 	udiv	r0, r0, r3
 8000218:	f000 fb3e 	bl	8000898 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800021c:	2200      	movs	r2, #0
 800021e:	4621      	mov	r1, r4
 8000220:	f04f 30ff 	mov.w	r0, #4294967295
 8000224:	f000 faf8 	bl	8000818 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000228:	2000      	movs	r0, #0
 800022a:	bd10      	pop	{r4, pc}

0800022c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800022e:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000230:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000232:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000234:	f043 0310 	orr.w	r3, r3, #16
 8000238:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800023a:	f000 fadb 	bl	80007f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023e:	200f      	movs	r0, #15
 8000240:	f7ff ffe2 	bl	8000208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000244:	f003 fc72 	bl	8003b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000248:	2000      	movs	r0, #0
 800024a:	bd08      	pop	{r3, pc}
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000250:	4a02      	ldr	r2, [pc, #8]	; (800025c <HAL_IncTick+0xc>)
 8000252:	6813      	ldr	r3, [r2, #0]
 8000254:	3301      	adds	r3, #1
 8000256:	6013      	str	r3, [r2, #0]
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	20000028 	.word	0x20000028

08000260 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000260:	4b01      	ldr	r3, [pc, #4]	; (8000268 <HAL_GetTick+0x8>)
 8000262:	6818      	ldr	r0, [r3, #0]
}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000028 	.word	0x20000028

0800026c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800026c:	b513      	push	{r0, r1, r4, lr}
 800026e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000270:	f7ff fff6 	bl	8000260 <HAL_GetTick>
 8000274:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000276:	f7ff fff3 	bl	8000260 <HAL_GetTick>
 800027a:	9b01      	ldr	r3, [sp, #4]
 800027c:	1b00      	subs	r0, r0, r4
 800027e:	4298      	cmp	r0, r3
 8000280:	d3f9      	bcc.n	8000276 <HAL_Delay+0xa>
  {
  }
}
 8000282:	b002      	add	sp, #8
 8000284:	bd10      	pop	{r4, pc}
	...

08000288 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800028a:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0;
 800028c:	2600      	movs	r6, #0
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800028e:	460d      	mov	r5, r1
  uint32_t tickstart = 0;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0;
 8000290:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000292:	f7ff ffe5 	bl	8000260 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000296:	6823      	ldr	r3, [r4, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000298:	4607      	mov	r7, r0
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800029a:	689a      	ldr	r2, [r3, #8]
 800029c:	05d2      	lsls	r2, r2, #23
 800029e:	d507      	bpl.n	80002b0 <HAL_ADC_PollForConversion+0x28>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80002a2:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002a6:	f043 0320 	orr.w	r3, r3, #32
 80002aa:	62a3      	str	r3, [r4, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80002ac:	2001      	movs	r0, #1
 80002ae:	e083      	b.n	80003b8 <HAL_ADC_PollForConversion+0x130>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80002b0:	685a      	ldr	r2, [r3, #4]
 80002b2:	05d6      	lsls	r6, r2, #23
 80002b4:	d411      	bmi.n	80002da <HAL_ADC_PollForConversion+0x52>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80002b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80002b8:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80002bc:	d10d      	bne.n	80002da <HAL_ADC_PollForConversion+0x52>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80002be:	6822      	ldr	r2, [r4, #0]
 80002c0:	6813      	ldr	r3, [r2, #0]
 80002c2:	0799      	lsls	r1, r3, #30
 80002c4:	d42a      	bmi.n	800031c <HAL_ADC_PollForConversion+0x94>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80002c6:	1c68      	adds	r0, r5, #1
 80002c8:	d0fa      	beq.n	80002c0 <HAL_ADC_PollForConversion+0x38>
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d052      	beq.n	8000374 <HAL_ADC_PollForConversion+0xec>
 80002ce:	f7ff ffc7 	bl	8000260 <HAL_GetTick>
 80002d2:	1bc0      	subs	r0, r0, r7
 80002d4:	4285      	cmp	r5, r0
 80002d6:	d2f2      	bcs.n	80002be <HAL_ADC_PollForConversion+0x36>
 80002d8:	e04c      	b.n	8000374 <HAL_ADC_PollForConversion+0xec>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80002da:	4b38      	ldr	r3, [pc, #224]	; (80003bc <HAL_ADC_PollForConversion+0x134>)
 80002dc:	2002      	movs	r0, #2
 80002de:	681e      	ldr	r6, [r3, #0]
 80002e0:	f001 f880 	bl	80013e4 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80002e4:	6823      	ldr	r3, [r4, #0]
 80002e6:	4a36      	ldr	r2, [pc, #216]	; (80003c0 <HAL_ADC_PollForConversion+0x138>)
 80002e8:	6919      	ldr	r1, [r3, #16]
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80002ea:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80002ee:	400a      	ands	r2, r1
 80002f0:	bb1a      	cbnz	r2, 800033a <HAL_ADC_PollForConversion+0xb2>
 80002f2:	68d9      	ldr	r1, [r3, #12]
 80002f4:	4a33      	ldr	r2, [pc, #204]	; (80003c4 <HAL_ADC_PollForConversion+0x13c>)
 80002f6:	400a      	ands	r2, r1
 80002f8:	b9fa      	cbnz	r2, 800033a <HAL_ADC_PollForConversion+0xb2>
 80002fa:	6919      	ldr	r1, [r3, #16]
 80002fc:	4a32      	ldr	r2, [pc, #200]	; (80003c8 <HAL_ADC_PollForConversion+0x140>)
 80002fe:	400a      	ands	r2, r1
 8000300:	2a00      	cmp	r2, #0
 8000302:	d12e      	bne.n	8000362 <HAL_ADC_PollForConversion+0xda>
 8000304:	68da      	ldr	r2, [r3, #12]
 8000306:	4b31      	ldr	r3, [pc, #196]	; (80003cc <HAL_ADC_PollForConversion+0x144>)
 8000308:	4013      	ands	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	bf14      	ite	ne
 800030e:	2329      	movne	r3, #41	; 0x29
 8000310:	2314      	moveq	r3, #20
  {
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000312:	fb00 f603 	mul.w	r6, r0, r3
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000316:	9b01      	ldr	r3, [sp, #4]
 8000318:	429e      	cmp	r6, r3
 800031a:	d828      	bhi.n	800036e <HAL_ADC_PollForConversion+0xe6>
      Conversion_Timeout_CPU_cycles ++;
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800031c:	6822      	ldr	r2, [r4, #0]
 800031e:	f06f 0312 	mvn.w	r3, #18
 8000322:	6013      	str	r3, [r2, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000324:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800032a:	62a3      	str	r3, [r4, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800032c:	6893      	ldr	r3, [r2, #8]
 800032e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000332:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000336:	d131      	bne.n	800039c <HAL_ADC_PollForConversion+0x114>
 8000338:	e02e      	b.n	8000398 <HAL_ADC_PollForConversion+0x110>
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800033a:	6919      	ldr	r1, [r3, #16]
 800033c:	4a22      	ldr	r2, [pc, #136]	; (80003c8 <HAL_ADC_PollForConversion+0x140>)
 800033e:	400a      	ands	r2, r1
 8000340:	b91a      	cbnz	r2, 800034a <HAL_ADC_PollForConversion+0xc2>
 8000342:	68d9      	ldr	r1, [r3, #12]
 8000344:	4a21      	ldr	r2, [pc, #132]	; (80003cc <HAL_ADC_PollForConversion+0x144>)
 8000346:	400a      	ands	r2, r1
 8000348:	b16a      	cbz	r2, 8000366 <HAL_ADC_PollForConversion+0xde>
 800034a:	6919      	ldr	r1, [r3, #16]
 800034c:	4a20      	ldr	r2, [pc, #128]	; (80003d0 <HAL_ADC_PollForConversion+0x148>)
 800034e:	400a      	ands	r2, r1
 8000350:	b95a      	cbnz	r2, 800036a <HAL_ADC_PollForConversion+0xe2>
 8000352:	68da      	ldr	r2, [r3, #12]
 8000354:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <HAL_ADC_PollForConversion+0x148>)
 8000356:	4013      	ands	r3, r2
 8000358:	2b00      	cmp	r3, #0
 800035a:	bf14      	ite	ne
 800035c:	23fc      	movne	r3, #252	; 0xfc
 800035e:	2354      	moveq	r3, #84	; 0x54
 8000360:	e7d7      	b.n	8000312 <HAL_ADC_PollForConversion+0x8a>
 8000362:	2329      	movs	r3, #41	; 0x29
 8000364:	e7d5      	b.n	8000312 <HAL_ADC_PollForConversion+0x8a>
 8000366:	2354      	movs	r3, #84	; 0x54
 8000368:	e7d3      	b.n	8000312 <HAL_ADC_PollForConversion+0x8a>
 800036a:	23fc      	movs	r3, #252	; 0xfc
 800036c:	e7d1      	b.n	8000312 <HAL_ADC_PollForConversion+0x8a>
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800036e:	1c6b      	adds	r3, r5, #1
 8000370:	d00e      	beq.n	8000390 <HAL_ADC_PollForConversion+0x108>
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8000372:	b945      	cbnz	r5, 8000386 <HAL_ADC_PollForConversion+0xfe>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000374:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
          
          return HAL_TIMEOUT;
 8000376:	2003      	movs	r0, #3
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000378:	f043 0304 	orr.w	r3, r3, #4
 800037c:	62a3      	str	r3, [r4, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800037e:	2300      	movs	r3, #0
 8000380:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000384:	e018      	b.n	80003b8 <HAL_ADC_PollForConversion+0x130>
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8000386:	f7ff ff6b 	bl	8000260 <HAL_GetTick>
 800038a:	1bc0      	subs	r0, r0, r7
 800038c:	4285      	cmp	r5, r0
 800038e:	d3f1      	bcc.n	8000374 <HAL_ADC_PollForConversion+0xec>
          __HAL_UNLOCK(hadc);
          
          return HAL_TIMEOUT;
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000390:	9b01      	ldr	r3, [sp, #4]
 8000392:	3301      	adds	r3, #1
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	e7be      	b.n	8000316 <HAL_ADC_PollForConversion+0x8e>
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000398:	68e3      	ldr	r3, [r4, #12]
 800039a:	b10b      	cbz	r3, 80003a0 <HAL_ADC_PollForConversion+0x118>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800039c:	2000      	movs	r0, #0
 800039e:	e00b      	b.n	80003b8 <HAL_ADC_PollForConversion+0x130>
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
     (hadc->Init.ContinuousConvMode == DISABLE)   )
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80003a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003a6:	62a3      	str	r3, [r4, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80003a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80003aa:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80003ae:	d1f5      	bne.n	800039c <HAL_ADC_PollForConversion+0x114>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80003b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80003b8:	b003      	add	sp, #12
 80003ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003bc:	20000000 	.word	0x20000000
 80003c0:	24924924 	.word	0x24924924
 80003c4:	00924924 	.word	0x00924924
 80003c8:	12492492 	.word	0x12492492
 80003cc:	00492492 	.word	0x00492492
 80003d0:	00249249 	.word	0x00249249

080003d4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80003d4:	6803      	ldr	r3, [r0, #0]
 80003d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80003d8:	4770      	bx	lr
	...

080003dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80003dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003e2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	f000 80ae 	beq.w	8000548 <HAL_ADC_ConfigChannel+0x16c>
 80003ec:	2301      	movs	r3, #1
 80003ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80003f2:	684b      	ldr	r3, [r1, #4]
 80003f4:	6804      	ldr	r4, [r0, #0]
 80003f6:	2b06      	cmp	r3, #6
 80003f8:	680d      	ldr	r5, [r1, #0]
 80003fa:	d818      	bhi.n	800042e <HAL_ADC_ConfigChannel+0x52>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80003fc:	6b67      	ldr	r7, [r4, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003fe:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8000402:	fa92 f6a2 	rbit	r6, r2
 8000406:	fab6 f686 	clz	r6, r6
 800040a:	3b01      	subs	r3, #1
 800040c:	fa92 f2a2 	rbit	r2, r2
 8000410:	fab2 f282 	clz	r2, r2
 8000414:	435e      	muls	r6, r3
 8000416:	4353      	muls	r3, r2
 8000418:	f04f 0e1f 	mov.w	lr, #31
 800041c:	fa0e f606 	lsl.w	r6, lr, r6
 8000420:	ea27 0606 	bic.w	r6, r7, r6
 8000424:	fa05 f303 	lsl.w	r3, r5, r3
 8000428:	4333      	orrs	r3, r6
 800042a:	6363      	str	r3, [r4, #52]	; 0x34
 800042c:	e030      	b.n	8000490 <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800042e:	2b0c      	cmp	r3, #12
 8000430:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8000434:	d816      	bhi.n	8000464 <HAL_ADC_ConfigChannel+0x88>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000436:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8000438:	fa92 f6a2 	rbit	r6, r2
 800043c:	fab6 f686 	clz	r6, r6
 8000440:	3b07      	subs	r3, #7
 8000442:	fa92 f2a2 	rbit	r2, r2
 8000446:	fab2 f282 	clz	r2, r2
 800044a:	435e      	muls	r6, r3
 800044c:	435a      	muls	r2, r3
 800044e:	f04f 0e1f 	mov.w	lr, #31
 8000452:	fa0e f606 	lsl.w	r6, lr, r6
 8000456:	ea27 0606 	bic.w	r6, r7, r6
 800045a:	fa05 f202 	lsl.w	r2, r5, r2
 800045e:	4332      	orrs	r2, r6
 8000460:	6322      	str	r2, [r4, #48]	; 0x30
 8000462:	e015      	b.n	8000490 <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000464:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000466:	fa92 f6a2 	rbit	r6, r2
 800046a:	fab6 f686 	clz	r6, r6
 800046e:	3b0d      	subs	r3, #13
 8000470:	fa92 f2a2 	rbit	r2, r2
 8000474:	fab2 f282 	clz	r2, r2
 8000478:	435e      	muls	r6, r3
 800047a:	4353      	muls	r3, r2
 800047c:	f04f 0e1f 	mov.w	lr, #31
 8000480:	fa0e f606 	lsl.w	r6, lr, r6
 8000484:	ea27 0606 	bic.w	r6, r7, r6
 8000488:	fa05 f303 	lsl.w	r3, r5, r3
 800048c:	4333      	orrs	r3, r6
 800048e:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000490:	2d09      	cmp	r5, #9
 8000492:	f04f 0338 	mov.w	r3, #56	; 0x38
 8000496:	688e      	ldr	r6, [r1, #8]
 8000498:	d918      	bls.n	80004cc <HAL_ADC_ConfigChannel+0xf0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800049a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800049e:	fa93 f7a3 	rbit	r7, r3
 80004a2:	fab7 f787 	clz	r7, r7
 80004a6:	f1a5 010a 	sub.w	r1, r5, #10
 80004aa:	fa93 f3a3 	rbit	r3, r3
 80004ae:	fab3 f283 	clz	r2, r3
 80004b2:	fb01 f307 	mul.w	r3, r1, r7
 80004b6:	4351      	muls	r1, r2
 80004b8:	2707      	movs	r7, #7
 80004ba:	fa07 f303 	lsl.w	r3, r7, r3
 80004be:	ea2e 0303 	bic.w	r3, lr, r3
 80004c2:	fa06 f201 	lsl.w	r2, r6, r1
 80004c6:	431a      	orrs	r2, r3
 80004c8:	60e2      	str	r2, [r4, #12]
 80004ca:	e013      	b.n	80004f4 <HAL_ADC_ConfigChannel+0x118>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80004cc:	6927      	ldr	r7, [r4, #16]
 80004ce:	fa93 f1a3 	rbit	r1, r3
 80004d2:	fab1 f181 	clz	r1, r1
 80004d6:	fa93 f3a3 	rbit	r3, r3
 80004da:	fab3 f383 	clz	r3, r3
 80004de:	4369      	muls	r1, r5
 80004e0:	436b      	muls	r3, r5
 80004e2:	2207      	movs	r2, #7
 80004e4:	fa02 f101 	lsl.w	r1, r2, r1
 80004e8:	ea27 0101 	bic.w	r1, r7, r1
 80004ec:	fa06 f203 	lsl.w	r2, r6, r3
 80004f0:	430a      	orrs	r2, r1
 80004f2:	6122      	str	r2, [r4, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80004f4:	f1a5 0310 	sub.w	r3, r5, #16
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d901      	bls.n	8000500 <HAL_ADC_ConfigChannel+0x124>
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004fc:	2300      	movs	r3, #0
 80004fe:	e01e      	b.n	800053e <HAL_ADC_ConfigChannel+0x162>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <HAL_ADC_ConfigChannel+0x174>)
 8000502:	429c      	cmp	r4, r3
 8000504:	d116      	bne.n	8000534 <HAL_ADC_ConfigChannel+0x158>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000506:	68a3      	ldr	r3, [r4, #8]
 8000508:	021b      	lsls	r3, r3, #8
 800050a:	d4f7      	bmi.n	80004fc <HAL_ADC_ConfigChannel+0x120>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800050c:	68a3      	ldr	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800050e:	2d10      	cmp	r5, #16
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000510:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000514:	60a3      	str	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000516:	d1f1      	bne.n	80004fc <HAL_ADC_ConfigChannel+0x120>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_ADC_ConfigChannel+0x178>)
 800051a:	4a0f      	ldr	r2, [pc, #60]	; (8000558 <HAL_ADC_ConfigChannel+0x17c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000522:	230a      	movs	r3, #10
 8000524:	4353      	muls	r3, r2
          while(wait_loop_index != 0)
          {
            wait_loop_index--;
 8000526:	9301      	str	r3, [sp, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 8000528:	9b01      	ldr	r3, [sp, #4]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0e6      	beq.n	80004fc <HAL_ADC_ConfigChannel+0x120>
          {
            wait_loop_index--;
 800052e:	9b01      	ldr	r3, [sp, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	e7f8      	b.n	8000526 <HAL_ADC_ConfigChannel+0x14a>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000534:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	6283      	str	r3, [r0, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800053c:	2301      	movs	r3, #1
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800053e:	2200      	movs	r2, #0
 8000540:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000544:	4618      	mov	r0, r3
 8000546:	e000      	b.n	800054a <HAL_ADC_ConfigChannel+0x16e>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000548:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 800054a:	b003      	add	sp, #12
 800054c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800054e:	bf00      	nop
 8000550:	40012400 	.word	0x40012400
 8000554:	20000000 	.word	0x20000000
 8000558:	000f4240 	.word	0x000f4240

0800055c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800055c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000562:	6803      	ldr	r3, [r0, #0]
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000564:	4604      	mov	r4, r0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000566:	689a      	ldr	r2, [r3, #8]
 8000568:	07d2      	lsls	r2, r2, #31
 800056a:	d501      	bpl.n	8000570 <ADC_Enable+0x14>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800056c:	2000      	movs	r0, #0
 800056e:	e026      	b.n	80005be <ADC_Enable+0x62>
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000570:	689a      	ldr	r2, [r3, #8]
 8000572:	f042 0201 	orr.w	r2, r2, #1
 8000576:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <ADC_Enable+0x68>)
 800057a:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <ADC_Enable+0x6c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	fbb3 f3f2 	udiv	r3, r3, r2
    while(wait_loop_index != 0)
    {
      wait_loop_index--;
 8000582:	9301      	str	r3, [sp, #4]
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
    while(wait_loop_index != 0)
 8000584:	9b01      	ldr	r3, [sp, #4]
 8000586:	b113      	cbz	r3, 800058e <ADC_Enable+0x32>
    {
      wait_loop_index--;
 8000588:	9b01      	ldr	r3, [sp, #4]
 800058a:	3b01      	subs	r3, #1
 800058c:	e7f9      	b.n	8000582 <ADC_Enable+0x26>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800058e:	f7ff fe67 	bl	8000260 <HAL_GetTick>
 8000592:	4606      	mov	r6, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000594:	6823      	ldr	r3, [r4, #0]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	f013 0501 	ands.w	r5, r3, #1
 800059c:	d1e6      	bne.n	800056c <ADC_Enable+0x10>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800059e:	f7ff fe5f 	bl	8000260 <HAL_GetTick>
 80005a2:	1b80      	subs	r0, r0, r6
 80005a4:	2802      	cmp	r0, #2
 80005a6:	d9f5      	bls.n	8000594 <ADC_Enable+0x38>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80005aa:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    while(ADC_IS_ENABLE(hadc) == RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005ae:	f043 0310 	orr.w	r3, r3, #16
 80005b2:	62a3      	str	r3, [r4, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80005b6:	2001      	movs	r0, #1
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	62e3      	str	r3, [r4, #44]	; 0x2c
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
}
 80005be:	b002      	add	sp, #8
 80005c0:	bd70      	pop	{r4, r5, r6, pc}
 80005c2:	bf00      	nop
 80005c4:	20000000 	.word	0x20000000
 80005c8:	000f4240 	.word	0x000f4240

080005cc <HAL_ADC_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005cc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80005d0:	b510      	push	{r4, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005d2:	2b01      	cmp	r3, #1
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80005d4:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005d6:	d03b      	beq.n	8000650 <HAL_ADC_Start+0x84>
 80005d8:	2301      	movs	r3, #1
 80005da:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80005de:	f7ff ffbd 	bl	800055c <ADC_Enable>
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80005e2:	2800      	cmp	r0, #0
 80005e4:	d130      	bne.n	8000648 <HAL_ADC_Start+0x7c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80005e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80005e8:	2000      	movs	r0, #0
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80005ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80005ee:	f023 0301 	bic.w	r3, r3, #1
 80005f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f6:	62a3      	str	r3, [r4, #40]	; 0x28
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80005fe:	62a3      	str	r3, [r4, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000600:	6823      	ldr	r3, [r4, #0]
 8000602:	685a      	ldr	r2, [r3, #4]
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000604:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000608:	0552      	lsls	r2, r2, #21
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800060a:	bf41      	itttt	mi
 800060c:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 800060e:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000612:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000616:	62a2      	strmi	r2, [r4, #40]	; 0x28
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000618:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800061a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800061e:	bf1c      	itt	ne
 8000620:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8000622:	f022 0206 	bicne.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000626:	62e2      	str	r2, [r4, #44]	; 0x2c
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000628:	f06f 0202 	mvn.w	r2, #2
 800062c:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800062e:	689a      	ldr	r2, [r3, #8]
 8000630:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000634:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	bf0c      	ite	eq
 800063c:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000640:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000648:	2300      	movs	r3, #0
 800064a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800064e:	bd10      	pop	{r4, pc}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000650:	2002      	movs	r0, #2
    __HAL_UNLOCK(hadc);
  }
    
  /* Return function status */
  return tmp_hal_status;
}
 8000652:	bd10      	pop	{r4, pc}

08000654 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000654:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000656:	6803      	ldr	r3, [r0, #0]
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000658:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	07d2      	lsls	r2, r2, #31
 800065e:	d401      	bmi.n	8000664 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000660:	2000      	movs	r0, #0
 8000662:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000664:	689a      	ldr	r2, [r3, #8]
 8000666:	f022 0201 	bic.w	r2, r2, #1
 800066a:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800066c:	f7ff fdf8 	bl	8000260 <HAL_GetTick>
 8000670:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000672:	6823      	ldr	r3, [r4, #0]
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	07db      	lsls	r3, r3, #31
 8000678:	d5f2      	bpl.n	8000660 <ADC_ConversionStop_Disable+0xc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800067a:	f7ff fdf1 	bl	8000260 <HAL_GetTick>
 800067e:	1b40      	subs	r0, r0, r5
 8000680:	2802      	cmp	r0, #2
 8000682:	d9f6      	bls.n	8000672 <ADC_ConversionStop_Disable+0x1e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000686:	2001      	movs	r0, #1
    while(ADC_IS_ENABLE(hadc) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000688:	f043 0310 	orr.w	r3, r3, #16
 800068c:	62a3      	str	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800068e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000696:	bd38      	pop	{r3, r4, r5, pc}

08000698 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000698:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800069a:	4604      	mov	r4, r0
 800069c:	2800      	cmp	r0, #0
 800069e:	f000 8088 	beq.w	80007b2 <HAL_ADC_Init+0x11a>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80006a4:	b923      	cbnz	r3, 80006b0 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006a6:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006a8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006ac:	f002 fb1a 	bl	8002ce4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006b0:	4620      	mov	r0, r4
 80006b2:	f7ff ffcf 	bl	8000654 <ADC_ConversionStop_Disable>
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006b8:	f013 0f10 	tst.w	r3, #16
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006be:	d175      	bne.n	80007ac <HAL_ADC_Init+0x114>
 80006c0:	2800      	cmp	r0, #0
 80006c2:	d173      	bne.n	80007ac <HAL_ADC_Init+0x114>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006c8:	f023 0302 	bic.w	r3, r3, #2
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	62a3      	str	r3, [r4, #40]	; 0x28
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80006d2:	68e0      	ldr	r0, [r4, #12]
 80006d4:	2302      	movs	r3, #2
 80006d6:	fa93 f3a3 	rbit	r3, r3
 80006da:	fab3 f383 	clz	r3, r3
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80006de:	6861      	ldr	r1, [r4, #4]
 80006e0:	69e2      	ldr	r2, [r4, #28]
 80006e2:	fa00 f303 	lsl.w	r3, r0, r3
 80006e6:	430a      	orrs	r2, r1
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006e8:	68a1      	ldr	r1, [r4, #8]
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80006ea:	4313      	orrs	r3, r2
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006ec:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80006f0:	d005      	beq.n	80006fe <HAL_ADC_Init+0x66>
 80006f2:	2901      	cmp	r1, #1
 80006f4:	bf14      	ite	ne
 80006f6:	2200      	movne	r2, #0
 80006f8:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80006fc:	e000      	b.n	8000700 <HAL_ADC_Init+0x68>
 80006fe:	460a      	mov	r2, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000700:	6965      	ldr	r5, [r4, #20]
 8000702:	2d01      	cmp	r5, #1
 8000704:	d115      	bne.n	8000732 <HAL_ADC_Init+0x9a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000706:	b960      	cbnz	r0, 8000722 <HAL_ADC_Init+0x8a>
 8000708:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 800070c:	fa90 f0a0 	rbit	r0, r0
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000710:	fab0 f580 	clz	r5, r0
 8000714:	69a0      	ldr	r0, [r4, #24]
 8000716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800071a:	3801      	subs	r0, #1
 800071c:	40a8      	lsls	r0, r5
 800071e:	4302      	orrs	r2, r0
 8000720:	e007      	b.n	8000732 <HAL_ADC_Init+0x9a>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000722:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000724:	f040 0020 	orr.w	r0, r0, #32
 8000728:	62a0      	str	r0, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800072a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800072c:	f040 0001 	orr.w	r0, r0, #1
 8000730:	62e0      	str	r0, [r4, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000732:	6820      	ldr	r0, [r4, #0]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000734:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000738:	6845      	ldr	r5, [r0, #4]
 800073a:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800073e:	ea42 0205 	orr.w	r2, r2, r5
 8000742:	6042      	str	r2, [r0, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000744:	6885      	ldr	r5, [r0, #8]
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <HAL_ADC_Init+0x120>)
 8000748:	ea02 0205 	and.w	r2, r2, r5
 800074c:	ea42 0203 	orr.w	r2, r2, r3
 8000750:	6082      	str	r2, [r0, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000752:	d001      	beq.n	8000758 <HAL_ADC_Init+0xc0>
 8000754:	2901      	cmp	r1, #1
 8000756:	d10a      	bne.n	800076e <HAL_ADC_Init+0xd6>
 8000758:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800075c:	fa92 f2a2 	rbit	r2, r2
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000760:	fab2 f282 	clz	r2, r2
 8000764:	6921      	ldr	r1, [r4, #16]
 8000766:	3901      	subs	r1, #1
 8000768:	fa01 f202 	lsl.w	r2, r1, r2
 800076c:	e000      	b.n	8000770 <HAL_ADC_Init+0xd8>
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
 800076e:	2200      	movs	r2, #0
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000770:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8000772:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8000776:	430a      	orrs	r2, r1
 8000778:	62c2      	str	r2, [r0, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800077a:	6881      	ldr	r1, [r0, #8]
 800077c:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <HAL_ADC_Init+0x124>)
 800077e:	400a      	ands	r2, r1
 8000780:	4293      	cmp	r3, r2
 8000782:	d108      	bne.n	8000796 <HAL_ADC_Init+0xfe>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000784:	2000      	movs	r0, #0
 8000786:	62e0      	str	r0, [r4, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000788:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800078a:	f023 0303 	bic.w	r3, r3, #3
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	62a3      	str	r3, [r4, #40]	; 0x28
 8000794:	bd38      	pop	{r3, r4, r5, pc}
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000796:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000798:	f023 0312 	bic.w	r3, r3, #18
 800079c:	f043 0310 	orr.w	r3, r3, #16
 80007a0:	62a3      	str	r3, [r4, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007aa:	e002      	b.n	80007b2 <HAL_ADC_Init+0x11a>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	62a3      	str	r3, [r4, #40]	; 0x28
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80007b2:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80007b4:	bd38      	pop	{r3, r4, r5, pc}
 80007b6:	bf00      	nop
 80007b8:	ffe1f7fd 	.word	0xffe1f7fd
 80007bc:	ff1f0efe 	.word	0xff1f0efe

080007c0 <HAL_ADC_Stop>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80007c0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80007c4:	b510      	push	{r4, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80007c6:	2b01      	cmp	r3, #1
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80007c8:	4604      	mov	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80007ca:	d011      	beq.n	80007f0 <HAL_ADC_Stop+0x30>
 80007cc:	2301      	movs	r3, #1
 80007ce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007d2:	f7ff ff3f 	bl	8000654 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80007d6:	b938      	cbnz	r0, 80007e8 <HAL_ADC_Stop+0x28>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007de:	f023 0301 	bic.w	r3, r3, #1
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007e8:	2300      	movs	r3, #0
 80007ea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80007ee:	bd10      	pop	{r4, pc}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80007f0:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 80007f2:	bd10      	pop	{r4, pc}

080007f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80007f6:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f8:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80007fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80007fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000802:	041b      	lsls	r3, r3, #16
 8000804:	0c1b      	lsrs	r3, r3, #16
 8000806:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800080a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080e:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000810:	60d3      	str	r3, [r2, #12]
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081a:	b530      	push	{r4, r5, lr}
 800081c:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800081e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000822:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000826:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000828:	2c04      	cmp	r4, #4
 800082a:	bf28      	it	cs
 800082c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	2d06      	cmp	r5, #6

  return (
 8000830:	f04f 0501 	mov.w	r5, #1
 8000834:	fa05 f404 	lsl.w	r4, r5, r4
 8000838:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083c:	bf8c      	ite	hi
 800083e:	3b03      	subhi	r3, #3
 8000840:	2300      	movls	r3, #0

  return (
 8000842:	400c      	ands	r4, r1
 8000844:	409c      	lsls	r4, r3
 8000846:	fa05 f303 	lsl.w	r3, r5, r3
 800084a:	3b01      	subs	r3, #1
 800084c:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800084e:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000850:	ea42 0204 	orr.w	r2, r2, r4
 8000854:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000858:	bfaf      	iteee	ge
 800085a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	4b07      	ldrlt	r3, [pc, #28]	; (800087c <HAL_NVIC_SetPriority+0x64>)
 8000860:	f000 000f 	andlt.w	r0, r0, #15
 8000864:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000866:	bfa5      	ittet	ge
 8000868:	b2d2      	uxtbge	r2, r2
 800086a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000870:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000874:	bd30      	pop	{r4, r5, pc}
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00
 800087c:	e000ed14 	.word	0xe000ed14

08000880 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000880:	0942      	lsrs	r2, r0, #5
 8000882:	2301      	movs	r3, #1
 8000884:	f000 001f 	and.w	r0, r0, #31
 8000888:	fa03 f000 	lsl.w	r0, r3, r0
 800088c:	4b01      	ldr	r3, [pc, #4]	; (8000894 <HAL_NVIC_EnableIRQ+0x14>)
 800088e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100

08000898 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	3801      	subs	r0, #1
 800089a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800089e:	d20a      	bcs.n	80008b6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a2:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <HAL_SYSTICK_Config+0x28>)
 80008a4:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ae:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000e010 	.word	0xe000e010
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008c6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	bf0c      	ite	eq
 80008cc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008d0:	f022 0204 	bicne.w	r2, r2, #4
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	4770      	bx	lr
 80008d8:	e000e010 	.word	0xe000e010

080008dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 80008e0:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80008e2:	4626      	mov	r6, r4
 80008e4:	4b62      	ldr	r3, [pc, #392]	; (8000a70 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008e6:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000a7c <HAL_GPIO_Init+0x1a0>
 80008ea:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000a80 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80008ee:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80008f0:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80008f2:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80008f4:	ea32 0505 	bics.w	r5, r2, r5
 80008f8:	f040 80b3 	bne.w	8000a62 <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008fc:	684d      	ldr	r5, [r1, #4]
 80008fe:	2d12      	cmp	r5, #18
 8000900:	d028      	beq.n	8000954 <HAL_GPIO_Init+0x78>
 8000902:	d80e      	bhi.n	8000922 <HAL_GPIO_Init+0x46>
 8000904:	2d02      	cmp	r5, #2
 8000906:	d022      	beq.n	800094e <HAL_GPIO_Init+0x72>
 8000908:	d804      	bhi.n	8000914 <HAL_GPIO_Init+0x38>
 800090a:	b335      	cbz	r5, 800095a <HAL_GPIO_Init+0x7e>
 800090c:	2d01      	cmp	r5, #1
 800090e:	d12d      	bne.n	800096c <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000910:	68cc      	ldr	r4, [r1, #12]
          break;
 8000912:	e02b      	b.n	800096c <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000914:	2d03      	cmp	r5, #3
 8000916:	d018      	beq.n	800094a <HAL_GPIO_Init+0x6e>
 8000918:	2d11      	cmp	r5, #17
 800091a:	d127      	bne.n	800096c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800091c:	68cc      	ldr	r4, [r1, #12]
 800091e:	3404      	adds	r4, #4
          break;
 8000920:	e024      	b.n	800096c <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000922:	4f54      	ldr	r7, [pc, #336]	; (8000a74 <HAL_GPIO_Init+0x198>)
 8000924:	42bd      	cmp	r5, r7
 8000926:	d018      	beq.n	800095a <HAL_GPIO_Init+0x7e>
 8000928:	d806      	bhi.n	8000938 <HAL_GPIO_Init+0x5c>
 800092a:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000a84 <HAL_GPIO_Init+0x1a8>
 800092e:	4545      	cmp	r5, r8
 8000930:	d013      	beq.n	800095a <HAL_GPIO_Init+0x7e>
 8000932:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000936:	e005      	b.n	8000944 <HAL_GPIO_Init+0x68>
 8000938:	4575      	cmp	r5, lr
 800093a:	d00e      	beq.n	800095a <HAL_GPIO_Init+0x7e>
 800093c:	4565      	cmp	r5, ip
 800093e:	d00c      	beq.n	800095a <HAL_GPIO_Init+0x7e>
 8000940:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000a88 <HAL_GPIO_Init+0x1ac>
 8000944:	4545      	cmp	r5, r8
 8000946:	d111      	bne.n	800096c <HAL_GPIO_Init+0x90>
 8000948:	e007      	b.n	800095a <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800094a:	2400      	movs	r4, #0
 800094c:	e00e      	b.n	800096c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800094e:	68cc      	ldr	r4, [r1, #12]
 8000950:	3408      	adds	r4, #8
          break;
 8000952:	e00b      	b.n	800096c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000954:	68cc      	ldr	r4, [r1, #12]
 8000956:	340c      	adds	r4, #12
          break;
 8000958:	e008      	b.n	800096c <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800095a:	688c      	ldr	r4, [r1, #8]
 800095c:	b12c      	cbz	r4, 800096a <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800095e:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8000960:	bf0c      	ite	eq
 8000962:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000964:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000966:	2408      	movs	r4, #8
 8000968:	e000      	b.n	800096c <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800096a:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800096c:	2aff      	cmp	r2, #255	; 0xff
 800096e:	bf97      	itett	ls
 8000970:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000972:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000976:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 800097a:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800097c:	bf84      	itt	hi
 800097e:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000982:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000984:	f04f 080f 	mov.w	r8, #15
 8000988:	fa08 fa05 	lsl.w	sl, r8, r5
 800098c:	ea29 090a 	bic.w	r9, r9, sl
 8000990:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000994:	bf88      	it	hi
 8000996:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800099a:	ea49 0505 	orr.w	r5, r9, r5
 800099e:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80009a2:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80009a6:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 80009aa:	d05a      	beq.n	8000a62 <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ac:	4d32      	ldr	r5, [pc, #200]	; (8000a78 <HAL_GPIO_Init+0x19c>)
 80009ae:	4f32      	ldr	r7, [pc, #200]	; (8000a78 <HAL_GPIO_Init+0x19c>)
 80009b0:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009b2:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009b6:	f045 0501 	orr.w	r5, r5, #1
 80009ba:	61bd      	str	r5, [r7, #24]
 80009bc:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009be:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009c2:	f005 0501 	and.w	r5, r5, #1
 80009c6:	9501      	str	r5, [sp, #4]
 80009c8:	9d01      	ldr	r5, [sp, #4]
 80009ca:	f026 0503 	bic.w	r5, r6, #3
 80009ce:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80009d2:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 80009d6:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009da:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009de:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009e2:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009e4:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009e8:	d010      	beq.n	8000a0c <HAL_GPIO_Init+0x130>
 80009ea:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009ee:	42b8      	cmp	r0, r7
 80009f0:	d00f      	beq.n	8000a12 <HAL_GPIO_Init+0x136>
 80009f2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009f6:	42b8      	cmp	r0, r7
 80009f8:	d00e      	beq.n	8000a18 <HAL_GPIO_Init+0x13c>
 80009fa:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009fe:	42b8      	cmp	r0, r7
 8000a00:	bf0c      	ite	eq
 8000a02:	f04f 0b03 	moveq.w	fp, #3
 8000a06:	f04f 0b04 	movne.w	fp, #4
 8000a0a:	e007      	b.n	8000a1c <HAL_GPIO_Init+0x140>
 8000a0c:	f04f 0b00 	mov.w	fp, #0
 8000a10:	e004      	b.n	8000a1c <HAL_GPIO_Init+0x140>
 8000a12:	f04f 0b01 	mov.w	fp, #1
 8000a16:	e001      	b.n	8000a1c <HAL_GPIO_Init+0x140>
 8000a18:	f04f 0b02 	mov.w	fp, #2
 8000a1c:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000a20:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 8000a24:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000a28:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a2a:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000a2e:	bf14      	ite	ne
 8000a30:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000a32:	4395      	biceq	r5, r2
 8000a34:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000a36:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a38:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000a3c:	bf14      	ite	ne
 8000a3e:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000a40:	4395      	biceq	r5, r2
 8000a42:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000a44:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a46:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000a4a:	bf14      	ite	ne
 8000a4c:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000a4e:	4395      	biceq	r5, r2
 8000a50:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000a52:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a54:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000a58:	bf14      	ite	ne
 8000a5a:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000a5c:	ea25 0202 	biceq.w	r2, r5, r2
 8000a60:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000a62:	3601      	adds	r6, #1
 8000a64:	2e10      	cmp	r6, #16
 8000a66:	f47f af42 	bne.w	80008ee <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 8000a6a:	b003      	add	sp, #12
 8000a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a70:	40010400 	.word	0x40010400
 8000a74:	10210000 	.word	0x10210000
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	10310000 	.word	0x10310000
 8000a80:	10320000 	.word	0x10320000
 8000a84:	10110000 	.word	0x10110000
 8000a88:	10220000 	.word	0x10220000

08000a8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a8c:	b902      	cbnz	r2, 8000a90 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000a8e:	0409      	lsls	r1, r1, #16
 8000a90:	6101      	str	r1, [r0, #16]
 8000a92:	4770      	bx	lr

08000a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000a94:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0;
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000a96:	4604      	mov	r4, r0
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d05f      	beq.n	8000b5c <HAL_I2C_Init+0xc8>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000a9c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000aa0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000aa4:	b91b      	cbnz	r3, 8000aae <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000aa6:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000aaa:	f002 fb81 	bl	80031b0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000aae:	6822      	ldr	r2, [r4, #0]
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ab0:	2324      	movs	r3, #36	; 0x24
 8000ab2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ab6:	6813      	ldr	r3, [r2, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ab8:	4d29      	ldr	r5, [pc, #164]	; (8000b60 <HAL_I2C_Init+0xcc>)
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000aba:	f023 0301 	bic.w	r3, r3, #1
 8000abe:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ac0:	f000 fbe0 	bl	8001284 <HAL_RCC_GetPCLK1Freq>

  /* Calculate frequency range */
  freqrange = I2C_FREQ_RANGE(pclk1);
 8000ac4:	4927      	ldr	r1, [pc, #156]	; (8000b64 <HAL_I2C_Init+0xd0>)
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ac6:	6863      	ldr	r3, [r4, #4]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();

  /* Calculate frequency range */
  freqrange = I2C_FREQ_RANGE(pclk1);
 8000ac8:	fbb0 f1f1 	udiv	r1, r0, r1
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000acc:	42ab      	cmp	r3, r5
  /* Calculate frequency range */
  freqrange = I2C_FREQ_RANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000ace:	6822      	ldr	r2, [r4, #0]
 8000ad0:	462e      	mov	r6, r5

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ad2:	bf88      	it	hi
 8000ad4:	f44f 7596 	movhi.w	r5, #300	; 0x12c
  /* Calculate frequency range */
  freqrange = I2C_FREQ_RANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000ad8:	6051      	str	r1, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ada:	bf82      	ittt	hi
 8000adc:	4369      	mulhi	r1, r5
 8000ade:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8000ae2:	fbb1 f1f5 	udivhi	r1, r1, r5
static uint32_t I2C_Configure_Speed(I2C_HandleTypeDef *hi2c, uint32_t I2CClkSrcFreq)
{
  uint32_t tmp1 = 0;
  
  /* Clock Standard Mode */
  if(hi2c->Init.ClockSpeed <= I2C_STANDARD_MODE_MAX_CLK)
 8000ae6:	42b3      	cmp	r3, r6
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ae8:	f101 0101 	add.w	r1, r1, #1
 8000aec:	6211      	str	r1, [r2, #32]
static uint32_t I2C_Configure_Speed(I2C_HandleTypeDef *hi2c, uint32_t I2CClkSrcFreq)
{
  uint32_t tmp1 = 0;
  
  /* Clock Standard Mode */
  if(hi2c->Init.ClockSpeed <= I2C_STANDARD_MODE_MAX_CLK)
 8000aee:	d808      	bhi.n	8000b02 <HAL_I2C_Init+0x6e>
  {
    /* Calculate Value to be set in CCR register */
    tmp1 = (I2CClkSrcFreq/(hi2c->Init.ClockSpeed << 1));
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	fbb0 f0f3 	udiv	r0, r0, r3
    
    /* The minimum allowed value set in CCR register is 0x04 for Standard Mode */
    if( (tmp1 & I2C_CCR_CCR) < 4 )
 8000af6:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf38      	it	cc
 8000afe:	2004      	movcc	r0, #4
 8000b00:	e013      	b.n	8000b2a <HAL_I2C_Init+0x96>
  {
    /* Clock Fast Mode */
    tmp1 = I2C_CCR_FS;
    
    /* Duty Cylce tLow/tHigh = 2 */
    if(hi2c->Init.DutyCycle == I2C_DUTYCYCLE_2)
 8000b02:	68a1      	ldr	r1, [r4, #8]
 8000b04:	b931      	cbnz	r1, 8000b14 <HAL_I2C_Init+0x80>
    {
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 3)) | I2C_DUTYCYCLE_2; 
 8000b06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000b0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b0e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000b12:	e005      	b.n	8000b20 <HAL_I2C_Init+0x8c>
    }
    else /* Duty Cylce tLow/tHigh = 16/9 */
    {
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 25)) | I2C_DUTYCYCLE_16_9;
 8000b14:	2119      	movs	r1, #25
 8000b16:	434b      	muls	r3, r1
 8000b18:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b1c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
    }

    /* The minimum allowed value set in CCR register is 0x01 for Fast Mode */
    if( (tmp1 & I2C_CCR_CCR) < 1 )
 8000b20:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf08      	it	eq
 8000b28:	2001      	moveq	r0, #1
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_Configure_Speed(hi2c, pclk1);

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b2a:	69e1      	ldr	r1, [r4, #28]
 8000b2c:	6a23      	ldr	r3, [r4, #32]
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_Configure_Speed(hi2c, pclk1);
 8000b2e:	61d0      	str	r0, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b30:	430b      	orrs	r3, r1
 8000b32:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000b34:	6921      	ldr	r1, [r4, #16]
 8000b36:	68e3      	ldr	r3, [r4, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b38:	2000      	movs	r0, #0
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000b3a:	430b      	orrs	r3, r1
 8000b3c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000b3e:	6961      	ldr	r1, [r4, #20]
 8000b40:	69a3      	ldr	r3, [r4, #24]
 8000b42:	430b      	orrs	r3, r1
 8000b44:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 8000b4e:	2320      	movs	r3, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b50:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8000b52:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b56:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36

  return HAL_OK;
 8000b5a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8000b5c:	2001      	movs	r0, #1
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8000b5e:	bd70      	pop	{r4, r5, r6, pc}
 8000b60:	000186a0 	.word	0x000186a0
 8000b64:	000f4240 	.word	0x000f4240

08000b68 <HAL_IWDG_MspInit>:
  * @param  hiwdg: pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 8000b68:	4770      	bx	lr

08000b6a <HAL_IWDG_Init>:
  * @param  hiwdg: pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000b6a:	b510      	push	{r4, lr}
  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8000b6c:	4604      	mov	r4, r0
 8000b6e:	b330      	cbz	r0, 8000bbe <HAL_IWDG_Init+0x54>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload)); 
  
  /* Check pending flag, if previous update not done, return error */
  if((__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_PVU) != RESET)
 8000b70:	6803      	ldr	r3, [r0, #0]
 8000b72:	68da      	ldr	r2, [r3, #12]
 8000b74:	07d2      	lsls	r2, r2, #31
 8000b76:	d502      	bpl.n	8000b7e <HAL_IWDG_Init+0x14>
     &&(__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET))
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	079b      	lsls	r3, r3, #30
 8000b7c:	d41f      	bmi.n	8000bbe <HAL_IWDG_Init+0x54>
  {
    return HAL_ERROR;
  }
    
  if(hiwdg->State == HAL_IWDG_STATE_RESET)
 8000b7e:	7b63      	ldrb	r3, [r4, #13]
 8000b80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b84:	b91b      	cbnz	r3, 8000b8e <HAL_IWDG_Init+0x24>
  {  
    /* Allocate lock resource and initialize it */
    hiwdg->Lock = HAL_UNLOCKED;
 8000b86:	7322      	strb	r2, [r4, #12]
    
    /* Init the low level hardware */
    HAL_IWDG_MspInit(hiwdg);
 8000b88:	4620      	mov	r0, r4
 8000b8a:	f7ff ffed 	bl	8000b68 <HAL_IWDG_MspInit>
  
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_BUSY;  
  
  /* Enable write access to IWDG_PR and IWDG_RLR registers */  
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000b8e:	f245 5255 	movw	r2, #21845	; 0x5555
    /* Init the low level hardware */
    HAL_IWDG_MspInit(hiwdg);
  }
  
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_BUSY;  
 8000b92:	2302      	movs	r3, #2
 8000b94:	7363      	strb	r3, [r4, #13]
  
  /* Enable write access to IWDG_PR and IWDG_RLR registers */  
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000b96:	6823      	ldr	r3, [r4, #0]
 
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
 8000b98:	2000      	movs	r0, #0
  
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_BUSY;  
  
  /* Enable write access to IWDG_PR and IWDG_RLR registers */  
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000b9a:	601a      	str	r2, [r3, #0]
  
  /* Write to IWDG registers the IWDG_Prescaler & IWDG_Reload values to work with */
  MODIFY_REG(hiwdg->Instance->PR, IWDG_PR_PR, hiwdg->Init.Prescaler);
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	f022 0107 	bic.w	r1, r2, #7
 8000ba2:	6862      	ldr	r2, [r4, #4]
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hiwdg->Instance->RLR, IWDG_RLR_RL, hiwdg->Init.Reload);
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	68a1      	ldr	r1, [r4, #8]
 8000bac:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8000bb0:	f022 020f 	bic.w	r2, r2, #15
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	609a      	str	r2, [r3, #8]
 
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_READY;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	7363      	strb	r3, [r4, #13]
  
  /* Return function status */
  return HAL_OK;
 8000bbc:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
  {
    return HAL_ERROR;
 8000bbe:	2001      	movs	r0, #1
  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 8000bc0:	bd10      	pop	{r4, pc}
	...

08000bc4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc4:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bca:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bcc:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bce:	d403      	bmi.n	8000bd8 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	0798      	lsls	r0, r3, #30
 8000bd4:	d473      	bmi.n	8000cbe <HAL_RCC_OscConfig+0xfa>
 8000bd6:	e0f2      	b.n	8000dbe <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bd8:	4cb9      	ldr	r4, [pc, #740]	; (8000ec0 <HAL_RCC_OscConfig+0x2fc>)
 8000bda:	6863      	ldr	r3, [r4, #4]
 8000bdc:	f003 030c 	and.w	r3, r3, #12
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d007      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be4:	6863      	ldr	r3, [r4, #4]
 8000be6:	f003 030c 	and.w	r3, r3, #12
 8000bea:	2b08      	cmp	r3, #8
 8000bec:	d116      	bne.n	8000c1c <HAL_RCC_OscConfig+0x58>
 8000bee:	6863      	ldr	r3, [r4, #4]
 8000bf0:	03d9      	lsls	r1, r3, #15
 8000bf2:	d513      	bpl.n	8000c1c <HAL_RCC_OscConfig+0x58>
 8000bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bf8:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bfc:	6822      	ldr	r2, [r4, #0]
 8000bfe:	fa93 f3a3 	rbit	r3, r3
 8000c02:	fab3 f383 	clz	r3, r3
 8000c06:	f003 031f 	and.w	r3, r3, #31
 8000c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0e:	07da      	lsls	r2, r3, #31
 8000c10:	d5de      	bpl.n	8000bd0 <HAL_RCC_OscConfig+0xc>
 8000c12:	686b      	ldr	r3, [r5, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1db      	bne.n	8000bd0 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000c18:	2001      	movs	r0, #1
 8000c1a:	e22d      	b.n	8001078 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c1c:	686b      	ldr	r3, [r5, #4]
 8000c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c22:	d015      	beq.n	8000c50 <HAL_RCC_OscConfig+0x8c>
 8000c24:	b96b      	cbnz	r3, 8000c42 <HAL_RCC_OscConfig+0x7e>
 8000c26:	6823      	ldr	r3, [r4, #0]
 8000c28:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c30:	6023      	str	r3, [r4, #0]
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c38:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3a:	f7ff fb11 	bl	8000260 <HAL_GetTick>
 8000c3e:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c40:	e02f      	b.n	8000ca2 <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	d106      	bne.n	8000c58 <HAL_RCC_OscConfig+0x94>
 8000c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c4e:	6023      	str	r3, [r4, #0]
 8000c50:	6823      	ldr	r3, [r4, #0]
 8000c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c56:	e005      	b.n	8000c64 <HAL_RCC_OscConfig+0xa0>
 8000c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5c:	6023      	str	r3, [r4, #0]
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c64:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c66:	f7ff fafb 	bl	8000260 <HAL_GetTick>
 8000c6a:	4607      	mov	r7, r0
 8000c6c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000c70:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c74:	6822      	ldr	r2, [r4, #0]
 8000c76:	fa96 f3a6 	rbit	r3, r6
 8000c7a:	fab3 f383 	clz	r3, r3
 8000c7e:	f003 031f 	and.w	r3, r3, #31
 8000c82:	fa22 f303 	lsr.w	r3, r2, r3
 8000c86:	07db      	lsls	r3, r3, #31
 8000c88:	d4a2      	bmi.n	8000bd0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c8a:	f7ff fae9 	bl	8000260 <HAL_GetTick>
 8000c8e:	1bc0      	subs	r0, r0, r7
 8000c90:	2864      	cmp	r0, #100	; 0x64
 8000c92:	d9ed      	bls.n	8000c70 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8000c94:	2003      	movs	r0, #3
 8000c96:	e1ef      	b.n	8001078 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c98:	f7ff fae2 	bl	8000260 <HAL_GetTick>
 8000c9c:	1bc0      	subs	r0, r0, r7
 8000c9e:	2864      	cmp	r0, #100	; 0x64
 8000ca0:	d8f8      	bhi.n	8000c94 <HAL_RCC_OscConfig+0xd0>
 8000ca2:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca6:	6822      	ldr	r2, [r4, #0]
 8000ca8:	fa96 f3a6 	rbit	r3, r6
 8000cac:	fab3 f383 	clz	r3, r3
 8000cb0:	f003 031f 	and.w	r3, r3, #31
 8000cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb8:	07d8      	lsls	r0, r3, #31
 8000cba:	d4ed      	bmi.n	8000c98 <HAL_RCC_OscConfig+0xd4>
 8000cbc:	e788      	b.n	8000bd0 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000cbe:	4c80      	ldr	r4, [pc, #512]	; (8000ec0 <HAL_RCC_OscConfig+0x2fc>)
 8000cc0:	6863      	ldr	r3, [r4, #4]
 8000cc2:	f013 0f0c 	tst.w	r3, #12
 8000cc6:	d007      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cc8:	6863      	ldr	r3, [r4, #4]
 8000cca:	f003 030c 	and.w	r3, r3, #12
 8000cce:	2b08      	cmp	r3, #8
 8000cd0:	d121      	bne.n	8000d16 <HAL_RCC_OscConfig+0x152>
 8000cd2:	6863      	ldr	r3, [r4, #4]
 8000cd4:	03d9      	lsls	r1, r3, #15
 8000cd6:	d41e      	bmi.n	8000d16 <HAL_RCC_OscConfig+0x152>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cde:	6822      	ldr	r2, [r4, #0]
 8000ce0:	fa93 f3a3 	rbit	r3, r3
 8000ce4:	fab3 f383 	clz	r3, r3
 8000ce8:	f003 031f 	and.w	r3, r3, #31
 8000cec:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf0:	07da      	lsls	r2, r3, #31
 8000cf2:	d502      	bpl.n	8000cfa <HAL_RCC_OscConfig+0x136>
 8000cf4:	692b      	ldr	r3, [r5, #16]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d18e      	bne.n	8000c18 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	22f8      	movs	r2, #248	; 0xf8
 8000cfe:	fa92 f2a2 	rbit	r2, r2
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	6969      	ldr	r1, [r5, #20]
 8000d08:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d10:	4313      	orrs	r3, r2
 8000d12:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d14:	e053      	b.n	8000dbe <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d16:	692a      	ldr	r2, [r5, #16]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	b37a      	cbz	r2, 8000d7c <HAL_RCC_OscConfig+0x1b8>
 8000d1c:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	0092      	lsls	r2, r2, #2
 8000d26:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000d2a:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000d2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fa96 	bl	8000260 <HAL_GetTick>
 8000d34:	4607      	mov	r7, r0
 8000d36:	2602      	movs	r6, #2
 8000d38:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3c:	4860      	ldr	r0, [pc, #384]	; (8000ec0 <HAL_RCC_OscConfig+0x2fc>)
 8000d3e:	6822      	ldr	r2, [r4, #0]
 8000d40:	fa96 f3a6 	rbit	r3, r6
 8000d44:	fab3 f383 	clz	r3, r3
 8000d48:	f003 031f 	and.w	r3, r3, #31
 8000d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d50:	07db      	lsls	r3, r3, #31
 8000d52:	d405      	bmi.n	8000d60 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d54:	f7ff fa84 	bl	8000260 <HAL_GetTick>
 8000d58:	1bc0      	subs	r0, r0, r7
 8000d5a:	2802      	cmp	r0, #2
 8000d5c:	d9ec      	bls.n	8000d38 <HAL_RCC_OscConfig+0x174>
 8000d5e:	e799      	b.n	8000c94 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d60:	6803      	ldr	r3, [r0, #0]
 8000d62:	22f8      	movs	r2, #248	; 0xf8
 8000d64:	fa92 f2a2 	rbit	r2, r2
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	6969      	ldr	r1, [r5, #20]
 8000d6e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d72:	fa01 f202 	lsl.w	r2, r1, r2
 8000d76:	4313      	orrs	r3, r2
 8000d78:	6003      	str	r3, [r0, #0]
 8000d7a:	e020      	b.n	8000dbe <HAL_RCC_OscConfig+0x1fa>
 8000d7c:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d80:	fab3 f383 	clz	r3, r3
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000d8a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000d8e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fa66 	bl	8000260 <HAL_GetTick>
 8000d94:	4607      	mov	r7, r0
 8000d96:	2602      	movs	r6, #2
 8000d98:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9c:	6822      	ldr	r2, [r4, #0]
 8000d9e:	fa96 f3a6 	rbit	r3, r6
 8000da2:	fab3 f383 	clz	r3, r3
 8000da6:	f003 031f 	and.w	r3, r3, #31
 8000daa:	fa22 f303 	lsr.w	r3, r2, r3
 8000dae:	07d9      	lsls	r1, r3, #31
 8000db0:	d505      	bpl.n	8000dbe <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000db2:	f7ff fa55 	bl	8000260 <HAL_GetTick>
 8000db6:	1bc0      	subs	r0, r0, r7
 8000db8:	2802      	cmp	r0, #2
 8000dba:	d9ed      	bls.n	8000d98 <HAL_RCC_OscConfig+0x1d4>
 8000dbc:	e76a      	b.n	8000c94 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dbe:	682b      	ldr	r3, [r5, #0]
 8000dc0:	071a      	lsls	r2, r3, #28
 8000dc2:	d546      	bpl.n	8000e52 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc4:	69aa      	ldr	r2, [r5, #24]
 8000dc6:	4c3e      	ldr	r4, [pc, #248]	; (8000ec0 <HAL_RCC_OscConfig+0x2fc>)
 8000dc8:	2301      	movs	r3, #1
 8000dca:	493e      	ldr	r1, [pc, #248]	; (8000ec4 <HAL_RCC_OscConfig+0x300>)
 8000dcc:	b312      	cbz	r2, 8000e14 <HAL_RCC_OscConfig+0x250>
 8000dce:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd2:	fab2 f282 	clz	r2, r2
 8000dd6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dda:	f7ff fa41 	bl	8000260 <HAL_GetTick>
 8000dde:	4607      	mov	r7, r0
 8000de0:	2602      	movs	r6, #2
 8000de2:	fa96 f3a6 	rbit	r3, r6
 8000de6:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000dec:	fa96 f3a6 	rbit	r3, r6
 8000df0:	fab3 f383 	clz	r3, r3
 8000df4:	f003 031f 	and.w	r3, r3, #31
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	07db      	lsls	r3, r3, #31
 8000dfe:	d405      	bmi.n	8000e0c <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e00:	f7ff fa2e 	bl	8000260 <HAL_GetTick>
 8000e04:	1bc0      	subs	r0, r0, r7
 8000e06:	2802      	cmp	r0, #2
 8000e08:	d9eb      	bls.n	8000de2 <HAL_RCC_OscConfig+0x21e>
 8000e0a:	e743      	b.n	8000c94 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f7ff fa2d 	bl	800026c <HAL_Delay>
 8000e12:	e01e      	b.n	8000e52 <HAL_RCC_OscConfig+0x28e>
 8000e14:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e18:	fab3 f383 	clz	r3, r3
 8000e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e20:	f7ff fa1e 	bl	8000260 <HAL_GetTick>
 8000e24:	4607      	mov	r7, r0
 8000e26:	2602      	movs	r6, #2
 8000e28:	fa96 f3a6 	rbit	r3, r6
 8000e2c:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e32:	fa96 f3a6 	rbit	r3, r6
 8000e36:	fab3 f383 	clz	r3, r3
 8000e3a:	f003 031f 	and.w	r3, r3, #31
 8000e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e42:	07d8      	lsls	r0, r3, #31
 8000e44:	d505      	bpl.n	8000e52 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e46:	f7ff fa0b 	bl	8000260 <HAL_GetTick>
 8000e4a:	1bc0      	subs	r0, r0, r7
 8000e4c:	2802      	cmp	r0, #2
 8000e4e:	d9eb      	bls.n	8000e28 <HAL_RCC_OscConfig+0x264>
 8000e50:	e720      	b.n	8000c94 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e52:	682b      	ldr	r3, [r5, #0]
 8000e54:	0759      	lsls	r1, r3, #29
 8000e56:	d404      	bmi.n	8000e62 <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e58:	69ea      	ldr	r2, [r5, #28]
 8000e5a:	2a00      	cmp	r2, #0
 8000e5c:	f040 8081 	bne.w	8000f62 <HAL_RCC_OscConfig+0x39e>
 8000e60:	e0d8      	b.n	8001014 <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4c17      	ldr	r4, [pc, #92]	; (8000ec0 <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e64:	4e18      	ldr	r6, [pc, #96]	; (8000ec8 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	69e3      	ldr	r3, [r4, #28]
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	61e3      	str	r3, [r4, #28]
 8000e6e:	69e3      	ldr	r3, [r4, #28]
 8000e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e78:	6833      	ldr	r3, [r6, #0]
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7e:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e80:	f7ff f9ee 	bl	8000260 <HAL_GetTick>
 8000e84:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000e86:	6833      	ldr	r3, [r6, #0]
 8000e88:	05da      	lsls	r2, r3, #23
 8000e8a:	d405      	bmi.n	8000e98 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e8c:	f7ff f9e8 	bl	8000260 <HAL_GetTick>
 8000e90:	1bc0      	subs	r0, r0, r7
 8000e92:	2864      	cmp	r0, #100	; 0x64
 8000e94:	d9f7      	bls.n	8000e86 <HAL_RCC_OscConfig+0x2c2>
 8000e96:	e6fd      	b.n	8000c94 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e98:	68eb      	ldr	r3, [r5, #12]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d01c      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x314>
 8000e9e:	b9ab      	cbnz	r3, 8000ecc <HAL_RCC_OscConfig+0x308>
 8000ea0:	6a23      	ldr	r3, [r4, #32]
 8000ea2:	2602      	movs	r6, #2
 8000ea4:	f023 0301 	bic.w	r3, r3, #1
 8000ea8:	6223      	str	r3, [r4, #32]
 8000eaa:	6a23      	ldr	r3, [r4, #32]
 8000eac:	4637      	mov	r7, r6
 8000eae:	f023 0304 	bic.w	r3, r3, #4
 8000eb2:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb4:	f7ff f9d4 	bl	8000260 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb8:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ebc:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ebe:	e048      	b.n	8000f52 <HAL_RCC_OscConfig+0x38e>
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	42420480 	.word	0x42420480
 8000ec8:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	6a23      	ldr	r3, [r4, #32]
 8000ed0:	d106      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x31c>
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	6223      	str	r3, [r4, #32]
 8000ed8:	6a23      	ldr	r3, [r4, #32]
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	e005      	b.n	8000eec <HAL_RCC_OscConfig+0x328>
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	6223      	str	r3, [r4, #32]
 8000ee6:	6a23      	ldr	r3, [r4, #32]
 8000ee8:	f023 0304 	bic.w	r3, r3, #4
 8000eec:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eee:	f7ff f9b7 	bl	8000260 <HAL_GetTick>
 8000ef2:	2602      	movs	r6, #2
 8000ef4:	4681      	mov	r9, r0
 8000ef6:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ef8:	f241 3788 	movw	r7, #5000	; 0x1388
 8000efc:	fa96 f3a6 	rbit	r3, r6
 8000f00:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f04:	b10b      	cbz	r3, 8000f0a <HAL_RCC_OscConfig+0x346>
 8000f06:	6a22      	ldr	r2, [r4, #32]
 8000f08:	e000      	b.n	8000f0c <HAL_RCC_OscConfig+0x348>
 8000f0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f0c:	fa98 f3a8 	rbit	r3, r8
 8000f10:	fab3 f383 	clz	r3, r3
 8000f14:	f003 031f 	and.w	r3, r3, #31
 8000f18:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1c:	07db      	lsls	r3, r3, #31
 8000f1e:	d49b      	bmi.n	8000e58 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f20:	f7ff f99e 	bl	8000260 <HAL_GetTick>
 8000f24:	ebc9 0000 	rsb	r0, r9, r0
 8000f28:	42b8      	cmp	r0, r7
 8000f2a:	d9e7      	bls.n	8000efc <HAL_RCC_OscConfig+0x338>
 8000f2c:	e6b2      	b.n	8000c94 <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f30:	fa97 f3a7 	rbit	r3, r7
 8000f34:	fab3 f383 	clz	r3, r3
 8000f38:	f003 031f 	and.w	r3, r3, #31
 8000f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f40:	07d8      	lsls	r0, r3, #31
 8000f42:	d589      	bpl.n	8000e58 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f44:	f7ff f98c 	bl	8000260 <HAL_GetTick>
 8000f48:	ebc8 0000 	rsb	r0, r8, r0
 8000f4c:	4548      	cmp	r0, r9
 8000f4e:	f63f aea1 	bhi.w	8000c94 <HAL_RCC_OscConfig+0xd0>
 8000f52:	fa96 f3a6 	rbit	r3, r6
 8000f56:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0e7      	beq.n	8000f2e <HAL_RCC_OscConfig+0x36a>
 8000f5e:	6a22      	ldr	r2, [r4, #32]
 8000f60:	e7e6      	b.n	8000f30 <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f62:	4c47      	ldr	r4, [pc, #284]	; (8001080 <HAL_RCC_OscConfig+0x4bc>)
 8000f64:	6863      	ldr	r3, [r4, #4]
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	2b08      	cmp	r3, #8
 8000f6c:	f43f ae54 	beq.w	8000c18 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f70:	2a02      	cmp	r2, #2
 8000f72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f76:	d15c      	bne.n	8001032 <HAL_RCC_OscConfig+0x46e>
 8000f78:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f7c:	fab3 f383 	clz	r3, r3
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000f86:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8e:	f7ff f967 	bl	8000260 <HAL_GetTick>
 8000f92:	4680      	mov	r8, r0
 8000f94:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000f98:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f9c:	4f38      	ldr	r7, [pc, #224]	; (8001080 <HAL_RCC_OscConfig+0x4bc>)
 8000f9e:	6822      	ldr	r2, [r4, #0]
 8000fa0:	fa96 f3a6 	rbit	r3, r6
 8000fa4:	fab3 f383 	clz	r3, r3
 8000fa8:	f003 031f 	and.w	r3, r3, #31
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	07d9      	lsls	r1, r3, #31
 8000fb2:	d431      	bmi.n	8001018 <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fb4:	6a2e      	ldr	r6, [r5, #32]
 8000fb6:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8000fba:	d105      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 8000fc2:	68a9      	ldr	r1, [r5, #8]
 8000fc4:	4301      	orrs	r1, r0
 8000fc6:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fc8:	6863      	ldr	r3, [r4, #4]
 8000fca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000fcc:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000fd0:	4332      	orrs	r2, r6
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	6063      	str	r3, [r4, #4]
 8000fd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fda:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fde:	fab3 f383 	clz	r3, r3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000fe8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff f936 	bl	8000260 <HAL_GetTick>
 8000ff4:	4606      	mov	r6, r0
 8000ff6:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000ffa:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ffe:	6822      	ldr	r2, [r4, #0]
 8001000:	fa95 f3a5 	rbit	r3, r5
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	f003 031f 	and.w	r3, r3, #31
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	07da      	lsls	r2, r3, #31
 8001012:	d508      	bpl.n	8001026 <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001014:	2000      	movs	r0, #0
 8001016:	e02f      	b.n	8001078 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001018:	f7ff f922 	bl	8000260 <HAL_GetTick>
 800101c:	ebc8 0000 	rsb	r0, r8, r0
 8001020:	2802      	cmp	r0, #2
 8001022:	d9b9      	bls.n	8000f98 <HAL_RCC_OscConfig+0x3d4>
 8001024:	e636      	b.n	8000c94 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001026:	f7ff f91b 	bl	8000260 <HAL_GetTick>
 800102a:	1b80      	subs	r0, r0, r6
 800102c:	2802      	cmp	r0, #2
 800102e:	d9e4      	bls.n	8000ffa <HAL_RCC_OscConfig+0x436>
 8001030:	e630      	b.n	8000c94 <HAL_RCC_OscConfig+0xd0>
 8001032:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001036:	fab3 f383 	clz	r3, r3
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001040:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff f90a 	bl	8000260 <HAL_GetTick>
 800104c:	4606      	mov	r6, r0
 800104e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001052:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001056:	6822      	ldr	r2, [r4, #0]
 8001058:	fa95 f3a5 	rbit	r3, r5
 800105c:	fab3 f383 	clz	r3, r3
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
 8001068:	07db      	lsls	r3, r3, #31
 800106a:	d5d3      	bpl.n	8001014 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800106c:	f7ff f8f8 	bl	8000260 <HAL_GetTick>
 8001070:	1b80      	subs	r0, r0, r6
 8001072:	2802      	cmp	r0, #2
 8001074:	d9ed      	bls.n	8001052 <HAL_RCC_OscConfig+0x48e>
 8001076:	e60d      	b.n	8000c94 <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8001078:	b003      	add	sp, #12
 800107a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001086:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001088:	f103 0510 	add.w	r5, r3, #16
 800108c:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800108e:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001090:	ac02      	add	r4, sp, #8
 8001092:	4622      	mov	r2, r4
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	6859      	ldr	r1, [r3, #4]
 8001098:	3308      	adds	r3, #8
 800109a:	c203      	stmia	r2!, {r0, r1}
 800109c:	42ab      	cmp	r3, r5
 800109e:	4614      	mov	r4, r2
 80010a0:	d1f7      	bne.n	8001092 <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80010a2:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80010a4:	4c18      	ldr	r4, [pc, #96]	; (8001108 <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80010a6:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80010aa:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010ac:	f000 030c 	and.w	r3, r0, #12
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d124      	bne.n	80010fe <HAL_RCC_GetSysClockFreq+0x7a>
 80010b4:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80010b8:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 80010bc:	fab3 f383 	clz	r3, r3
 80010c0:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
 80010c8:	aa06      	add	r2, sp, #24
 80010ca:	4413      	add	r3, r2
 80010cc:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010d0:	03c3      	lsls	r3, r0, #15
 80010d2:	d511      	bpl.n	80010f8 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 80010d4:	6862      	ldr	r2, [r4, #4]
 80010d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	fab3 f083 	clz	r0, r3
 80010e2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80010e6:	40c3      	lsrs	r3, r0
 80010e8:	aa06      	add	r2, sp, #24
 80010ea:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80010ec:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_RCC_GetSysClockFreq+0x88>)
 80010f2:	fbb3 f0f0 	udiv	r0, r3, r0
 80010f6:	e000      	b.n	80010fa <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <HAL_RCC_GetSysClockFreq+0x8c>)
 80010fa:	4348      	muls	r0, r1
 80010fc:	e000      	b.n	8001100 <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001100:	b006      	add	sp, #24
 8001102:	bd70      	pop	{r4, r5, r6, pc}
 8001104:	08003fbc 	.word	0x08003fbc
 8001108:	40021000 	.word	0x40021000
 800110c:	007a1200 	.word	0x007a1200
 8001110:	003d0900 	.word	0x003d0900

08001114 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001114:	4a54      	ldr	r2, [pc, #336]	; (8001268 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800111a:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800111c:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001124:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001126:	d30a      	bcc.n	800113e <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001128:	6831      	ldr	r1, [r6, #0]
 800112a:	078c      	lsls	r4, r1, #30
 800112c:	d514      	bpl.n	8001158 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800112e:	484f      	ldr	r0, [pc, #316]	; (800126c <HAL_RCC_ClockConfig+0x158>)
 8001130:	6843      	ldr	r3, [r0, #4]
 8001132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001136:	68b3      	ldr	r3, [r6, #8]
 8001138:	4313      	orrs	r3, r2
 800113a:	6043      	str	r3, [r0, #4]
 800113c:	e00c      	b.n	8001158 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113e:	6813      	ldr	r3, [r2, #0]
 8001140:	f023 0307 	bic.w	r3, r3, #7
 8001144:	430b      	orrs	r3, r1
 8001146:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001148:	6813      	ldr	r3, [r2, #0]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	4299      	cmp	r1, r3
 8001150:	d0ea      	beq.n	8001128 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001152:	2001      	movs	r0, #1
 8001154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001158:	07c8      	lsls	r0, r1, #31
 800115a:	d406      	bmi.n	800116a <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800115c:	4a42      	ldr	r2, [pc, #264]	; (8001268 <HAL_RCC_ClockConfig+0x154>)
 800115e:	6813      	ldr	r3, [r2, #0]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	429d      	cmp	r5, r3
 8001166:	d34a      	bcc.n	80011fe <HAL_RCC_ClockConfig+0xea>
 8001168:	e053      	b.n	8001212 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116a:	6872      	ldr	r2, [r6, #4]
 800116c:	4c3f      	ldr	r4, [pc, #252]	; (800126c <HAL_RCC_ClockConfig+0x158>)
 800116e:	2a01      	cmp	r2, #1
 8001170:	d102      	bne.n	8001178 <HAL_RCC_ClockConfig+0x64>
 8001172:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001176:	e004      	b.n	8001182 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001178:	2a02      	cmp	r2, #2
 800117a:	bf0c      	ite	eq
 800117c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001180:	2302      	movne	r3, #2
 8001182:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001186:	6821      	ldr	r1, [r4, #0]
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	fab3 f383 	clz	r3, r3
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	fa21 f303 	lsr.w	r3, r1, r3
 8001198:	07d9      	lsls	r1, r3, #31
 800119a:	d5da      	bpl.n	8001152 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119c:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800119e:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011a2:	f023 0303 	bic.w	r3, r3, #3
 80011a6:	431a      	orrs	r2, r3
 80011a8:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011aa:	f7ff f859 	bl	8000260 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ae:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b0:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d10c      	bne.n	80011d0 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80011b6:	6863      	ldr	r3, [r4, #4]
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d0cd      	beq.n	800115c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c0:	f7ff f84e 	bl	8000260 <HAL_GetTick>
 80011c4:	1bc0      	subs	r0, r0, r7
 80011c6:	4540      	cmp	r0, r8
 80011c8:	d9f5      	bls.n	80011b6 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 80011ca:	2003      	movs	r0, #3
 80011cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d10f      	bne.n	80011f4 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d4:	6863      	ldr	r3, [r4, #4]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d0be      	beq.n	800115c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011de:	f7ff f83f 	bl	8000260 <HAL_GetTick>
 80011e2:	1bc0      	subs	r0, r0, r7
 80011e4:	4540      	cmp	r0, r8
 80011e6:	d9f5      	bls.n	80011d4 <HAL_RCC_ClockConfig+0xc0>
 80011e8:	e7ef      	b.n	80011ca <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ea:	f7ff f839 	bl	8000260 <HAL_GetTick>
 80011ee:	1bc0      	subs	r0, r0, r7
 80011f0:	4540      	cmp	r0, r8
 80011f2:	d8ea      	bhi.n	80011ca <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011f4:	6863      	ldr	r3, [r4, #4]
 80011f6:	f013 0f0c 	tst.w	r3, #12
 80011fa:	d1f6      	bne.n	80011ea <HAL_RCC_ClockConfig+0xd6>
 80011fc:	e7ae      	b.n	800115c <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fe:	6813      	ldr	r3, [r2, #0]
 8001200:	f023 0307 	bic.w	r3, r3, #7
 8001204:	432b      	orrs	r3, r5
 8001206:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001208:	6813      	ldr	r3, [r2, #0]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	429d      	cmp	r5, r3
 8001210:	d19f      	bne.n	8001152 <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001212:	6831      	ldr	r1, [r6, #0]
 8001214:	4c15      	ldr	r4, [pc, #84]	; (800126c <HAL_RCC_ClockConfig+0x158>)
 8001216:	f011 0f04 	tst.w	r1, #4
 800121a:	d005      	beq.n	8001228 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800121c:	6863      	ldr	r3, [r4, #4]
 800121e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001222:	68f3      	ldr	r3, [r6, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001228:	070b      	lsls	r3, r1, #28
 800122a:	d506      	bpl.n	800123a <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800122c:	6863      	ldr	r3, [r4, #4]
 800122e:	6932      	ldr	r2, [r6, #16]
 8001230:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001234:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001238:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800123a:	f7ff ff23 	bl	8001084 <HAL_RCC_GetSysClockFreq>
 800123e:	6863      	ldr	r3, [r4, #4]
 8001240:	22f0      	movs	r2, #240	; 0xf0
 8001242:	fa92 f2a2 	rbit	r2, r2
 8001246:	fab2 f282 	clz	r2, r2
 800124a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800124e:	40d3      	lsrs	r3, r2
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_RCC_ClockConfig+0x15c>)
 8001252:	5cd3      	ldrb	r3, [r2, r3]
 8001254:	40d8      	lsrs	r0, r3
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <HAL_RCC_ClockConfig+0x160>)
 8001258:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800125a:	200f      	movs	r0, #15
 800125c:	f7fe ffd4 	bl	8000208 <HAL_InitTick>
  
  return HAL_OK;
 8001260:	2000      	movs	r0, #0
}
 8001262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001266:	bf00      	nop
 8001268:	40022000 	.word	0x40022000
 800126c:	40021000 	.word	0x40021000
 8001270:	08004028 	.word	0x08004028
 8001274:	20000000 	.word	0x20000000

08001278 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001278:	4b01      	ldr	r3, [pc, #4]	; (8001280 <HAL_RCC_GetHCLKFreq+0x8>)
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000000 	.word	0x20000000

08001284 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001286:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	fa92 f2a2 	rbit	r2, r2
 8001290:	fab2 f282 	clz	r2, r2
 8001294:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001298:	40d3      	lsrs	r3, r2
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80012a0:	6810      	ldr	r0, [r2, #0]
}    
 80012a2:	40d8      	lsrs	r0, r3
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	08004038 	.word	0x08004038
 80012b0:	20000000 	.word	0x20000000

080012b4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012b6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	fa92 f2a2 	rbit	r2, r2
 80012c0:	fab2 f282 	clz	r2, r2
 80012c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80012c8:	40d3      	lsrs	r3, r2
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80012cc:	5cd3      	ldrb	r3, [r2, r3]
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80012d0:	6810      	ldr	r0, [r2, #0]
} 
 80012d2:	40d8      	lsrs	r0, r3
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000
 80012dc:	08004038 	.word	0x08004038
 80012e0:	20000000 	.word	0x20000000

080012e4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80012e4:	6803      	ldr	r3, [r0, #0]
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80012e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80012ea:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80012ec:	07d8      	lsls	r0, r3, #31
 80012ee:	d564      	bpl.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80012f0:	4c39      	ldr	r4, [pc, #228]	; (80013d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f2:	4e3a      	ldr	r6, [pc, #232]	; (80013dc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80012f4:	69e3      	ldr	r3, [r4, #28]
 80012f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fa:	61e3      	str	r3, [r4, #28]
 80012fc:	69e3      	ldr	r3, [r4, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8001306:	6833      	ldr	r3, [r6, #0]
 8001308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130c:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800130e:	f7fe ffa7 	bl	8000260 <HAL_GetTick>
 8001312:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001314:	6833      	ldr	r3, [r6, #0]
 8001316:	05d9      	lsls	r1, r3, #23
 8001318:	d406      	bmi.n	8001328 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131a:	f7fe ffa1 	bl	8000260 <HAL_GetTick>
 800131e:	1bc0      	subs	r0, r0, r7
 8001320:	2864      	cmp	r0, #100	; 0x64
 8001322:	d9f7      	bls.n	8001314 <HAL_RCCEx_PeriphCLKConfig+0x30>
      {
        return HAL_TIMEOUT;
 8001324:	2003      	movs	r0, #3
 8001326:	e054      	b.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0xee>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001328:	6a23      	ldr	r3, [r4, #32]
 800132a:	482b      	ldr	r0, [pc, #172]	; (80013d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800132c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001330:	d106      	bne.n	8001340 <HAL_RCCEx_PeriphCLKConfig+0x5c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001332:	6a23      	ldr	r3, [r4, #32]
 8001334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001338:	686b      	ldr	r3, [r5, #4]
 800133a:	4313      	orrs	r3, r2
 800133c:	6223      	str	r3, [r4, #32]
 800133e:	e03c      	b.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001340:	686a      	ldr	r2, [r5, #4]
 8001342:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001346:	4293      	cmp	r3, r2
 8001348:	d0f3      	beq.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800134a:	6a01      	ldr	r1, [r0, #32]
 800134c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001350:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 8001354:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001358:	fab2 f282 	clz	r2, r2
 800135c:	4e20      	ldr	r6, [pc, #128]	; (80013e0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800135e:	f04f 0e01 	mov.w	lr, #1
 8001362:	f846 e022 	str.w	lr, [r6, r2, lsl #2]
 8001366:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800136a:	fab3 f383 	clz	r3, r3
 800136e:	2200      	movs	r2, #0
 8001370:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001374:	07ca      	lsls	r2, r1, #31
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001376:	6207      	str	r7, [r0, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001378:	d5db      	bpl.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 800137a:	f7fe ff71 	bl	8000260 <HAL_GetTick>
 800137e:	2602      	movs	r6, #2
 8001380:	4680      	mov	r8, r0
 8001382:	4637      	mov	r7, r6
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001384:	f241 3988 	movw	r9, #5000	; 0x1388
 8001388:	fa96 f3a6 	rbit	r3, r6
 800138c:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001390:	b10b      	cbz	r3, 8001396 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8001392:	6a22      	ldr	r2, [r4, #32]
 8001394:	e000      	b.n	8001398 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001396:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001398:	fa97 f3a7 	rbit	r3, r7
 800139c:	fab3 f383 	clz	r3, r3
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
 80013a8:	07db      	lsls	r3, r3, #31
 80013aa:	d4c2      	bmi.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ac:	f7fe ff58 	bl	8000260 <HAL_GetTick>
 80013b0:	ebc8 0000 	rsb	r0, r8, r0
 80013b4:	4548      	cmp	r0, r9
 80013b6:	d9e7      	bls.n	8001388 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80013b8:	e7b4      	b.n	8001324 <HAL_RCCEx_PeriphCLKConfig+0x40>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80013ba:	6828      	ldr	r0, [r5, #0]
 80013bc:	f010 0002 	ands.w	r0, r0, #2
 80013c0:	d007      	beq.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80013c2:	4905      	ldr	r1, [pc, #20]	; (80013d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80013c4:	2000      	movs	r0, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80013c6:	684b      	ldr	r3, [r1, #4]
 80013c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80013cc:	68ab      	ldr	r3, [r5, #8]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 80013d2:	b003      	add	sp, #12
 80013d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40007000 	.word	0x40007000
 80013e0:	42420400 	.word	0x42420400

080013e4 <HAL_RCCEx_GetPeriphCLKFreq>:
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80013e4:	2801      	cmp	r0, #1
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80013e6:	b508      	push	{r3, lr}
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80013e8:	d013      	beq.n	8001412 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 80013ea:	2802      	cmp	r0, #2
 80013ec:	d132      	bne.n	8001454 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      }
      break;
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
 80013ee:	f7ff ff61 	bl	80012b4 <HAL_RCC_GetPCLK2Freq>
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_RCCEx_GetPeriphCLKFreq+0x74>)
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013fa:	fa93 f3a3 	rbit	r3, r3
 80013fe:	fab3 f183 	clz	r1, r3
 8001402:	f402 4340 	and.w	r3, r2, #49152	; 0xc000
 8001406:	40cb      	lsrs	r3, r1
 8001408:	3301      	adds	r3, #1
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001410:	bd08      	pop	{r3, pc}
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001412:	f240 3102 	movw	r1, #770	; 0x302
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8001416:	4a10      	ldr	r2, [pc, #64]	; (8001458 <HAL_RCCEx_GetPeriphCLKFreq+0x74>)
 8001418:	6a13      	ldr	r3, [r2, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800141a:	4019      	ands	r1, r3
 800141c:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8001420:	d015      	beq.n	800144e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800142a:	d105      	bne.n	8001438 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800142c:	6a53      	ldr	r3, [r2, #36]	; 0x24
      {
        frequency = LSI_VALUE;
 800142e:	f649 4040 	movw	r0, #40000	; 0x9c40
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001432:	f013 0f02 	tst.w	r3, #2
 8001436:	e007      	b.n	8001448 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800143c:	d10a      	bne.n	8001454 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        frequency = HSE_VALUE / 128;
 800143e:	f24f 4024 	movw	r0, #62500	; 0xf424
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001442:	6813      	ldr	r3, [r2, #0]
 8001444:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      {
        frequency = HSE_VALUE / 128;
 8001448:	bf08      	it	eq
 800144a:	2000      	moveq	r0, #0
 800144c:	bd08      	pop	{r3, pc}
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
      {
        frequency = LSE_VALUE;
 800144e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001452:	bd08      	pop	{r3, pc}
        frequency = HSE_VALUE / 128;
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0;
 8001454:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8001456:	bd08      	pop	{r3, pc}
 8001458:	40021000 	.word	0x40021000

0800145c <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800145c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001460:	6806      	ldr	r6, [r0, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 8001462:	6881      	ldr	r1, [r0, #8]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001464:	6933      	ldr	r3, [r6, #16]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001466:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001468:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800146c:	68c3      	ldr	r3, [r0, #12]
 800146e:	2419      	movs	r4, #25
 8001470:	4313      	orrs	r3, r2
 8001472:	6133      	str	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 8001474:	6903      	ldr	r3, [r0, #16]
 8001476:	68f2      	ldr	r2, [r6, #12]
 8001478:	4319      	orrs	r1, r3
 800147a:	6943      	ldr	r3, [r0, #20]
 800147c:	4319      	orrs	r1, r3
 800147e:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 8001482:	f023 030c 	bic.w	r3, r3, #12
 8001486:	430b      	orrs	r3, r1
 8001488:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800148a:	6973      	ldr	r3, [r6, #20]
 800148c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001490:	6983      	ldr	r3, [r0, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	6173      	str	r3, [r6, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <UART_SetConfig+0x130>)
 8001498:	429e      	cmp	r6, r3
 800149a:	d131      	bne.n	8001500 <UART_SetConfig+0xa4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800149c:	f7ff ff0a 	bl	80012b4 <HAL_RCC_GetPCLK2Freq>
 80014a0:	4360      	muls	r0, r4
 80014a2:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80014a6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80014aa:	00bf      	lsls	r7, r7, #2
 80014ac:	fbb0 f7f7 	udiv	r7, r0, r7
 80014b0:	f7ff ff00 	bl	80012b4 <HAL_RCC_GetPCLK2Freq>
 80014b4:	4360      	muls	r0, r4
 80014b6:	f8d9 5004 	ldr.w	r5, [r9, #4]
 80014ba:	fbb7 f7f8 	udiv	r7, r7, r8
 80014be:	00ad      	lsls	r5, r5, #2
 80014c0:	fbb0 f5f5 	udiv	r5, r0, r5
 80014c4:	f7ff fef6 	bl	80012b4 <HAL_RCC_GetPCLK2Freq>
 80014c8:	4360      	muls	r0, r4
 80014ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80014ce:	013f      	lsls	r7, r7, #4
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80014d6:	fbb0 f0f8 	udiv	r0, r0, r8
 80014da:	fb08 5510 	mls	r5, r8, r0, r5
 80014de:	f7ff fee9 	bl	80012b4 <HAL_RCC_GetPCLK2Freq>
 80014e2:	012d      	lsls	r5, r5, #4
 80014e4:	3532      	adds	r5, #50	; 0x32
 80014e6:	fbb5 f5f8 	udiv	r5, r5, r8
 80014ea:	4360      	muls	r0, r4
 80014ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80014f0:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80014f4:	0089      	lsls	r1, r1, #2
 80014f6:	fbb0 faf1 	udiv	sl, r0, r1
 80014fa:	f7ff fedb 	bl	80012b4 <HAL_RCC_GetPCLK2Freq>
 80014fe:	e030      	b.n	8001562 <UART_SetConfig+0x106>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001500:	f7ff fec0 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 8001504:	4360      	muls	r0, r4
 8001506:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800150a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800150e:	00bf      	lsls	r7, r7, #2
 8001510:	fbb0 f7f7 	udiv	r7, r0, r7
 8001514:	f7ff feb6 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 8001518:	4360      	muls	r0, r4
 800151a:	f8d9 5004 	ldr.w	r5, [r9, #4]
 800151e:	fbb7 f7f8 	udiv	r7, r7, r8
 8001522:	00ad      	lsls	r5, r5, #2
 8001524:	fbb0 f5f5 	udiv	r5, r0, r5
 8001528:	f7ff feac 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 800152c:	4360      	muls	r0, r4
 800152e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001532:	013f      	lsls	r7, r7, #4
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	fbb0 f0f3 	udiv	r0, r0, r3
 800153a:	fbb0 f0f8 	udiv	r0, r0, r8
 800153e:	fb08 5510 	mls	r5, r8, r0, r5
 8001542:	f7ff fe9f 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 8001546:	012d      	lsls	r5, r5, #4
 8001548:	3532      	adds	r5, #50	; 0x32
 800154a:	fbb5 f5f8 	udiv	r5, r5, r8
 800154e:	4360      	muls	r0, r4
 8001550:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001554:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001558:	0089      	lsls	r1, r1, #2
 800155a:	fbb0 faf1 	udiv	sl, r0, r1
 800155e:	f7ff fe91 	bl	8001284 <HAL_RCC_GetPCLK1Freq>
 8001562:	4344      	muls	r4, r0
 8001564:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8001568:	0080      	lsls	r0, r0, #2
 800156a:	fbb4 f0f0 	udiv	r0, r4, r0
 800156e:	fbb0 f0f8 	udiv	r0, r0, r8
 8001572:	fb08 a210 	mls	r2, r8, r0, sl
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	3232      	adds	r2, #50	; 0x32
 800157a:	fbb2 f3f8 	udiv	r3, r2, r8
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	442b      	add	r3, r5
 8001584:	441f      	add	r7, r3
 8001586:	60b7      	str	r7, [r6, #8]
 8001588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800158c:	40013800 	.word	0x40013800

08001590 <UART_WaitOnFlagUntilTimeout.constprop.1>:
  * @param  Flag: specifies the UART flag to check.
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001592:	4604      	mov	r4, r0
 8001594:	460e      	mov	r6, r1
 8001596:	4615      	mov	r5, r2
{
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001598:	f7fe fe62 	bl	8000260 <HAL_GetTick>
 800159c:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800159e:	6822      	ldr	r2, [r4, #0]
 80015a0:	6813      	ldr	r3, [r2, #0]
 80015a2:	ea36 0303 	bics.w	r3, r6, r3
 80015a6:	d021      	beq.n	80015ec <UART_WaitOnFlagUntilTimeout.constprop.1+0x5c>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80015a8:	1c6b      	adds	r3, r5, #1
 80015aa:	d0f9      	beq.n	80015a0 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80015ac:	b9c5      	cbnz	r5, 80015e0 <UART_WaitOnFlagUntilTimeout.constprop.1+0x50>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80015ae:	6823      	ldr	r3, [r4, #0]
          huart->State= HAL_UART_STATE_READY;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_TIMEOUT;
 80015b0:	2003      	movs	r0, #3
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b8:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	f022 0220 	bic.w	r2, r2, #32
 80015c0:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015c8:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80015d8:	2300      	movs	r3, #0
 80015da:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80015de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80015e0:	f7fe fe3e 	bl	8000260 <HAL_GetTick>
 80015e4:	1bc0      	subs	r0, r0, r7
 80015e6:	4285      	cmp	r5, r0
 80015e8:	d2d9      	bcs.n	800159e <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 80015ea:	e7e0      	b.n	80015ae <UART_WaitOnFlagUntilTimeout.constprop.1+0x1e>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80015ec:	2000      	movs	r0, #0
}
 80015ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080015f0 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015f0:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80015f2:	4604      	mov	r4, r0
 80015f4:	b330      	cbz	r0, 8001644 <HAL_UART_Init+0x54>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 80015f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015fe:	b91b      	cbnz	r3, 8001608 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001600:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001604:	f002 fc1a 	bl	8003e3c <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001608:	6822      	ldr	r2, [r4, #0]
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 800160a:	2302      	movs	r3, #2
 800160c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001610:	68d3      	ldr	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001612:	4620      	mov	r0, r4
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001614:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001618:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800161a:	f7ff ff1f 	bl	800145c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800161e:	6823      	ldr	r3, [r4, #0]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001620:	2000      	movs	r0, #0
  UART_SetConfig(huart);
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001630:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001638:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
 800163a:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800163c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800163e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001642:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001644:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8001646:	bd10      	pop	{r4, pc}

08001648 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001648:	b570      	push	{r4, r5, r6, lr}
 800164a:	460d      	mov	r5, r1
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 800164c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001650:	4604      	mov	r4, r0
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 8001652:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001654:	2901      	cmp	r1, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001656:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001658:	d001      	beq.n	800165e <HAL_UART_Transmit+0x16>
 800165a:	2922      	cmp	r1, #34	; 0x22
 800165c:	d14e      	bne.n	80016fc <HAL_UART_Transmit+0xb4>
  {
    if((pData == NULL) || (Size == 0))
 800165e:	2d00      	cmp	r5, #0
 8001660:	d04a      	beq.n	80016f8 <HAL_UART_Transmit+0xb0>
 8001662:	2a00      	cmp	r2, #0
 8001664:	d048      	beq.n	80016f8 <HAL_UART_Transmit+0xb0>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001666:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800166a:	2b01      	cmp	r3, #1
 800166c:	d046      	beq.n	80016fc <HAL_UART_Transmit+0xb4>
 800166e:	2301      	movs	r3, #1
 8001670:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001674:	2300      	movs	r3, #0
 8001676:	63e3      	str	r3, [r4, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001678:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    huart->TxXferSize = Size;
 800167c:	84a2      	strh	r2, [r4, #36]	; 0x24
    /* Process Locked */
    __HAL_LOCK(huart);

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 800167e:	2b22      	cmp	r3, #34	; 0x22
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001680:	bf0c      	ite	eq
 8001682:	2332      	moveq	r3, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001684:	2312      	movne	r3, #18
 8001686:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 800168a:	84e2      	strh	r2, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0)
 800168c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800168e:	b302      	cbz	r2, 80016d2 <HAL_UART_Transmit+0x8a>
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001690:	68a3      	ldr	r3, [r4, #8]

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 8001692:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
 8001698:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800169a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800169e:	4632      	mov	r2, r6
 80016a0:	4620      	mov	r0, r4
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016a2:	d10d      	bne.n	80016c0 <HAL_UART_Transmit+0x78>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80016a4:	f7ff ff74 	bl	8001590 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80016a8:	b108      	cbz	r0, 80016ae <HAL_UART_Transmit+0x66>
        {
          return HAL_TIMEOUT;
 80016aa:	2003      	movs	r0, #3
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80016ae:	882b      	ldrh	r3, [r5, #0]
 80016b0:	6822      	ldr	r2, [r4, #0]
 80016b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016b6:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80016b8:	6923      	ldr	r3, [r4, #16]
 80016ba:	b943      	cbnz	r3, 80016ce <HAL_UART_Transmit+0x86>
        {
          pData +=2;
 80016bc:	3502      	adds	r5, #2
 80016be:	e7e5      	b.n	800168c <HAL_UART_Transmit+0x44>
          pData +=1;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80016c0:	f7ff ff66 	bl	8001590 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80016c4:	2800      	cmp	r0, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_UART_Transmit+0x62>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	782a      	ldrb	r2, [r5, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	3501      	adds	r5, #1
 80016d0:	e7dc      	b.n	800168c <HAL_UART_Transmit+0x44>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80016d2:	4632      	mov	r2, r6
 80016d4:	2140      	movs	r1, #64	; 0x40
 80016d6:	4620      	mov	r0, r4
 80016d8:	f7ff ff5a 	bl	8001590 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80016dc:	2800      	cmp	r0, #0
 80016de:	d1e4      	bne.n	80016aa <HAL_UART_Transmit+0x62>
    { 
      return HAL_TIMEOUT;
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80016e0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80016e4:	2b32      	cmp	r3, #50	; 0x32
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80016e6:	bf0c      	ite	eq
 80016e8:	2322      	moveq	r3, #34	; 0x22
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 80016ea:	2301      	movne	r3, #1
 80016ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016f0:	2300      	movs	r3, #0
 80016f2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

    return HAL_OK;
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
  {
    if((pData == NULL) || (Size == 0))
    {
      return  HAL_ERROR;
 80016f8:	2001      	movs	r0, #1
 80016fa:	bd70      	pop	{r4, r5, r6, pc}

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80016fc:	2002      	movs	r0, #2
  }
}
 80016fe:	bd70      	pop	{r4, r5, r6, pc}

08001700 <HAL_UART_Receive_IT>:
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 8001700:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001704:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8001706:	2b01      	cmp	r3, #1
 8001708:	d001      	beq.n	800170e <HAL_UART_Receive_IT+0xe>
 800170a:	2b12      	cmp	r3, #18
 800170c:	d128      	bne.n	8001760 <HAL_UART_Receive_IT+0x60>
  {
    if((pData == NULL ) || (Size == 0))
 800170e:	b329      	cbz	r1, 800175c <HAL_UART_Receive_IT+0x5c>
 8001710:	b322      	cbz	r2, 800175c <HAL_UART_Receive_IT+0x5c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001712:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001716:	2b01      	cmp	r3, #1
 8001718:	d022      	beq.n	8001760 <HAL_UART_Receive_IT+0x60>
 800171a:	2301      	movs	r3, #1
 800171c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001720:	2300      	movs	r3, #0
 8001722:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8001724:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001726:	85c2      	strh	r2, [r0, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8001728:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800172c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8001730:	2a12      	cmp	r2, #18

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001732:	6803      	ldr	r3, [r0, #0]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001734:	bf0c      	ite	eq
 8001736:	2232      	moveq	r2, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8001738:	2222      	movne	r2, #34	; 0x22
 800173a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800173e:	68da      	ldr	r2, [r3, #12]
    }

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pRxBuffPtr = pData;
 8001740:	6281      	str	r1, [r0, #40]	; 0x28

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001746:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001748:	695a      	ldr	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);

    return HAL_OK;
 800174a:	2000      	movs	r0, #0

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800174c:	f042 0201 	orr.w	r2, r2, #1
 8001750:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	f042 0220 	orr.w	r2, r2, #32
 8001758:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800175a:	4770      	bx	lr
  tmp_state = huart->State;
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
  {
    if((pData == NULL ) || (Size == 0))
    {
      return HAL_ERROR;
 800175c:	2001      	movs	r0, #1
 800175e:	4770      	bx	lr

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001760:	2002      	movs	r0, #2
  }
}
 8001762:	4770      	bx	lr

08001764 <HAL_UART_TxCpltCallback>:
 8001764:	4770      	bx	lr

08001766 <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001766:	4770      	bx	lr

08001768 <HAL_UART_IRQHandler>:
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8001768:	6802      	ldr	r2, [r0, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800176a:	b513      	push	{r0, r1, r4, lr}
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 800176c:	6811      	ldr	r1, [r2, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800176e:	4604      	mov	r4, r0
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001770:	07c9      	lsls	r1, r1, #31
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8001772:	68d3      	ldr	r3, [r2, #12]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001774:	d505      	bpl.n	8001782 <HAL_UART_IRQHandler+0x1a>
 8001776:	05db      	lsls	r3, r3, #23
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001778:	bf42      	ittt	mi
 800177a:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 800177c:	f043 0301 	orrmi.w	r3, r3, #1
 8001780:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8001782:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001784:	6953      	ldr	r3, [r2, #20]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001786:	0788      	lsls	r0, r1, #30
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001788:	f003 0301 	and.w	r3, r3, #1
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800178c:	d504      	bpl.n	8001798 <HAL_UART_IRQHandler+0x30>
 800178e:	b11b      	cbz	r3, 8001798 <HAL_UART_IRQHandler+0x30>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001790:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001792:	f041 0104 	orr.w	r1, r1, #4
 8001796:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8001798:	6811      	ldr	r1, [r2, #0]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800179a:	0749      	lsls	r1, r1, #29
 800179c:	d504      	bpl.n	80017a8 <HAL_UART_IRQHandler+0x40>
 800179e:	b11b      	cbz	r3, 80017a8 <HAL_UART_IRQHandler+0x40>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80017a2:	f041 0102 	orr.w	r1, r1, #2
 80017a6:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80017a8:	6811      	ldr	r1, [r2, #0]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80017aa:	0708      	lsls	r0, r1, #28
 80017ac:	d504      	bpl.n	80017b8 <HAL_UART_IRQHandler+0x50>
 80017ae:	b11b      	cbz	r3, 80017b8 <HAL_UART_IRQHandler+0x50>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80017b8:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80017ba:	68d3      	ldr	r3, [r2, #12]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80017bc:	0689      	lsls	r1, r1, #26
 80017be:	d542      	bpl.n	8001846 <HAL_UART_IRQHandler+0xde>
 80017c0:	0698      	lsls	r0, r3, #26
 80017c2:	d540      	bpl.n	8001846 <HAL_UART_IRQHandler+0xde>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State; 
 80017c4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80017c8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80017cc:	2b22      	cmp	r3, #34	; 0x22
 80017ce:	d13a      	bne.n	8001846 <HAL_UART_IRQHandler+0xde>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80017d0:	68a3      	ldr	r3, [r4, #8]
 80017d2:	6921      	ldr	r1, [r4, #16]
 80017d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017da:	d10b      	bne.n	80017f4 <HAL_UART_IRQHandler+0x8c>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80017dc:	6852      	ldr	r2, [r2, #4]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 80017de:	b921      	cbnz	r1, 80017ea <HAL_UART_IRQHandler+0x82>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80017e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017e4:	f823 2b02 	strh.w	r2, [r3], #2
 80017e8:	e002      	b.n	80017f0 <HAL_UART_IRQHandler+0x88>
        huart->pRxBuffPtr += 2;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1;
 80017f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80017f2:	e00a      	b.n	800180a <HAL_UART_IRQHandler+0xa2>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80017f4:	b919      	cbnz	r1, 80017fe <HAL_UART_IRQHandler+0x96>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80017f6:	1c59      	adds	r1, r3, #1
 80017f8:	62a1      	str	r1, [r4, #40]	; 0x28
 80017fa:	6852      	ldr	r2, [r2, #4]
 80017fc:	e004      	b.n	8001808 <HAL_UART_IRQHandler+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80017fe:	6852      	ldr	r2, [r2, #4]
 8001800:	1c59      	adds	r1, r3, #1
 8001802:	62a1      	str	r1, [r4, #40]	; 0x28
 8001804:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001808:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 800180a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800180c:	3b01      	subs	r3, #1
 800180e:	b29b      	uxth	r3, r3
 8001810:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001812:	b9c3      	cbnz	r3, 8001846 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001814:	6823      	ldr	r3, [r4, #0]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

        huart->State = HAL_UART_STATE_READY;
      }
      HAL_UART_RxCpltCallback(huart);
 8001816:	4620      	mov	r0, r4
      }
    }

    if(--huart->RxXferCount == 0)
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	f022 0220 	bic.w	r2, r2, #32
 800181e:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001820:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001824:	2a32      	cmp	r2, #50	; 0x32
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001826:	bf17      	itett	ne
 8001828:	68da      	ldrne	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 800182a:	2312      	moveq	r3, #18
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800182c:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8001830:	60da      	strne	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001832:	bf1f      	itttt	ne
 8001834:	695a      	ldrne	r2, [r3, #20]
 8001836:	f022 0201 	bicne.w	r2, r2, #1
 800183a:	615a      	strne	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 800183c:	2301      	movne	r3, #1
 800183e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 8001842:	f002 f94d 	bl	8003ae0 <HAL_UART_RxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  { 
    UART_Receive_IT(huart);
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 800184a:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800184c:	0609      	lsls	r1, r1, #24
 800184e:	d528      	bpl.n	80018a2 <HAL_UART_IRQHandler+0x13a>
 8001850:	0610      	lsls	r0, r2, #24
 8001852:	d526      	bpl.n	80018a2 <HAL_UART_IRQHandler+0x13a>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 8001854:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8001858:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800185c:	2a12      	cmp	r2, #18
 800185e:	d120      	bne.n	80018a2 <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001860:	68a2      	ldr	r2, [r4, #8]
 8001862:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001866:	6a22      	ldr	r2, [r4, #32]
 8001868:	d10a      	bne.n	8001880 <HAL_UART_IRQHandler+0x118>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800186a:	8811      	ldrh	r1, [r2, #0]
 800186c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001870:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001872:	6921      	ldr	r1, [r4, #16]
 8001874:	b909      	cbnz	r1, 800187a <HAL_UART_IRQHandler+0x112>
      {
        huart->pTxBuffPtr += 2;
 8001876:	3202      	adds	r2, #2
 8001878:	e000      	b.n	800187c <HAL_UART_IRQHandler+0x114>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 800187a:	3201      	adds	r2, #1
 800187c:	6222      	str	r2, [r4, #32]
 800187e:	e003      	b.n	8001888 <HAL_UART_IRQHandler+0x120>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001880:	1c51      	adds	r1, r2, #1
 8001882:	6221      	str	r1, [r4, #32]
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0)
 8001888:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800188a:	3a01      	subs	r2, #1
 800188c:	b292      	uxth	r2, r2
 800188e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001890:	b93a      	cbnz	r2, 80018a2 <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001898:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a0:	60da      	str	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_Transmit_IT(huart);
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 80018a2:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 80018a4:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80018a6:	0649      	lsls	r1, r1, #25
 80018a8:	d510      	bpl.n	80018cc <HAL_UART_IRQHandler+0x164>
 80018aa:	0652      	lsls	r2, r2, #25
 80018ac:	d50e      	bpl.n	80018cc <HAL_UART_IRQHandler+0x164>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80018ae:	68da      	ldr	r2, [r3, #12]
  else
  {
    huart->State = HAL_UART_STATE_READY;
  }
  
  HAL_UART_TxCpltCallback(huart);
 80018b0:	4620      	mov	r0, r4
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80018b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018b6:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80018b8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80018bc:	2b32      	cmp	r3, #50	; 0x32
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 80018be:	bf0c      	ite	eq
 80018c0:	2322      	moveq	r3, #34	; 0x22
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 80018c2:	2301      	movne	r3, #1
 80018c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 80018c8:	f7ff ff4c 	bl	8001764 <HAL_UART_TxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_EndTransmit_IT(huart);
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80018cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018ce:	b15b      	cbz	r3, 80018e8 <HAL_UART_IRQHandler+0x180>
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 80018d0:	6823      	ldr	r3, [r4, #0]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
    
    HAL_UART_ErrorCallback(huart);
 80018d2:	4620      	mov	r0, r4
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	9201      	str	r2, [sp, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	9b01      	ldr	r3, [sp, #4]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 80018de:	2301      	movs	r3, #1
 80018e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 80018e4:	f7ff ff3f 	bl	8001766 <HAL_UART_ErrorCallback>
  }  
}
 80018e8:	b002      	add	sp, #8
 80018ea:	bd10      	pop	{r4, pc}

080018ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80018ec:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80018ee:	f000 fe95 	bl	800261c <vTaskStartScheduler>
  
  return osOK;
}
 80018f2:	2000      	movs	r0, #0
 80018f4:	bd08      	pop	{r3, pc}

080018f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80018f6:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018f8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80018fc:	2500      	movs	r5, #0
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80018fe:	2c84      	cmp	r4, #132	; 0x84
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001900:	bf08      	it	eq
 8001902:	462c      	moveq	r4, r5
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001904:	b086      	sub	sp, #24
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001906:	8a02      	ldrh	r2, [r0, #16]
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
    fpriority += (priority - osPriorityIdle);
 8001908:	bf18      	it	ne
 800190a:	3403      	addne	r4, #3
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800190c:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800190e:	e890 0042 	ldmia.w	r0, {r1, r6}
 8001912:	a805      	add	r0, sp, #20
 8001914:	9001      	str	r0, [sp, #4]
 8001916:	9503      	str	r5, [sp, #12]
 8001918:	9502      	str	r5, [sp, #8]
 800191a:	9400      	str	r4, [sp, #0]
 800191c:	4630      	mov	r0, r6
 800191e:	f000 fd9d 	bl	800245c <xTaskGenericCreate>
 8001922:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 8001924:	bf0c      	ite	eq
 8001926:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 8001928:	2000      	movne	r0, #0
  }
  
  return handle;
}
 800192a:	b006      	add	sp, #24
 800192c:	bd70      	pop	{r4, r5, r6, pc}

0800192e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800192e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001930:	2800      	cmp	r0, #0
 8001932:	bf08      	it	eq
 8001934:	2001      	moveq	r0, #1
 8001936:	f000 ffa3 	bl	8002880 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800193a:	2000      	movs	r0, #0
 800193c:	bd08      	pop	{r3, pc}

0800193e <osMutexCreate>:
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
#if ( configUSE_MUTEXES == 1)
  return xSemaphoreCreateMutex(); 
 800193e:	2001      	movs	r0, #1
 8001940:	f000 bc1c 	b.w	800217c <xQueueCreateMutex>

08001944 <osMessageCreate>:
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
  (void) thread_id;
  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001944:	2200      	movs	r2, #0
 8001946:	c803      	ldmia	r0, {r0, r1}
 8001948:	f000 bb66 	b.w	8002018 <xQueueGenericCreate>

0800194c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800194c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 800194e:	2400      	movs	r4, #0
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001950:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001952:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8001954:	42a2      	cmp	r2, r4
 8001956:	bf08      	it	eq
 8001958:	2201      	moveq	r2, #1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800195a:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 800195e:	b183      	cbz	r3, 8001982 <osMessagePut+0x36>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001960:	4623      	mov	r3, r4
 8001962:	aa03      	add	r2, sp, #12
 8001964:	a901      	add	r1, sp, #4
 8001966:	f000 fc2e 	bl	80021c6 <xQueueGenericSendFromISR>
 800196a:	2801      	cmp	r0, #1
 800196c:	d001      	beq.n	8001972 <osMessagePut+0x26>
      return osErrorOS;
 800196e:	20ff      	movs	r0, #255	; 0xff
 8001970:	e00d      	b.n	800198e <osMessagePut+0x42>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001972:	9b03      	ldr	r3, [sp, #12]
 8001974:	b153      	cbz	r3, 800198c <osMessagePut+0x40>
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <osMessagePut+0x48>)
 8001978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800197c:	601a      	str	r2, [r3, #0]
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 800197e:	4620      	mov	r0, r4
 8001980:	e005      	b.n	800198e <osMessagePut+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001982:	a901      	add	r1, sp, #4
 8001984:	f000 fb6e 	bl	8002064 <xQueueGenericSend>
 8001988:	2801      	cmp	r0, #1
 800198a:	d1f0      	bne.n	800196e <osMessagePut+0x22>
      return osErrorOS;
    }
  }
  
  return osOK;
 800198c:	2000      	movs	r0, #0
}
 800198e:	b004      	add	sp, #16
 8001990:	bd10      	pop	{r4, pc}
 8001992:	bf00      	nop
 8001994:	e000ed04 	.word	0xe000ed04

08001998 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8001998:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800199a:	2600      	movs	r6, #0
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800199c:	b085      	sub	sp, #20
 800199e:	4604      	mov	r4, r0
 80019a0:	4617      	mov	r7, r2
 80019a2:	4608      	mov	r0, r1
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80019a4:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80019a6:	9602      	str	r6, [sp, #8]
 80019a8:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 80019aa:	b909      	cbnz	r1, 80019b0 <osMessageGet+0x18>
    event.status = osErrorParameter;
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	e01f      	b.n	80019f0 <osMessageGet+0x58>
    return event;
  }
  
  taskWoken = pdFALSE;
 80019b0:	9600      	str	r6, [sp, #0]
 80019b2:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80019b6:	b183      	cbz	r3, 80019da <osMessageGet+0x42>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80019b8:	466a      	mov	r2, sp
 80019ba:	a902      	add	r1, sp, #8
 80019bc:	f000 fcde 	bl	800237c <xQueueReceiveFromISR>
 80019c0:	2801      	cmp	r0, #1
      /* We have mail */
      event.status = osEventMessage;
 80019c2:	bf04      	itt	eq
 80019c4:	2310      	moveq	r3, #16
 80019c6:	9301      	streq	r3, [sp, #4]
    }
    else {
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80019c8:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 80019ca:	bf18      	it	ne
 80019cc:	9601      	strne	r6, [sp, #4]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80019ce:	b183      	cbz	r3, 80019f2 <osMessageGet+0x5a>
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <osMessageGet+0x68>)
 80019d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	e00b      	b.n	80019f2 <osMessageGet+0x5a>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80019da:	a902      	add	r1, sp, #8
 80019dc:	f000 fc38 	bl	8002250 <xQueueGenericReceive>
 80019e0:	2801      	cmp	r0, #1
 80019e2:	d101      	bne.n	80019e8 <osMessageGet+0x50>
      /* We have mail */
      event.status = osEventMessage;
 80019e4:	2310      	movs	r3, #16
 80019e6:	e003      	b.n	80019f0 <osMessageGet+0x58>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80019e8:	2f00      	cmp	r7, #0
 80019ea:	bf0c      	ite	eq
 80019ec:	2300      	moveq	r3, #0
 80019ee:	2340      	movne	r3, #64	; 0x40
 80019f0:	9301      	str	r3, [sp, #4]
    }
  }
  
  return event;
 80019f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80019fa:	4620      	mov	r0, r4
 80019fc:	b005      	add	sp, #20
 80019fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a00:	e000ed04 	.word	0xe000ed04

08001a04 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001a04:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a06:	f001 f89d 	bl	8002b44 <xTaskGetSchedulerState>
 8001a0a:	2801      	cmp	r0, #1
 8001a0c:	d003      	beq.n	8001a16 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001a0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8001a12:	f000 b8e7 	b.w	8001be4 <xPortSysTickHandler>
 8001a16:	bd08      	pop	{r3, pc}

08001a18 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a18:	f100 0308 	add.w	r3, r0, #8
 8001a1c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a1e:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a22:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a24:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a26:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a28:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a2a:	6003      	str	r3, [r0, #0]
 8001a2c:	4770      	bx	lr

08001a2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	6103      	str	r3, [r0, #16]
 8001a32:	4770      	bx	lr

08001a34 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a34:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a36:	689a      	ldr	r2, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a38:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a3a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a40:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001a42:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001a44:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001a46:	3301      	adds	r3, #1
 8001a48:	6003      	str	r3, [r0, #0]
 8001a4a:	4770      	bx	lr

08001a4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a4c:	680a      	ldr	r2, [r1, #0]
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a4e:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a50:	1c53      	adds	r3, r2, #1
 8001a52:	d101      	bne.n	8001a58 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a54:	6903      	ldr	r3, [r0, #16]
 8001a56:	e007      	b.n	8001a68 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a58:	f100 0308 	add.w	r3, r0, #8
 8001a5c:	685c      	ldr	r4, [r3, #4]
 8001a5e:	6825      	ldr	r5, [r4, #0]
 8001a60:	42aa      	cmp	r2, r5
 8001a62:	d301      	bcc.n	8001a68 <vListInsert+0x1c>
 8001a64:	4623      	mov	r3, r4
 8001a66:	e7f9      	b.n	8001a5c <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a6c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001a6e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001a70:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001a72:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001a74:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001a76:	3301      	adds	r3, #1
 8001a78:	6003      	str	r3, [r0, #0]
 8001a7a:	bd30      	pop	{r4, r5, pc}

08001a7c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a7c:	6841      	ldr	r1, [r0, #4]
 8001a7e:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001a80:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a82:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a84:	6882      	ldr	r2, [r0, #8]
 8001a86:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001a88:	6859      	ldr	r1, [r3, #4]
 8001a8a:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a8c:	bf08      	it	eq
 8001a8e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001a90:	2200      	movs	r2, #0
 8001a92:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	3801      	subs	r0, #1
 8001a98:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001a9a:	4770      	bx	lr

08001a9c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001a9c:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <prvPortStartFirstTask+0x1c>)
 8001a9e:	6800      	ldr	r0, [r0, #0]
 8001aa0:	6800      	ldr	r0, [r0, #0]
 8001aa2:	f380 8808 	msr	MSP, r0
 8001aa6:	b662      	cpsie	i
 8001aa8:	b661      	cpsie	f
 8001aaa:	f3bf 8f4f 	dsb	sy
 8001aae:	f3bf 8f6f 	isb	sy
 8001ab2:	df00      	svc	0
 8001ab4:	bf00      	nop
 8001ab6:	0000      	.short	0x0000
 8001ab8:	e000ed08 	.word	0xe000ed08

08001abc <pxPortInitialiseStack>:
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8001ac0:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <pxPortInitialiseStack+0x18>)
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001ac6:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001aca:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8001ace:	3840      	subs	r0, #64	; 0x40
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	08001b25 	.word	0x08001b25

08001ad8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <pxCurrentTCBConst2>)
 8001ada:	6819      	ldr	r1, [r3, #0]
 8001adc:	6808      	ldr	r0, [r1, #0]
 8001ade:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001ae2:	f380 8809 	msr	PSP, r0
 8001ae6:	f3bf 8f6f 	isb	sy
 8001aea:	f04f 0000 	mov.w	r0, #0
 8001aee:	f380 8811 	msr	BASEPRI, r0
 8001af2:	f04e 0e0d 	orr.w	lr, lr, #13
 8001af6:	4770      	bx	lr

08001af8 <pxCurrentTCBConst2>:
 8001af8:	20000d14 	.word	0x20000d14

08001afc <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <vPortYield+0x14>)
 8001afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b02:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8001b04:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001b08:	f3bf 8f6f 	isb	sy
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed04 	.word	0xe000ed04

08001b14 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8001b14:	f3ef 8011 	mrs	r0, BASEPRI
 8001b18:	f04f 0150 	mov.w	r1, #80	; 0x50
 8001b1c:	f381 8811 	msr	BASEPRI, r1
 8001b20:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
 8001b22:	2000      	movs	r0, #0

08001b24 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001b24:	b508      	push	{r3, lr}
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <prvTaskExitError+0x18>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	d002      	beq.n	8001b34 <prvTaskExitError+0x10>
 8001b2e:	f7ff fff1 	bl	8001b14 <ulPortSetInterruptMask>
 8001b32:	e7fe      	b.n	8001b32 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 8001b34:	f7ff ffee 	bl	8001b14 <ulPortSetInterruptMask>
 8001b38:	e7fe      	b.n	8001b38 <prvTaskExitError+0x14>
 8001b3a:	bf00      	nop
 8001b3c:	20000004 	.word	0x20000004

08001b40 <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001b40:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
 8001b42:	f7ff ffe7 	bl	8001b14 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8001b46:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <vPortEnterCritical+0x2c>)
 8001b48:	6813      	ldr	r3, [r2, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 8001b4e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001b52:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <vPortEnterCritical+0x2a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <vPortEnterCritical+0x30>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001b62:	d002      	beq.n	8001b6a <vPortEnterCritical+0x2a>
 8001b64:	f7ff ffd6 	bl	8001b14 <ulPortSetInterruptMask>
 8001b68:	e7fe      	b.n	8001b68 <vPortEnterCritical+0x28>
 8001b6a:	bd08      	pop	{r3, pc}
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	e000ed04 	.word	0xe000ed04

08001b74 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 8001b74:	f380 8811 	msr	BASEPRI, r0
 8001b78:	4770      	bx	lr
	...

08001b7c <vPortExitCritical>:
	}
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001b7c:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <vPortExitCritical+0x20>)
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	b910      	cbnz	r0, 8001b8a <vPortExitCritical+0xe>
 8001b84:	f7ff ffc6 	bl	8001b14 <ulPortSetInterruptMask>
 8001b88:	e7fe      	b.n	8001b88 <vPortExitCritical+0xc>
	uxCriticalNesting--;
 8001b8a:	3801      	subs	r0, #1
 8001b8c:	6018      	str	r0, [r3, #0]
	if( uxCriticalNesting == 0 )
 8001b8e:	b918      	cbnz	r0, 8001b98 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
	}
}
 8001b90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
	if( uxCriticalNesting == 0 )
	{
		portENABLE_INTERRUPTS();
 8001b94:	f7ff bfee 	b.w	8001b74 <vPortClearInterruptMask>
 8001b98:	bd08      	pop	{r3, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000004 	.word	0x20000004

08001ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001ba0:	f3ef 8009 	mrs	r0, PSP
 8001ba4:	f3bf 8f6f 	isb	sy
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <pxCurrentTCBConst>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001bb0:	6010      	str	r0, [r2, #0]
 8001bb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001bb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001bba:	f380 8811 	msr	BASEPRI, r0
 8001bbe:	f000 fec3 	bl	8002948 <vTaskSwitchContext>
 8001bc2:	f04f 0000 	mov.w	r0, #0
 8001bc6:	f380 8811 	msr	BASEPRI, r0
 8001bca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001bce:	6819      	ldr	r1, [r3, #0]
 8001bd0:	6808      	ldr	r0, [r1, #0]
 8001bd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001bd6:	f380 8809 	msr	PSP, r0
 8001bda:	f3bf 8f6f 	isb	sy
 8001bde:	4770      	bx	lr

08001be0 <pxCurrentTCBConst>:
 8001be0:	20000d14 	.word	0x20000d14

08001be4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001be4:	b508      	push	{r3, lr}
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8001be6:	f7ff ff95 	bl	8001b14 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001bea:	f000 fd4f 	bl	800268c <xTaskIncrementTick>
 8001bee:	b118      	cbz	r0, 8001bf8 <xPortSysTickHandler+0x14>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <xPortSysTickHandler+0x20>)
 8001bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bf6:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8001bf8:	2000      	movs	r0, #0
}
 8001bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8001bfe:	f7ff bfb9 	b.w	8001b74 <vPortClearInterruptMask>
 8001c02:	bf00      	nop
 8001c04:	e000ed04 	.word	0xe000ed04

08001c08 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <vPortSetupTimerInterrupt+0x1c>)
 8001c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <vPortSetupTimerInterrupt+0x20>)
 8001c16:	3b01      	subs	r3, #1
 8001c18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <vPortSetupTimerInterrupt+0x24>)
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000000 	.word	0x20000000
 8001c28:	e000e014 	.word	0xe000e014
 8001c2c:	e000e010 	.word	0xe000e010

08001c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001c30:	b513      	push	{r0, r1, r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001c32:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <xPortStartScheduler+0x80>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001c34:	2100      	movs	r1, #0
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001c3c:	22ff      	movs	r2, #255	; 0xff
 8001c3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001c40:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001c42:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <xPortStartScheduler+0x84>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001c4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001c4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c52:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <xPortStartScheduler+0x88>)
 8001c56:	2207      	movs	r2, #7
 8001c58:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001c5a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001c5e:	1e54      	subs	r4, r2, #1
 8001c60:	0600      	lsls	r0, r0, #24
 8001c62:	d508      	bpl.n	8001c76 <xPortStartScheduler+0x46>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001c64:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001c68:	2101      	movs	r1, #1
 8001c6a:	0052      	lsls	r2, r2, #1
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	f88d 2003 	strb.w	r2, [sp, #3]
 8001c72:	4622      	mov	r2, r4
 8001c74:	e7f1      	b.n	8001c5a <xPortStartScheduler+0x2a>
 8001c76:	b101      	cbz	r1, 8001c7a <xPortStartScheduler+0x4a>
 8001c78:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	0212      	lsls	r2, r2, #8
 8001c7e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001c82:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001c84:	9b01      	ldr	r3, [sp, #4]
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <xPortStartScheduler+0x80>)
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <xPortStartScheduler+0x8c>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001c9c:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001c9e:	f7ff ffb3 	bl	8001c08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <xPortStartScheduler+0x90>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001ca8:	f7ff fef8 	bl	8001a9c <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001cac:	f7ff ff3a 	bl	8001b24 <prvTaskExitError>
 8001cb0:	e000e400 	.word	0xe000e400
 8001cb4:	2000002c 	.word	0x2000002c
 8001cb8:	20000030 	.word	0x20000030
 8001cbc:	e000ed20 	.word	0xe000ed20
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001cc4:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8001cc6:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	d908      	bls.n	8001ce0 <vPortValidateInterruptPriority+0x1c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <vPortValidateInterruptPriority+0x34>)
 8001cd0:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <vPortValidateInterruptPriority+0x38>)
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d902      	bls.n	8001ce0 <vPortValidateInterruptPriority+0x1c>
 8001cda:	f7ff ff1b 	bl	8001b14 <ulPortSetInterruptMask>
 8001cde:	e7fe      	b.n	8001cde <vPortValidateInterruptPriority+0x1a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <vPortValidateInterruptPriority+0x3c>)
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <vPortValidateInterruptPriority+0x40>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d902      	bls.n	8001cf6 <vPortValidateInterruptPriority+0x32>
 8001cf0:	f7ff ff10 	bl	8001b14 <ulPortSetInterruptMask>
 8001cf4:	e7fe      	b.n	8001cf4 <vPortValidateInterruptPriority+0x30>
 8001cf6:	bd08      	pop	{r3, pc}
 8001cf8:	e000e3f0 	.word	0xe000e3f0
 8001cfc:	2000002c 	.word	0x2000002c
 8001d00:	e000ed0c 	.word	0xe000ed0c
 8001d04:	20000030 	.word	0x20000030

08001d08 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001d08:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <prvInsertBlockIntoFreeList+0x40>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4282      	cmp	r2, r0
 8001d10:	d201      	bcs.n	8001d16 <prvInsertBlockIntoFreeList+0xe>
 8001d12:	4613      	mov	r3, r2
 8001d14:	e7fa      	b.n	8001d0c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	185c      	adds	r4, r3, r1
 8001d1a:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001d1c:	bf01      	itttt	eq
 8001d1e:	6840      	ldreq	r0, [r0, #4]
 8001d20:	1809      	addeq	r1, r1, r0
 8001d22:	4618      	moveq	r0, r3
 8001d24:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001d26:	6841      	ldr	r1, [r0, #4]
 8001d28:	1844      	adds	r4, r0, r1
 8001d2a:	42a2      	cmp	r2, r4
 8001d2c:	d107      	bne.n	8001d3e <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d2e:	4c07      	ldr	r4, [pc, #28]	; (8001d4c <prvInsertBlockIntoFreeList+0x44>)
 8001d30:	6824      	ldr	r4, [r4, #0]
 8001d32:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d34:	bf1f      	itttt	ne
 8001d36:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001d38:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d3a:	1909      	addne	r1, r1, r4
 8001d3c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001d3e:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001d40:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d42:	bf18      	it	ne
 8001d44:	6018      	strne	r0, [r3, #0]
 8001d46:	bd10      	pop	{r4, pc}
 8001d48:	2000003c 	.word	0x2000003c
 8001d4c:	20000038 	.word	0x20000038

08001d50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d54:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8001d56:	f000 fc91 	bl	800267c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001d5a:	493c      	ldr	r1, [pc, #240]	; (8001e4c <pvPortMalloc+0xfc>)
 8001d5c:	4d3c      	ldr	r5, [pc, #240]	; (8001e50 <pvPortMalloc+0x100>)
 8001d5e:	680b      	ldr	r3, [r1, #0]
 8001d60:	bb0b      	cbnz	r3, 8001da6 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001d62:	4a3c      	ldr	r2, [pc, #240]	; (8001e54 <pvPortMalloc+0x104>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001d64:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001d66:	bf1f      	itttt	ne
 8001d68:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d6a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d6e:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d72:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d74:	bf14      	ite	ne
 8001d76:	1a1b      	subne	r3, r3, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001d78:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001d7c:	4413      	add	r3, r2

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d7e:	4e36      	ldr	r6, [pc, #216]	; (8001e58 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
 8001d80:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d82:	f023 0307 	bic.w	r3, r3, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8001d86:	2000      	movs	r0, #0
 8001d88:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d8a:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8001d8c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001d8e:	6018      	str	r0, [r3, #0]
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8001d90:	600b      	str	r3, [r1, #0]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d92:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001d94:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d96:	4b31      	ldr	r3, [pc, #196]	; (8001e5c <pvPortMalloc+0x10c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d98:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d9a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d9c:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <pvPortMalloc+0x110>)
 8001d9e:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001da0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001da4:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001da6:	682f      	ldr	r7, [r5, #0]
 8001da8:	4227      	tst	r7, r4
 8001daa:	d140      	bne.n	8001e2e <pvPortMalloc+0xde>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001dac:	2c00      	cmp	r4, #0
 8001dae:	d03f      	beq.n	8001e30 <pvPortMalloc+0xe0>
			{
				xWantedSize += xHeapStructSize;
 8001db0:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001db4:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001db6:	bf1c      	itt	ne
 8001db8:	f023 0307 	bicne.w	r3, r3, #7
 8001dbc:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d033      	beq.n	8001e2a <pvPortMalloc+0xda>
 8001dc2:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <pvPortMalloc+0x110>)
 8001dc4:	6816      	ldr	r6, [r2, #0]
 8001dc6:	4690      	mov	r8, r2
 8001dc8:	42b3      	cmp	r3, r6
 8001dca:	d830      	bhi.n	8001e2e <pvPortMalloc+0xde>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8001dcc:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <pvPortMalloc+0x108>)
 8001dce:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001dd0:	6868      	ldr	r0, [r5, #4]
 8001dd2:	4283      	cmp	r3, r0
 8001dd4:	d803      	bhi.n	8001dde <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001dd6:	6809      	ldr	r1, [r1, #0]
 8001dd8:	428d      	cmp	r5, r1
 8001dda:	d106      	bne.n	8001dea <pvPortMalloc+0x9a>
 8001ddc:	e027      	b.n	8001e2e <pvPortMalloc+0xde>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001dde:	682c      	ldr	r4, [r5, #0]
 8001de0:	2c00      	cmp	r4, #0
 8001de2:	d0f8      	beq.n	8001dd6 <pvPortMalloc+0x86>
 8001de4:	462a      	mov	r2, r5
 8001de6:	4625      	mov	r5, r4
 8001de8:	e7f2      	b.n	8001dd0 <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001dea:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001dec:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001dee:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001df0:	1ac2      	subs	r2, r0, r3
 8001df2:	2a10      	cmp	r2, #16
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001df4:	f104 0408 	add.w	r4, r4, #8
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001df8:	d909      	bls.n	8001e0e <pvPortMalloc+0xbe>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001dfa:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001dfc:	0741      	lsls	r1, r0, #29
 8001dfe:	d002      	beq.n	8001e06 <pvPortMalloc+0xb6>
 8001e00:	f7ff fe88 	bl	8001b14 <ulPortSetInterruptMask>
 8001e04:	e7fe      	b.n	8001e04 <pvPortMalloc+0xb4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001e06:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001e08:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001e0a:	f7ff ff7d 	bl	8001d08 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e0e:	4913      	ldr	r1, [pc, #76]	; (8001e5c <pvPortMalloc+0x10c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e10:	686a      	ldr	r2, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e12:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e14:	1ab3      	subs	r3, r6, r2

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e16:	4283      	cmp	r3, r0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e18:	f8c8 3000 	str.w	r3, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001e1c:	bf38      	it	cc
 8001e1e:	600b      	strcc	r3, [r1, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001e20:	4317      	orrs	r7, r2
					pxBlock->pxNextFreeBlock = NULL;
 8001e22:	2300      	movs	r3, #0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001e24:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001e26:	602b      	str	r3, [r5, #0]
 8001e28:	e002      	b.n	8001e30 <pvPortMalloc+0xe0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001e2a:	461c      	mov	r4, r3
 8001e2c:	e000      	b.n	8001e30 <pvPortMalloc+0xe0>
 8001e2e:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001e30:	f000 fcbe 	bl	80027b0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8001e34:	b90c      	cbnz	r4, 8001e3a <pvPortMalloc+0xea>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8001e36:	f001 f939 	bl	80030ac <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e3a:	0763      	lsls	r3, r4, #29
 8001e3c:	d002      	beq.n	8001e44 <pvPortMalloc+0xf4>
 8001e3e:	f7ff fe69 	bl	8001b14 <ulPortSetInterruptMask>
 8001e42:	e7fe      	b.n	8001e42 <pvPortMalloc+0xf2>
	return pvReturn;
}
 8001e44:	4620      	mov	r0, r4
 8001e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000038 	.word	0x20000038
 8001e50:	20000c44 	.word	0x20000c44
 8001e54:	20000044 	.word	0x20000044
 8001e58:	2000003c 	.word	0x2000003c
 8001e5c:	20000c48 	.word	0x20000c48
 8001e60:	20000034 	.word	0x20000034

08001e64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001e64:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8001e66:	4604      	mov	r4, r0
 8001e68:	b310      	cbz	r0, 8001eb0 <vPortFree+0x4c>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001e6a:	4a12      	ldr	r2, [pc, #72]	; (8001eb4 <vPortFree+0x50>)
 8001e6c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	4213      	tst	r3, r2
 8001e74:	d102      	bne.n	8001e7c <vPortFree+0x18>
 8001e76:	f7ff fe4d 	bl	8001b14 <ulPortSetInterruptMask>
 8001e7a:	e7fe      	b.n	8001e7a <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001e7c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001e80:	b111      	cbz	r1, 8001e88 <vPortFree+0x24>
 8001e82:	f7ff fe47 	bl	8001b14 <ulPortSetInterruptMask>
 8001e86:	e7fe      	b.n	8001e86 <vPortFree+0x22>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001e88:	ea23 0302 	bic.w	r3, r3, r2
 8001e8c:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8001e90:	f000 fbf4 	bl	800267c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001e94:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <vPortFree+0x54>)
 8001e96:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001e9a:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e9c:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001ea0:	440b      	add	r3, r1
 8001ea2:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001ea4:	f7ff ff30 	bl	8001d08 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8001eac:	f000 bc80 	b.w	80027b0 <xTaskResumeAll>
 8001eb0:	bd10      	pop	{r4, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000c44 	.word	0x20000c44
 8001eb8:	20000034 	.word	0x20000034

08001ebc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001ebc:	b538      	push	{r3, r4, r5, lr}
 8001ebe:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ec0:	6c02      	ldr	r2, [r0, #64]	; 0x40

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001ec2:	4604      	mov	r4, r0
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ec4:	b932      	cbnz	r2, 8001ed4 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ec6:	6805      	ldr	r5, [r0, #0]
 8001ec8:	bb45      	cbnz	r5, 8001f1c <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001eca:	6840      	ldr	r0, [r0, #4]
 8001ecc:	f000 fe94 	bl	8002bf8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001ed0:	6065      	str	r5, [r4, #4]
 8001ed2:	e024      	b.n	8001f1e <prvCopyDataToQueue+0x62>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001ed4:	b96d      	cbnz	r5, 8001ef2 <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001ed6:	6880      	ldr	r0, [r0, #8]
 8001ed8:	f002 f80a 	bl	8003ef0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001edc:	68a2      	ldr	r2, [r4, #8]
 8001ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ee0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ee2:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001ee4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d318      	bcc.n	8001f1c <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001eea:	6823      	ldr	r3, [r4, #0]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8001eec:	4628      	mov	r0, r5
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001eee:	60a3      	str	r3, [r4, #8]
 8001ef0:	e015      	b.n	8001f1e <prvCopyDataToQueue+0x62>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ef2:	68c0      	ldr	r0, [r0, #12]
 8001ef4:	f001 fffc 	bl	8003ef0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001ef8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001efa:	68e2      	ldr	r2, [r4, #12]
 8001efc:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001efe:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001f00:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f02:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001f04:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001f06:	bf3e      	ittt	cc
 8001f08:	6862      	ldrcc	r2, [r4, #4]
 8001f0a:	189b      	addcc	r3, r3, r2
 8001f0c:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001f0e:	2d02      	cmp	r5, #2
 8001f10:	d104      	bne.n	8001f1c <prvCopyDataToQueue+0x60>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f14:	b113      	cbz	r3, 8001f1c <prvCopyDataToQueue+0x60>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8001f16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8001f1c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8001f1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f20:	3301      	adds	r3, #1
 8001f22:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 8001f24:	bd38      	pop	{r3, r4, r5, pc}

08001f26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001f26:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001f2a:	b410      	push	{r4}
 8001f2c:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f2e:	b162      	cbz	r2, 8001f4a <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001f30:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f32:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001f34:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f36:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001f38:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001f3a:	bf28      	it	cs
 8001f3c:	6819      	ldrcs	r1, [r3, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8001f3e:	bc10      	pop	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001f40:	bf28      	it	cs
 8001f42:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001f44:	68d9      	ldr	r1, [r3, #12]
 8001f46:	f001 bfd3 	b.w	8003ef0 <memcpy>
	}
}
 8001f4a:	bc10      	pop	{r4}
 8001f4c:	4770      	bx	lr

08001f4e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001f4e:	b538      	push	{r3, r4, r5, lr}
 8001f50:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001f52:	f7ff fdf5 	bl	8001b40 <vPortEnterCritical>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f56:	f104 0524 	add.w	r5, r4, #36	; 0x24
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001f5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	dd0b      	ble.n	8001f78 <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f62:	b14b      	cbz	r3, 8001f78 <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f64:	4628      	mov	r0, r5
 8001f66:	f000 fd6d 	bl	8002a44 <xTaskRemoveFromEventList>
 8001f6a:	b108      	cbz	r0, 8001f70 <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8001f6c:	f000 fde4 	bl	8002b38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8001f70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001f72:	3b01      	subs	r3, #1
 8001f74:	64a3      	str	r3, [r4, #72]	; 0x48
 8001f76:	e7f0      	b.n	8001f5a <prvUnlockQueue+0xc>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8001f7e:	f7ff fdfd 	bl	8001b7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001f82:	f7ff fddd 	bl	8001b40 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f86:	f104 0510 	add.w	r5, r4, #16
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001f8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	dd0b      	ble.n	8001fa8 <prvUnlockQueue+0x5a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f90:	6923      	ldr	r3, [r4, #16]
 8001f92:	b14b      	cbz	r3, 8001fa8 <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f94:	4628      	mov	r0, r5
 8001f96:	f000 fd55 	bl	8002a44 <xTaskRemoveFromEventList>
 8001f9a:	b108      	cbz	r0, 8001fa0 <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 8001f9c:	f000 fdcc 	bl	8002b38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8001fa0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	6463      	str	r3, [r4, #68]	; 0x44
 8001fa6:	e7f0      	b.n	8001f8a <prvUnlockQueue+0x3c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8001fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fac:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8001fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 8001fb2:	f7ff bde3 	b.w	8001b7c <vPortExitCritical>

08001fb6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001fb6:	b538      	push	{r3, r4, r5, lr}
 8001fb8:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001fba:	4604      	mov	r4, r0
 8001fbc:	b910      	cbnz	r0, 8001fc4 <xQueueGenericReset+0xe>
 8001fbe:	f7ff fda9 	bl	8001b14 <ulPortSetInterruptMask>
 8001fc2:	e7fe      	b.n	8001fc2 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
 8001fc4:	f7ff fdbc 	bl	8001b40 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001fc8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001fca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fcc:	6822      	ldr	r2, [r4, #0]
 8001fce:	4343      	muls	r3, r0
 8001fd0:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001fd2:	1a1b      	subs	r3, r3, r0
 8001fd4:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001fd6:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001fd8:	60e3      	str	r3, [r4, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fda:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8001fdc:	f04f 33ff 	mov.w	r3, #4294967295
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fe0:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fe2:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8001fe4:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8001fe6:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8001fe8:	b955      	cbnz	r5, 8002000 <xQueueGenericReset+0x4a>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fea:	6923      	ldr	r3, [r4, #16]
 8001fec:	b183      	cbz	r3, 8002010 <xQueueGenericReset+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001fee:	f104 0010 	add.w	r0, r4, #16
 8001ff2:	f000 fd27 	bl	8002a44 <xTaskRemoveFromEventList>
 8001ff6:	2801      	cmp	r0, #1
 8001ff8:	d10a      	bne.n	8002010 <xQueueGenericReset+0x5a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001ffa:	f7ff fd7f 	bl	8001afc <vPortYield>
 8001ffe:	e007      	b.n	8002010 <xQueueGenericReset+0x5a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002000:	f104 0010 	add.w	r0, r4, #16
 8002004:	f7ff fd08 	bl	8001a18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002008:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800200c:	f7ff fd04 	bl	8001a18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002010:	f7ff fdb4 	bl	8001b7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8002014:	2001      	movs	r0, #1
 8002016:	bd38      	pop	{r3, r4, r5, pc}

08002018 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8002018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201a:	460d      	mov	r5, r1
 800201c:	4617      	mov	r7, r2

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800201e:	4606      	mov	r6, r0
 8002020:	b910      	cbnz	r0, 8002028 <xQueueGenericCreate+0x10>
 8002022:	f7ff fd77 	bl	8001b14 <ulPortSetInterruptMask>
 8002026:	e7fe      	b.n	8002026 <xQueueGenericCreate+0xe>

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002028:	b111      	cbz	r1, 8002030 <xQueueGenericCreate+0x18>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800202a:	4348      	muls	r0, r1
 800202c:	3001      	adds	r0, #1
 800202e:	e000      	b.n	8002032 <xQueueGenericCreate+0x1a>
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 8002030:	4608      	mov	r0, r1
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002032:	3054      	adds	r0, #84	; 0x54
 8002034:	f7ff fe8c 	bl	8001d50 <pvPortMalloc>

	if( pxNewQueue != NULL )
 8002038:	4604      	mov	r4, r0
 800203a:	b130      	cbz	r0, 800204a <xQueueGenericCreate+0x32>
	{
		if( uxItemSize == ( UBaseType_t ) 0 )
 800203c:	b90d      	cbnz	r5, 8002042 <xQueueGenericCreate+0x2a>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800203e:	6020      	str	r0, [r4, #0]
 8002040:	e006      	b.n	8002050 <xQueueGenericCreate+0x38>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002042:	f100 0354 	add.w	r3, r0, #84	; 0x54
 8002046:	6003      	str	r3, [r0, #0]
 8002048:	e002      	b.n	8002050 <xQueueGenericCreate+0x38>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800204a:	f7ff fd63 	bl	8001b14 <ulPortSetInterruptMask>
 800204e:	e7fe      	b.n	800204e <xQueueGenericCreate+0x36>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 8002050:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 8002052:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002054:	2101      	movs	r1, #1
 8002056:	4620      	mov	r0, r4
 8002058:	f7ff ffad 	bl	8001fb6 <xQueueGenericReset>

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
 800205c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	}

	configASSERT( xReturn );

	return xReturn;
}
 8002060:	4620      	mov	r0, r4
 8002062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002064 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002068:	b085      	sub	sp, #20
 800206a:	4689      	mov	r9, r1
 800206c:	9201      	str	r2, [sp, #4]
 800206e:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002070:	4604      	mov	r4, r0
 8002072:	b910      	cbnz	r0, 800207a <xQueueGenericSend+0x16>
 8002074:	f7ff fd4e 	bl	8001b14 <ulPortSetInterruptMask>
 8002078:	e7fe      	b.n	8002078 <xQueueGenericSend+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800207a:	b921      	cbnz	r1, 8002086 <xQueueGenericSend+0x22>
 800207c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800207e:	b113      	cbz	r3, 8002086 <xQueueGenericSend+0x22>
 8002080:	f7ff fd48 	bl	8001b14 <ulPortSetInterruptMask>
 8002084:	e7fe      	b.n	8002084 <xQueueGenericSend+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002086:	2f02      	cmp	r7, #2
 8002088:	d105      	bne.n	8002096 <xQueueGenericSend+0x32>
 800208a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800208c:	2b01      	cmp	r3, #1
 800208e:	d002      	beq.n	8002096 <xQueueGenericSend+0x32>
 8002090:	f7ff fd40 	bl	8001b14 <ulPortSetInterruptMask>
 8002094:	e7fe      	b.n	8002094 <xQueueGenericSend+0x30>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002096:	f000 fd55 	bl	8002b44 <xTaskGetSchedulerState>
 800209a:	b910      	cbnz	r0, 80020a2 <xQueueGenericSend+0x3e>
 800209c:	9e01      	ldr	r6, [sp, #4]
 800209e:	b10e      	cbz	r6, 80020a4 <xQueueGenericSend+0x40>
 80020a0:	e066      	b.n	8002170 <xQueueGenericSend+0x10c>
 80020a2:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 80020a4:	f04f 0800 	mov.w	r8, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80020a8:	f7ff fd4a 	bl	8001b40 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80020ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d301      	bcc.n	80020b8 <xQueueGenericSend+0x54>
 80020b4:	2f02      	cmp	r7, #2
 80020b6:	d115      	bne.n	80020e4 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020b8:	463a      	mov	r2, r7
 80020ba:	4649      	mov	r1, r9
 80020bc:	4620      	mov	r0, r4
 80020be:	f7ff fefd 	bl	8001ebc <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020c4:	b143      	cbz	r3, 80020d8 <xQueueGenericSend+0x74>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80020c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80020ca:	f000 fcbb 	bl	8002a44 <xTaskRemoveFromEventList>
 80020ce:	2801      	cmp	r0, #1
 80020d0:	d104      	bne.n	80020dc <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80020d2:	f7ff fd13 	bl	8001afc <vPortYield>
 80020d6:	e001      	b.n	80020dc <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80020d8:	2800      	cmp	r0, #0
 80020da:	d1fa      	bne.n	80020d2 <xQueueGenericSend+0x6e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80020dc:	f7ff fd4e 	bl	8001b7c <vPortExitCritical>
				return pdPASS;
 80020e0:	2001      	movs	r0, #1
 80020e2:	e048      	b.n	8002176 <xQueueGenericSend+0x112>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020e4:	9d01      	ldr	r5, [sp, #4]
 80020e6:	b91d      	cbnz	r5, 80020f0 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020e8:	f7ff fd48 	bl	8001b7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80020ec:	4628      	mov	r0, r5
 80020ee:	e042      	b.n	8002176 <xQueueGenericSend+0x112>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020f0:	b916      	cbnz	r6, 80020f8 <xQueueGenericSend+0x94>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80020f2:	a802      	add	r0, sp, #8
 80020f4:	f000 fce2 	bl	8002abc <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020f8:	f7ff fd40 	bl	8001b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020fc:	f000 fabe 	bl	800267c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002100:	f7ff fd1e 	bl	8001b40 <vPortEnterCritical>
 8002104:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002106:	3301      	adds	r3, #1
 8002108:	bf08      	it	eq
 800210a:	f8c4 8044 	streq.w	r8, [r4, #68]	; 0x44
 800210e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002110:	3301      	adds	r3, #1
 8002112:	bf08      	it	eq
 8002114:	f8c4 8048 	streq.w	r8, [r4, #72]	; 0x48
 8002118:	f7ff fd30 	bl	8001b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800211c:	a901      	add	r1, sp, #4
 800211e:	a802      	add	r0, sp, #8
 8002120:	f000 fcdc 	bl	8002adc <xTaskCheckForTimeOut>
 8002124:	b9e8      	cbnz	r0, 8002162 <xQueueGenericSend+0xfe>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002126:	f7ff fd0b 	bl	8001b40 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800212a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800212c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800212e:	f7ff fd25 	bl	8001b7c <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002132:	42ae      	cmp	r6, r5
 8002134:	d10f      	bne.n	8002156 <xQueueGenericSend+0xf2>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002136:	9901      	ldr	r1, [sp, #4]
 8002138:	f104 0010 	add.w	r0, r4, #16
 800213c:	f000 fc50 	bl	80029e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff ff04 	bl	8001f4e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002146:	f000 fb33 	bl	80027b0 <xTaskResumeAll>
 800214a:	b108      	cbz	r0, 8002150 <xQueueGenericSend+0xec>
 800214c:	2601      	movs	r6, #1
 800214e:	e7ab      	b.n	80020a8 <xQueueGenericSend+0x44>
				{
					portYIELD_WITHIN_API();
 8002150:	f7ff fcd4 	bl	8001afc <vPortYield>
 8002154:	e7fa      	b.n	800214c <xQueueGenericSend+0xe8>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002156:	4620      	mov	r0, r4
 8002158:	f7ff fef9 	bl	8001f4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800215c:	f000 fb28 	bl	80027b0 <xTaskResumeAll>
 8002160:	e7f4      	b.n	800214c <xQueueGenericSend+0xe8>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002162:	4620      	mov	r0, r4
 8002164:	f7ff fef3 	bl	8001f4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002168:	f000 fb22 	bl	80027b0 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800216c:	2000      	movs	r0, #0
 800216e:	e002      	b.n	8002176 <xQueueGenericSend+0x112>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002170:	f7ff fcd0 	bl	8001b14 <ulPortSetInterruptMask>
 8002174:	e7fe      	b.n	8002174 <xQueueGenericSend+0x110>
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
 8002176:	b005      	add	sp, #20
 8002178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800217c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8002180:	2054      	movs	r0, #84	; 0x54
 8002182:	f7ff fde5 	bl	8001d50 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002186:	4604      	mov	r4, r0
 8002188:	b1d8      	cbz	r0, 80021c2 <xQueueCreateMutex+0x46>

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 800218a:	2301      	movs	r3, #1
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800218c:	2500      	movs	r5, #0

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 800218e:	63c3      	str	r3, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 8002190:	f04f 33ff 	mov.w	r3, #4294967295
			pxNewQueue->u.pcReadFrom = NULL;

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002194:	6385      	str	r5, [r0, #56]	; 0x38
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8002196:	6045      	str	r5, [r0, #4]
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 8002198:	6443      	str	r3, [r0, #68]	; 0x44
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800219a:	6005      	str	r5, [r0, #0]
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;
 800219c:	6483      	str	r3, [r0, #72]	; 0x48
			pxNewQueue->pxMutexHolder = NULL;
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 800219e:	6085      	str	r5, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
 80021a0:	60c5      	str	r5, [r0, #12]
			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 80021a2:	6405      	str	r5, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
 80021a4:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 80021a8:	3010      	adds	r0, #16
 80021aa:	f7ff fc35 	bl	8001a18 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 80021ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80021b2:	f7ff fc31 	bl	8001a18 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80021b6:	462b      	mov	r3, r5
 80021b8:	462a      	mov	r2, r5
 80021ba:	4629      	mov	r1, r5
 80021bc:	4620      	mov	r0, r4
 80021be:	f7ff ff51 	bl	8002064 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		return pxNewQueue;
	}
 80021c2:	4620      	mov	r0, r4
 80021c4:	bd70      	pop	{r4, r5, r6, pc}

080021c6 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80021c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021ca:	460e      	mov	r6, r1
 80021cc:	4690      	mov	r8, r2
 80021ce:	461d      	mov	r5, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80021d0:	4604      	mov	r4, r0
 80021d2:	b910      	cbnz	r0, 80021da <xQueueGenericSendFromISR+0x14>
 80021d4:	f7ff fc9e 	bl	8001b14 <ulPortSetInterruptMask>
 80021d8:	e7fe      	b.n	80021d8 <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021da:	b921      	cbnz	r1, 80021e6 <xQueueGenericSendFromISR+0x20>
 80021dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80021de:	b113      	cbz	r3, 80021e6 <xQueueGenericSendFromISR+0x20>
 80021e0:	f7ff fc98 	bl	8001b14 <ulPortSetInterruptMask>
 80021e4:	e7fe      	b.n	80021e4 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021e6:	2d02      	cmp	r5, #2
 80021e8:	d105      	bne.n	80021f6 <xQueueGenericSendFromISR+0x30>
 80021ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d002      	beq.n	80021f6 <xQueueGenericSendFromISR+0x30>
 80021f0:	f7ff fc90 	bl	8001b14 <ulPortSetInterruptMask>
 80021f4:	e7fe      	b.n	80021f4 <xQueueGenericSendFromISR+0x2e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80021f6:	f7ff fd65 	bl	8001cc4 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80021fa:	f7ff fc8b 	bl	8001b14 <ulPortSetInterruptMask>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002200:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002202:	4607      	mov	r7, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002204:	429a      	cmp	r2, r3
 8002206:	d301      	bcc.n	800220c <xQueueGenericSendFromISR+0x46>
 8002208:	2d02      	cmp	r5, #2
 800220a:	d11a      	bne.n	8002242 <xQueueGenericSendFromISR+0x7c>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800220c:	462a      	mov	r2, r5
 800220e:	4631      	mov	r1, r6
 8002210:	4620      	mov	r0, r4
 8002212:	f7ff fe53 	bl	8001ebc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8002216:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002218:	3301      	adds	r3, #1
 800221a:	d10d      	bne.n	8002238 <xQueueGenericSendFromISR+0x72>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800221c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800221e:	b173      	cbz	r3, 800223e <xQueueGenericSendFromISR+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002220:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002224:	f000 fc0e 	bl	8002a44 <xTaskRemoveFromEventList>
 8002228:	b148      	cbz	r0, 800223e <xQueueGenericSendFromISR+0x78>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800222a:	f1b8 0f00 	cmp.w	r8, #0
 800222e:	d006      	beq.n	800223e <xQueueGenericSendFromISR+0x78>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002230:	2401      	movs	r4, #1
 8002232:	f8c8 4000 	str.w	r4, [r8]
 8002236:	e005      	b.n	8002244 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8002238:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800223a:	3301      	adds	r3, #1
 800223c:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
 800223e:	2401      	movs	r4, #1
 8002240:	e000      	b.n	8002244 <xQueueGenericSendFromISR+0x7e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002242:	2400      	movs	r4, #0
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002244:	4638      	mov	r0, r7
 8002246:	f7ff fc95 	bl	8001b74 <vPortClearInterruptMask>

	return xReturn;
}
 800224a:	4620      	mov	r0, r4
 800224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002250 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8002250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002254:	b085      	sub	sp, #20
 8002256:	4688      	mov	r8, r1
 8002258:	9201      	str	r2, [sp, #4]
 800225a:	4699      	mov	r9, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800225c:	4604      	mov	r4, r0
 800225e:	b910      	cbnz	r0, 8002266 <xQueueGenericReceive+0x16>
 8002260:	f7ff fc58 	bl	8001b14 <ulPortSetInterruptMask>
 8002264:	e7fe      	b.n	8002264 <xQueueGenericReceive+0x14>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002266:	b921      	cbnz	r1, 8002272 <xQueueGenericReceive+0x22>
 8002268:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800226a:	b113      	cbz	r3, 8002272 <xQueueGenericReceive+0x22>
 800226c:	f7ff fc52 	bl	8001b14 <ulPortSetInterruptMask>
 8002270:	e7fe      	b.n	8002270 <xQueueGenericReceive+0x20>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002272:	f000 fc67 	bl	8002b44 <xTaskGetSchedulerState>
 8002276:	b910      	cbnz	r0, 800227e <xQueueGenericReceive+0x2e>
 8002278:	9e01      	ldr	r6, [sp, #4]
 800227a:	b10e      	cbz	r6, 8002280 <xQueueGenericReceive+0x30>
 800227c:	e078      	b.n	8002370 <xQueueGenericReceive+0x120>
 800227e:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8002280:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002282:	f7ff fc5d 	bl	8001b40 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002286:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002288:	b33b      	cbz	r3, 80022da <xQueueGenericReceive+0x8a>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800228a:	4641      	mov	r1, r8
 800228c:	4620      	mov	r0, r4
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800228e:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002290:	f7ff fe49 	bl	8001f26 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8002294:	f1b9 0f00 	cmp.w	r9, #0
 8002298:	d112      	bne.n	80022c0 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 800229a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800229c:	3b01      	subs	r3, #1
 800229e:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	b913      	cbnz	r3, 80022aa <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80022a4:	f000 fcec 	bl	8002c80 <pvTaskIncrementMutexHeldCount>
 80022a8:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022aa:	6923      	ldr	r3, [r4, #16]
 80022ac:	b18b      	cbz	r3, 80022d2 <xQueueGenericReceive+0x82>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80022ae:	f104 0010 	add.w	r0, r4, #16
 80022b2:	f000 fbc7 	bl	8002a44 <xTaskRemoveFromEventList>
 80022b6:	2801      	cmp	r0, #1
 80022b8:	d10b      	bne.n	80022d2 <xQueueGenericReceive+0x82>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80022ba:	f7ff fc1f 	bl	8001afc <vPortYield>
 80022be:	e008      	b.n	80022d2 <xQueueGenericReceive+0x82>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80022c2:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022c4:	b12b      	cbz	r3, 80022d2 <xQueueGenericReceive+0x82>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80022ca:	f000 fbbb 	bl	8002a44 <xTaskRemoveFromEventList>
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d1f3      	bne.n	80022ba <xQueueGenericReceive+0x6a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80022d2:	f7ff fc53 	bl	8001b7c <vPortExitCritical>
				return pdPASS;
 80022d6:	2001      	movs	r0, #1
 80022d8:	e04d      	b.n	8002376 <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80022da:	9d01      	ldr	r5, [sp, #4]
 80022dc:	b91d      	cbnz	r5, 80022e6 <xQueueGenericReceive+0x96>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80022de:	f7ff fc4d 	bl	8001b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80022e2:	4628      	mov	r0, r5
 80022e4:	e047      	b.n	8002376 <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
 80022e6:	b916      	cbnz	r6, 80022ee <xQueueGenericReceive+0x9e>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80022e8:	a802      	add	r0, sp, #8
 80022ea:	f000 fbe7 	bl	8002abc <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80022ee:	f7ff fc45 	bl	8001b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022f2:	f000 f9c3 	bl	800267c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022f6:	f7ff fc23 	bl	8001b40 <vPortEnterCritical>
 80022fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022fc:	3301      	adds	r3, #1
 80022fe:	bf08      	it	eq
 8002300:	6467      	streq	r7, [r4, #68]	; 0x44
 8002302:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002304:	3301      	adds	r3, #1
 8002306:	bf08      	it	eq
 8002308:	64a7      	streq	r7, [r4, #72]	; 0x48
 800230a:	f7ff fc37 	bl	8001b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800230e:	a901      	add	r1, sp, #4
 8002310:	a802      	add	r0, sp, #8
 8002312:	f000 fbe3 	bl	8002adc <xTaskCheckForTimeOut>
 8002316:	bb20      	cbnz	r0, 8002362 <xQueueGenericReceive+0x112>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002318:	f7ff fc12 	bl	8001b40 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800231c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800231e:	f7ff fc2d 	bl	8001b7c <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002322:	b9c5      	cbnz	r5, 8002356 <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	b933      	cbnz	r3, 8002336 <xQueueGenericReceive+0xe6>
					{
						taskENTER_CRITICAL();
 8002328:	f7ff fc0a 	bl	8001b40 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800232c:	6860      	ldr	r0, [r4, #4]
 800232e:	f000 fc19 	bl	8002b64 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8002332:	f7ff fc23 	bl	8001b7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002336:	9901      	ldr	r1, [sp, #4]
 8002338:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800233c:	f000 fb50 	bl	80029e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002340:	4620      	mov	r0, r4
 8002342:	f7ff fe04 	bl	8001f4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002346:	f000 fa33 	bl	80027b0 <xTaskResumeAll>
 800234a:	b108      	cbz	r0, 8002350 <xQueueGenericReceive+0x100>
 800234c:	2601      	movs	r6, #1
 800234e:	e798      	b.n	8002282 <xQueueGenericReceive+0x32>
				{
					portYIELD_WITHIN_API();
 8002350:	f7ff fbd4 	bl	8001afc <vPortYield>
 8002354:	e7fa      	b.n	800234c <xQueueGenericReceive+0xfc>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002356:	4620      	mov	r0, r4
 8002358:	f7ff fdf9 	bl	8001f4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800235c:	f000 fa28 	bl	80027b0 <xTaskResumeAll>
 8002360:	e7f4      	b.n	800234c <xQueueGenericReceive+0xfc>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff fdf3 	bl	8001f4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002368:	f000 fa22 	bl	80027b0 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 800236c:	2000      	movs	r0, #0
 800236e:	e002      	b.n	8002376 <xQueueGenericReceive+0x126>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002370:	f7ff fbd0 	bl	8001b14 <ulPortSetInterruptMask>
 8002374:	e7fe      	b.n	8002374 <xQueueGenericReceive+0x124>
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
 8002376:	b005      	add	sp, #20
 8002378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800237c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237e:	460e      	mov	r6, r1
 8002380:	4617      	mov	r7, r2
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002382:	4604      	mov	r4, r0
 8002384:	b910      	cbnz	r0, 800238c <xQueueReceiveFromISR+0x10>
 8002386:	f7ff fbc5 	bl	8001b14 <ulPortSetInterruptMask>
 800238a:	e7fe      	b.n	800238a <xQueueReceiveFromISR+0xe>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800238c:	b921      	cbnz	r1, 8002398 <xQueueReceiveFromISR+0x1c>
 800238e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002390:	b113      	cbz	r3, 8002398 <xQueueReceiveFromISR+0x1c>
 8002392:	f7ff fbbf 	bl	8001b14 <ulPortSetInterruptMask>
 8002396:	e7fe      	b.n	8002396 <xQueueReceiveFromISR+0x1a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002398:	f7ff fc94 	bl	8001cc4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800239c:	f7ff fbba 	bl	8001b14 <ulPortSetInterruptMask>
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80023a2:	4605      	mov	r5, r0
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023a4:	b1cb      	cbz	r3, 80023da <xQueueReceiveFromISR+0x5e>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023a6:	4631      	mov	r1, r6
 80023a8:	4620      	mov	r0, r4
 80023aa:	f7ff fdbc 	bl	8001f26 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 80023ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023b0:	3b01      	subs	r3, #1
 80023b2:	63a3      	str	r3, [r4, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 80023b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023b6:	3301      	adds	r3, #1
 80023b8:	d10a      	bne.n	80023d0 <xQueueReceiveFromISR+0x54>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023ba:	6923      	ldr	r3, [r4, #16]
 80023bc:	b15b      	cbz	r3, 80023d6 <xQueueReceiveFromISR+0x5a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023be:	f104 0010 	add.w	r0, r4, #16
 80023c2:	f000 fb3f 	bl	8002a44 <xTaskRemoveFromEventList>
 80023c6:	b130      	cbz	r0, 80023d6 <xQueueReceiveFromISR+0x5a>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80023c8:	b12f      	cbz	r7, 80023d6 <xQueueReceiveFromISR+0x5a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80023ca:	2401      	movs	r4, #1
 80023cc:	603c      	str	r4, [r7, #0]
 80023ce:	e005      	b.n	80023dc <xQueueReceiveFromISR+0x60>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 80023d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023d2:	3301      	adds	r3, #1
 80023d4:	6463      	str	r3, [r4, #68]	; 0x44
			}

			xReturn = pdPASS;
 80023d6:	2401      	movs	r4, #1
 80023d8:	e000      	b.n	80023dc <xQueueReceiveFromISR+0x60>
		}
		else
		{
			xReturn = pdFAIL;
 80023da:	461c      	mov	r4, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80023dc:	4628      	mov	r0, r5
 80023de:	f7ff fbc9 	bl	8001b74 <vPortClearInterruptMask>

	return xReturn;
}
 80023e2:	4620      	mov	r0, r4
 80023e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080023e8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023e8:	4a06      	ldr	r2, [pc, #24]	; (8002404 <prvResetNextTaskUnblockTime+0x1c>)
 80023ea:	6813      	ldr	r3, [r2, #0]
 80023ec:	6819      	ldr	r1, [r3, #0]
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <prvResetNextTaskUnblockTime+0x20>)
 80023f0:	b911      	cbnz	r1, 80023f8 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80023f2:	f04f 32ff 	mov.w	r2, #4294967295
 80023f6:	e003      	b.n	8002400 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80023fc:	68d2      	ldr	r2, [r2, #12]
 80023fe:	6852      	ldr	r2, [r2, #4]
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	4770      	bx	lr
 8002404:	20000c50 	.word	0x20000c50
 8002408:	20000d18 	.word	0x20000d18

0800240c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <prvAddCurrentTaskToDelayedList+0x3c>)
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 800240e:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002410:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8002412:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002414:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 8002416:	4a0d      	ldr	r2, [pc, #52]	; (800244c <prvAddCurrentTaskToDelayedList+0x40>)
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	4290      	cmp	r0, r2
 800241c:	d207      	bcs.n	800242e <prvAddCurrentTaskToDelayedList+0x22>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800241e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <prvAddCurrentTaskToDelayedList+0x44>)
 8002424:	6810      	ldr	r0, [r2, #0]
 8002426:	6819      	ldr	r1, [r3, #0]
 8002428:	3104      	adds	r1, #4
 800242a:	f7ff bb0f 	b.w	8001a4c <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <prvAddCurrentTaskToDelayedList+0x48>)
 8002430:	6810      	ldr	r0, [r2, #0]
 8002432:	6819      	ldr	r1, [r3, #0]
 8002434:	3104      	adds	r1, #4
 8002436:	f7ff fb09 	bl	8001a4c <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 800243a:	4b07      	ldr	r3, [pc, #28]	; (8002458 <prvAddCurrentTaskToDelayedList+0x4c>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002440:	bf38      	it	cc
 8002442:	601c      	strcc	r4, [r3, #0]
 8002444:	bd10      	pop	{r4, pc}
 8002446:	bf00      	nop
 8002448:	20000d14 	.word	0x20000d14
 800244c:	20000d20 	.word	0x20000d20
 8002450:	20000d24 	.word	0x20000d24
 8002454:	20000c50 	.word	0x20000c50
 8002458:	20000d18 	.word	0x20000d18

0800245c <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800245c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002460:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002462:	469a      	mov	sl, r3
 8002464:	460f      	mov	r7, r1
 8002466:	4615      	mov	r5, r2
 8002468:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800246c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 800246e:	4681      	mov	r9, r0
 8002470:	b910      	cbnz	r0, 8002478 <xTaskGenericCreate+0x1c>
 8002472:	f7ff fb4f 	bl	8001b14 <ulPortSetInterruptMask>
 8002476:	e7fe      	b.n	8002476 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8002478:	2e06      	cmp	r6, #6
 800247a:	d902      	bls.n	8002482 <xTaskGenericCreate+0x26>
 800247c:	f7ff fb4a 	bl	8001b14 <ulPortSetInterruptMask>
 8002480:	e7fe      	b.n	8002480 <xTaskGenericCreate+0x24>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002482:	b93b      	cbnz	r3, 8002494 <xTaskGenericCreate+0x38>
 8002484:	0090      	lsls	r0, r2, #2
 8002486:	f7ff fc63 	bl	8001d50 <pvPortMalloc>

		if( pxStack != NULL )
 800248a:	4683      	mov	fp, r0
 800248c:	2800      	cmp	r0, #0
 800248e:	f000 80a6 	beq.w	80025de <xTaskGenericCreate+0x182>
 8002492:	e000      	b.n	8002496 <xTaskGenericCreate+0x3a>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002494:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002496:	205c      	movs	r0, #92	; 0x5c
 8002498:	f7ff fc5a 	bl	8001d50 <pvPortMalloc>

			if( pxNewTCB != NULL )
 800249c:	4604      	mov	r4, r0
 800249e:	b188      	cbz	r0, 80024c4 <xTaskGenericCreate+0x68>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 80024a0:	00ad      	lsls	r5, r5, #2
 80024a2:	462a      	mov	r2, r5
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 80024a4:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 80024a8:	21a5      	movs	r1, #165	; 0xa5
 80024aa:	4658      	mov	r0, fp
 80024ac:	f001 fd46 	bl	8003f3c <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80024b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024b2:	3d04      	subs	r5, #4
 80024b4:	441d      	add	r5, r3
 80024b6:	f025 0507 	bic.w	r5, r5, #7
 80024ba:	1e7b      	subs	r3, r7, #1
 80024bc:	f104 0233 	add.w	r2, r4, #51	; 0x33
 80024c0:	370f      	adds	r7, #15
 80024c2:	e005      	b.n	80024d0 <xTaskGenericCreate+0x74>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 80024c4:	4658      	mov	r0, fp
 80024c6:	f7ff fccd 	bl	8001e64 <vPortFree>
 80024ca:	e088      	b.n	80025de <xTaskGenericCreate+0x182>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024cc:	42bb      	cmp	r3, r7
 80024ce:	d006      	beq.n	80024de <xTaskGenericCreate+0x82>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 80024d0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80024d4:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80024d8:	7819      	ldrb	r1, [r3, #0]
 80024da:	2900      	cmp	r1, #0
 80024dc:	d1f6      	bne.n	80024cc <xTaskGenericCreate+0x70>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024de:	f04f 0b00 	mov.w	fp, #0
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80024e2:	1d27      	adds	r7, r4, #4
 80024e4:	4638      	mov	r0, r7
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024e6:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 80024ea:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80024ec:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 80024ee:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80024f2:	f7ff fa9c 	bl	8001a2e <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80024f6:	f104 0018 	add.w	r0, r4, #24
 80024fa:	f7ff fa98 	bl	8001a2e <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024fe:	f1c6 0307 	rsb	r3, r6, #7
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 8002502:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8002506:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002508:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800250a:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 800250c:	f884 b058 	strb.w	fp, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002510:	4652      	mov	r2, sl
 8002512:	4649      	mov	r1, r9
 8002514:	4628      	mov	r0, r5
 8002516:	f7ff fad1 	bl	8001abc <pxPortInitialiseStack>
 800251a:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 800251c:	f1b8 0f00 	cmp.w	r8, #0
 8002520:	d001      	beq.n	8002526 <xTaskGenericCreate+0xca>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002522:	f8c8 4000 	str.w	r4, [r8]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8002526:	f7ff fb0b 	bl	8001b40 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 800252a:	4a2f      	ldr	r2, [pc, #188]	; (80025e8 <xTaskGenericCreate+0x18c>)
			if( pxCurrentTCB == NULL )
 800252c:	4d2f      	ldr	r5, [pc, #188]	; (80025ec <xTaskGenericCreate+0x190>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 800252e:	6813      	ldr	r3, [r2, #0]
 8002530:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8002610 <xTaskGenericCreate+0x1b4>
 8002534:	3301      	adds	r3, #1
 8002536:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8002538:	682b      	ldr	r3, [r5, #0]
 800253a:	bb3b      	cbnz	r3, 800258c <xTaskGenericCreate+0x130>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 800253c:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	2a01      	cmp	r2, #1
 8002542:	d12b      	bne.n	800259c <xTaskGenericCreate+0x140>
 8002544:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002546:	eb09 0008 	add.w	r0, r9, r8
 800254a:	f108 0814 	add.w	r8, r8, #20
 800254e:	f7ff fa63 	bl	8001a18 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002552:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 8002556:	d1f6      	bne.n	8002546 <xTaskGenericCreate+0xea>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002558:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002614 <xTaskGenericCreate+0x1b8>
	vListInitialise( &xDelayedTaskList2 );
 800255c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002618 <xTaskGenericCreate+0x1bc>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002560:	4650      	mov	r0, sl
 8002562:	f7ff fa59 	bl	8001a18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002566:	4640      	mov	r0, r8
 8002568:	f7ff fa56 	bl	8001a18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800256c:	4820      	ldr	r0, [pc, #128]	; (80025f0 <xTaskGenericCreate+0x194>)
 800256e:	f7ff fa53 	bl	8001a18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002572:	4820      	ldr	r0, [pc, #128]	; (80025f4 <xTaskGenericCreate+0x198>)
 8002574:	f7ff fa50 	bl	8001a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002578:	481f      	ldr	r0, [pc, #124]	; (80025f8 <xTaskGenericCreate+0x19c>)
 800257a:	f7ff fa4d 	bl	8001a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800257e:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <xTaskGenericCreate+0x1a0>)
 8002580:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002584:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <xTaskGenericCreate+0x1a4>)
 8002586:	f8c3 8000 	str.w	r8, [r3]
 800258a:	e007      	b.n	800259c <xTaskGenericCreate+0x140>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <xTaskGenericCreate+0x1a8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	b923      	cbnz	r3, 800259c <xTaskGenericCreate+0x140>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8002592:	682b      	ldr	r3, [r5, #0]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	429e      	cmp	r6, r3
					{
						pxCurrentTCB = pxNewTCB;
 8002598:	bf28      	it	cs
 800259a:	602c      	strcs	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 800259c:	4a1a      	ldr	r2, [pc, #104]	; (8002608 <xTaskGenericCreate+0x1ac>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800259e:	491b      	ldr	r1, [pc, #108]	; (800260c <xTaskGenericCreate+0x1b0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80025a0:	6813      	ldr	r3, [r2, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80025a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025a8:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80025aa:	680b      	ldr	r3, [r1, #0]
 80025ac:	2401      	movs	r4, #1
 80025ae:	fa04 f002 	lsl.w	r0, r4, r2
 80025b2:	4303      	orrs	r3, r0
 80025b4:	2014      	movs	r0, #20
 80025b6:	600b      	str	r3, [r1, #0]
 80025b8:	fb00 9002 	mla	r0, r0, r2, r9
 80025bc:	4639      	mov	r1, r7
 80025be:	f7ff fa39 	bl	8001a34 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80025c2:	f7ff fadb 	bl	8001b7c <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <xTaskGenericCreate+0x1a8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b12b      	cbz	r3, 80025d8 <xTaskGenericCreate+0x17c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80025cc:	682b      	ldr	r3, [r5, #0]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	429e      	cmp	r6, r3
 80025d2:	d901      	bls.n	80025d8 <xTaskGenericCreate+0x17c>
			{
				taskYIELD_IF_USING_PREEMPTION();
 80025d4:	f7ff fa92 	bl	8001afc <vPortYield>
 80025d8:	4620      	mov	r0, r4
 80025da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025de:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 80025e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025e6:	bf00      	nop
 80025e8:	20000d40 	.word	0x20000d40
 80025ec:	20000d14 	.word	0x20000d14
 80025f0:	20000d28 	.word	0x20000d28
 80025f4:	20000d00 	.word	0x20000d00
 80025f8:	20000d58 	.word	0x20000d58
 80025fc:	20000c50 	.word	0x20000c50
 8002600:	20000d24 	.word	0x20000d24
 8002604:	20000c54 	.word	0x20000c54
 8002608:	20000d3c 	.word	0x20000d3c
 800260c:	20000d6c 	.word	0x20000d6c
 8002610:	20000c74 	.word	0x20000c74
 8002614:	20000c5c 	.word	0x20000c5c
 8002618:	20000d44 	.word	0x20000d44

0800261c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800261c:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800261e:	2400      	movs	r4, #0

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002620:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8002622:	9403      	str	r4, [sp, #12]
 8002624:	9402      	str	r4, [sp, #8]
 8002626:	9401      	str	r4, [sp, #4]
 8002628:	9400      	str	r4, [sp, #0]
 800262a:	4623      	mov	r3, r4
 800262c:	2280      	movs	r2, #128	; 0x80
 800262e:	490e      	ldr	r1, [pc, #56]	; (8002668 <vTaskStartScheduler+0x4c>)
 8002630:	480e      	ldr	r0, [pc, #56]	; (800266c <vTaskStartScheduler+0x50>)
 8002632:	f7ff ff13 	bl	800245c <xTaskGenericCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002636:	2801      	cmp	r0, #1
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8002638:	4605      	mov	r5, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800263a:	d10e      	bne.n	800265a <vTaskStartScheduler+0x3e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800263c:	f7ff fa6a 	bl	8001b14 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <vTaskStartScheduler+0x54>)
 8002642:	f04f 32ff 	mov.w	r2, #4294967295
 8002646:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002648:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <vTaskStartScheduler+0x58>)
 800264a:	601d      	str	r5, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <vTaskStartScheduler+0x5c>)
 800264e:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8002650:	b005      	add	sp, #20
 8002652:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002656:	f7ff baeb 	b.w	8001c30 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 800265a:	b910      	cbnz	r0, 8002662 <vTaskStartScheduler+0x46>
 800265c:	f7ff fa5a 	bl	8001b14 <ulPortSetInterruptMask>
 8002660:	e7fe      	b.n	8002660 <vTaskStartScheduler+0x44>
	}
}
 8002662:	b005      	add	sp, #20
 8002664:	bd30      	pop	{r4, r5, pc}
 8002666:	bf00      	nop
 8002668:	08004040 	.word	0x08004040
 800266c:	080028e1 	.word	0x080028e1
 8002670:	20000d18 	.word	0x20000d18
 8002674:	20000c54 	.word	0x20000c54
 8002678:	20000d20 	.word	0x20000d20

0800267c <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800267c:	4a02      	ldr	r2, [pc, #8]	; (8002688 <vTaskSuspendAll+0xc>)
 800267e:	6813      	ldr	r3, [r2, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000d1c 	.word	0x20000d1c

0800268c <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800268c:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <xTaskIncrementTick+0xf8>)

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800268e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d136      	bne.n	8002706 <xTaskIncrementTick+0x7a>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8002698:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <xTaskIncrementTick+0xfc>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	3201      	adds	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80026a0:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 80026a2:	b98d      	cbnz	r5, 80026c8 <xTaskIncrementTick+0x3c>
			{
				taskSWITCH_DELAYED_LISTS();
 80026a4:	4b39      	ldr	r3, [pc, #228]	; (800278c <xTaskIncrementTick+0x100>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	b112      	cbz	r2, 80026b2 <xTaskIncrementTick+0x26>
 80026ac:	f7ff fa32 	bl	8001b14 <ulPortSetInterruptMask>
 80026b0:	e7fe      	b.n	80026b0 <xTaskIncrementTick+0x24>
 80026b2:	4a37      	ldr	r2, [pc, #220]	; (8002790 <xTaskIncrementTick+0x104>)
 80026b4:	6819      	ldr	r1, [r3, #0]
 80026b6:	6810      	ldr	r0, [r2, #0]
 80026b8:	6018      	str	r0, [r3, #0]
 80026ba:	6011      	str	r1, [r2, #0]
 80026bc:	4a35      	ldr	r2, [pc, #212]	; (8002794 <xTaskIncrementTick+0x108>)
 80026be:	6813      	ldr	r3, [r2, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	f7ff fe90 	bl	80023e8 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 80026c8:	4c33      	ldr	r4, [pc, #204]	; (8002798 <xTaskIncrementTick+0x10c>)
 80026ca:	f04f 0b00 	mov.w	fp, #0
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	9401      	str	r4, [sp, #4]
 80026d2:	429d      	cmp	r5, r3
 80026d4:	4e31      	ldr	r6, [pc, #196]	; (800279c <xTaskIncrementTick+0x110>)
 80026d6:	4f32      	ldr	r7, [pc, #200]	; (80027a0 <xTaskIncrementTick+0x114>)
 80026d8:	d30b      	bcc.n	80026f2 <xTaskIncrementTick+0x66>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026da:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800278c <xTaskIncrementTick+0x100>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 80026de:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80027ac <xTaskIncrementTick+0x120>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026e2:	f8d8 2000 	ldr.w	r2, [r8]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	b9a2      	cbnz	r2, 8002714 <xTaskIncrementTick+0x88>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 80026ea:	9b01      	ldr	r3, [sp, #4]
 80026ec:	f04f 32ff 	mov.w	r2, #4294967295
 80026f0:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026f6:	2214      	movs	r2, #20
 80026f8:	434a      	muls	r2, r1
 80026fa:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 80026fc:	2a02      	cmp	r2, #2
 80026fe:	bf28      	it	cs
 8002700:	f04f 0b01 	movcs.w	fp, #1
 8002704:	e034      	b.n	8002770 <xTaskIncrementTick+0xe4>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002706:	4a27      	ldr	r2, [pc, #156]	; (80027a4 <xTaskIncrementTick+0x118>)

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002708:	f04f 0b00 	mov.w	fp, #0
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800270c:	6813      	ldr	r3, [r2, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e02d      	b.n	8002770 <xTaskIncrementTick+0xe4>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002714:	f8d8 2000 	ldr.w	r2, [r8]
 8002718:	68d2      	ldr	r2, [r2, #12]
 800271a:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800271c:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 800271e:	428d      	cmp	r5, r1
 8002720:	d202      	bcs.n	8002728 <xTaskIncrementTick+0x9c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8002722:	9b01      	ldr	r3, [sp, #4]
 8002724:	6019      	str	r1, [r3, #0]
							break;
 8002726:	e7e4      	b.n	80026f2 <xTaskIncrementTick+0x66>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002728:	f104 0a04 	add.w	sl, r4, #4
 800272c:	4650      	mov	r0, sl
 800272e:	f7ff f9a5 	bl	8001a7c <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002732:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002734:	b119      	cbz	r1, 800273e <xTaskIncrementTick+0xb2>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002736:	f104 0018 	add.w	r0, r4, #24
 800273a:	f7ff f99f 	bl	8001a7c <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800273e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002740:	f8d9 1000 	ldr.w	r1, [r9]
 8002744:	2301      	movs	r3, #1
 8002746:	fa03 fe00 	lsl.w	lr, r3, r0
 800274a:	ea4e 0101 	orr.w	r1, lr, r1
 800274e:	f04f 0e14 	mov.w	lr, #20
 8002752:	f8c9 1000 	str.w	r1, [r9]
 8002756:	fb0e 6000 	mla	r0, lr, r0, r6
 800275a:	4651      	mov	r1, sl
 800275c:	f7ff f96a 	bl	8001a34 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002760:	6838      	ldr	r0, [r7, #0]
 8002762:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002764:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 8002766:	4291      	cmp	r1, r2
 8002768:	bf28      	it	cs
 800276a:	f04f 0b01 	movcs.w	fp, #1
 800276e:	e7b8      	b.n	80026e2 <xTaskIncrementTick+0x56>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002770:	4a0d      	ldr	r2, [pc, #52]	; (80027a8 <xTaskIncrementTick+0x11c>)
 8002772:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8002774:	2a00      	cmp	r2, #0
 8002776:	bf18      	it	ne
 8002778:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 800277c:	4658      	mov	r0, fp
 800277e:	b003      	add	sp, #12
 8002780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002784:	20000d1c 	.word	0x20000d1c
 8002788:	20000d20 	.word	0x20000d20
 800278c:	20000c50 	.word	0x20000c50
 8002790:	20000d24 	.word	0x20000d24
 8002794:	20000c4c 	.word	0x20000c4c
 8002798:	20000d18 	.word	0x20000d18
 800279c:	20000c74 	.word	0x20000c74
 80027a0:	20000d14 	.word	0x20000d14
 80027a4:	20000c70 	.word	0x20000c70
 80027a8:	20000d70 	.word	0x20000d70
 80027ac:	20000d6c 	.word	0x20000d6c

080027b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80027b4:	4c2a      	ldr	r4, [pc, #168]	; (8002860 <xTaskResumeAll+0xb0>)
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	b913      	cbnz	r3, 80027c0 <xTaskResumeAll+0x10>
 80027ba:	f7ff f9ab 	bl	8001b14 <ulPortSetInterruptMask>
 80027be:	e7fe      	b.n	80027be <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80027c0:	f7ff f9be 	bl	8001b40 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027ca:	6823      	ldr	r3, [r4, #0]
 80027cc:	b10b      	cbz	r3, 80027d2 <xTaskResumeAll+0x22>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 80027ce:	2400      	movs	r4, #0
 80027d0:	e041      	b.n	8002856 <xTaskResumeAll+0xa6>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027d2:	4b24      	ldr	r3, [pc, #144]	; (8002864 <xTaskResumeAll+0xb4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f9      	beq.n	80027ce <xTaskResumeAll+0x1e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027da:	4d23      	ldr	r5, [pc, #140]	; (8002868 <xTaskResumeAll+0xb8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 80027dc:	4e23      	ldr	r6, [pc, #140]	; (800286c <xTaskResumeAll+0xbc>)
 80027de:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800287c <xTaskResumeAll+0xcc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027e2:	682b      	ldr	r3, [r5, #0]
 80027e4:	b303      	cbz	r3, 8002828 <xTaskResumeAll+0x78>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80027e6:	68eb      	ldr	r3, [r5, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 80027e8:	2701      	movs	r7, #1
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80027ea:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80027ec:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027f0:	f104 0018 	add.w	r0, r4, #24
 80027f4:	f7ff f942 	bl	8001a7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80027f8:	4648      	mov	r0, r9
 80027fa:	f7ff f93f 	bl	8001a7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80027fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002800:	6833      	ldr	r3, [r6, #0]
 8002802:	fa07 f102 	lsl.w	r1, r7, r2
 8002806:	2014      	movs	r0, #20
 8002808:	430b      	orrs	r3, r1
 800280a:	fb00 8002 	mla	r0, r0, r2, r8
 800280e:	4649      	mov	r1, r9
 8002810:	6033      	str	r3, [r6, #0]
 8002812:	f7ff f90f 	bl	8001a34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002816:	4b16      	ldr	r3, [pc, #88]	; (8002870 <xTaskResumeAll+0xc0>)
 8002818:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	429a      	cmp	r2, r3
 8002820:	d3df      	bcc.n	80027e2 <xTaskResumeAll+0x32>
					{
						xYieldPending = pdTRUE;
 8002822:	4b14      	ldr	r3, [pc, #80]	; (8002874 <xTaskResumeAll+0xc4>)
 8002824:	601f      	str	r7, [r3, #0]
 8002826:	e7da      	b.n	80027de <xTaskResumeAll+0x2e>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8002828:	4c13      	ldr	r4, [pc, #76]	; (8002878 <xTaskResumeAll+0xc8>)
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	b933      	cbnz	r3, 800283c <xTaskResumeAll+0x8c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <xTaskResumeAll+0xc4>)
 8002830:	681c      	ldr	r4, [r3, #0]
 8002832:	2c01      	cmp	r4, #1
 8002834:	d1cb      	bne.n	80027ce <xTaskResumeAll+0x1e>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002836:	f7ff f961 	bl	8001afc <vPortYield>
 800283a:	e00c      	b.n	8002856 <xTaskResumeAll+0xa6>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 800283c:	4d0d      	ldr	r5, [pc, #52]	; (8002874 <xTaskResumeAll+0xc4>)
 800283e:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f3      	beq.n	800282e <xTaskResumeAll+0x7e>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8002846:	f7ff ff21 	bl	800268c <xTaskIncrementTick>
 800284a:	b100      	cbz	r0, 800284e <xTaskResumeAll+0x9e>
						{
							xYieldPending = pdTRUE;
 800284c:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	3b01      	subs	r3, #1
 8002852:	6023      	str	r3, [r4, #0]
 8002854:	e7f4      	b.n	8002840 <xTaskResumeAll+0x90>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002856:	f7ff f991 	bl	8001b7c <vPortExitCritical>

	return xAlreadyYielded;
}
 800285a:	4620      	mov	r0, r4
 800285c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002860:	20000d1c 	.word	0x20000d1c
 8002864:	20000d40 	.word	0x20000d40
 8002868:	20000d28 	.word	0x20000d28
 800286c:	20000d6c 	.word	0x20000d6c
 8002870:	20000d14 	.word	0x20000d14
 8002874:	20000d70 	.word	0x20000d70
 8002878:	20000c70 	.word	0x20000c70
 800287c:	20000c74 	.word	0x20000c74

08002880 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002880:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002882:	b918      	cbnz	r0, 800288c <vTaskDelay+0xc>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8002888:	f7ff b938 	b.w	8001afc <vPortYield>


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <vTaskDelay+0x50>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	b113      	cbz	r3, 8002898 <vTaskDelay+0x18>
 8002892:	f7ff f93f 	bl	8001b14 <ulPortSetInterruptMask>
 8002896:	e7fe      	b.n	8002896 <vTaskDelay+0x16>
			vTaskSuspendAll();
 8002898:	f7ff fef0 	bl	800267c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <vTaskDelay+0x54>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800289e:	4d0e      	ldr	r5, [pc, #56]	; (80028d8 <vTaskDelay+0x58>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80028a4:	6828      	ldr	r0, [r5, #0]
 80028a6:	3004      	adds	r0, #4
 80028a8:	f7ff f8e8 	bl	8001a7c <uxListRemove>
 80028ac:	b940      	cbnz	r0, 80028c0 <vTaskDelay+0x40>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80028ae:	682b      	ldr	r3, [r5, #0]
 80028b0:	490a      	ldr	r1, [pc, #40]	; (80028dc <vTaskDelay+0x5c>)
 80028b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80028b4:	680a      	ldr	r2, [r1, #0]
 80028b6:	2301      	movs	r3, #1
 80028b8:	4083      	lsls	r3, r0
 80028ba:	ea22 0303 	bic.w	r3, r2, r3
 80028be:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80028c0:	4620      	mov	r0, r4
 80028c2:	f7ff fda3 	bl	800240c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80028c6:	f7ff ff73 	bl	80027b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d0da      	beq.n	8002884 <vTaskDelay+0x4>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80028ce:	bd38      	pop	{r3, r4, r5, pc}
 80028d0:	20000d1c 	.word	0x20000d1c
 80028d4:	20000d20 	.word	0x20000d20
 80028d8:	20000d14 	.word	0x20000d14
 80028dc:	20000d6c 	.word	0x20000d6c

080028e0 <prvIdleTask>:
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80028e0:	4d15      	ldr	r5, [pc, #84]	; (8002938 <prvIdleTask+0x58>)
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80028e2:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80028e4:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80028e6:	4f15      	ldr	r7, [pc, #84]	; (800293c <prvIdleTask+0x5c>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80028e8:	682b      	ldr	r3, [r5, #0]
 80028ea:	b1f3      	cbz	r3, 800292a <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 80028ec:	f7ff fec6 	bl	800267c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80028f0:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 80028f2:	f7ff ff5d 	bl	80027b0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80028f6:	2c00      	cmp	r4, #0
 80028f8:	d0f6      	beq.n	80028e8 <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80028fa:	f7ff f921 	bl	8001b40 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <prvIdleTask+0x5c>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8002904:	1d20      	adds	r0, r4, #4
 8002906:	f7ff f8b9 	bl	8001a7c <uxListRemove>
					--uxCurrentNumberOfTasks;
 800290a:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <prvIdleTask+0x60>)
 800290c:	6813      	ldr	r3, [r2, #0]
 800290e:	3b01      	subs	r3, #1
 8002910:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8002912:	6833      	ldr	r3, [r6, #0]
 8002914:	3b01      	subs	r3, #1
 8002916:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 8002918:	f7ff f930 	bl	8001b7c <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 800291c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800291e:	f7ff faa1 	bl	8001e64 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 8002922:	4620      	mov	r0, r4
 8002924:	f7ff fa9e 	bl	8001e64 <vPortFree>
 8002928:	e7de      	b.n	80028e8 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <prvIdleTask+0x64>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d9d9      	bls.n	80028e6 <prvIdleTask+0x6>
			{
				taskYIELD();
 8002932:	f7ff f8e3 	bl	8001afc <vPortYield>
 8002936:	e7d6      	b.n	80028e6 <prvIdleTask+0x6>
 8002938:	20000c58 	.word	0x20000c58
 800293c:	20000d00 	.word	0x20000d00
 8002940:	20000d40 	.word	0x20000d40
 8002944:	20000c74 	.word	0x20000c74

08002948 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002948:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <vTaskSwitchContext+0x84>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <vTaskSwitchContext+0x88>)
 8002950:	b112      	cbz	r2, 8002958 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002952:	2201      	movs	r2, #1
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	bd38      	pop	{r3, r4, r5, pc}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 8002958:	4c1e      	ldr	r4, [pc, #120]	; (80029d4 <vTaskSwitchContext+0x8c>)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 800295a:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002966:	d10b      	bne.n	8002980 <vTaskSwitchContext+0x38>
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800296e:	d107      	bne.n	8002980 <vTaskSwitchContext+0x38>
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002976:	d103      	bne.n	8002980 <vTaskSwitchContext+0x38>
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 800297e:	d004      	beq.n	800298a <vTaskSwitchContext+0x42>
 8002980:	6820      	ldr	r0, [r4, #0]
 8002982:	6821      	ldr	r1, [r4, #0]
 8002984:	3134      	adds	r1, #52	; 0x34
 8002986:	f000 fb8b 	bl	80030a0 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <vTaskSwitchContext+0x90>)
 800298c:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f1c3 031f 	rsb	r3, r3, #31
 8002998:	2214      	movs	r2, #20
 800299a:	435a      	muls	r2, r3
 800299c:	490f      	ldr	r1, [pc, #60]	; (80029dc <vTaskSwitchContext+0x94>)
 800299e:	588d      	ldr	r5, [r1, r2]
 80029a0:	1888      	adds	r0, r1, r2
 80029a2:	b915      	cbnz	r5, 80029aa <vTaskSwitchContext+0x62>
 80029a4:	f7ff f8b6 	bl	8001b14 <ulPortSetInterruptMask>
 80029a8:	e7fe      	b.n	80029a8 <vTaskSwitchContext+0x60>
 80029aa:	6845      	ldr	r5, [r0, #4]
 80029ac:	3208      	adds	r2, #8
 80029ae:	686d      	ldr	r5, [r5, #4]
 80029b0:	440a      	add	r2, r1
 80029b2:	4295      	cmp	r5, r2
 80029b4:	bf08      	it	eq
 80029b6:	686a      	ldreq	r2, [r5, #4]
 80029b8:	6045      	str	r5, [r0, #4]
 80029ba:	bf08      	it	eq
 80029bc:	6042      	streq	r2, [r0, #4]
 80029be:	2214      	movs	r2, #20
 80029c0:	fb02 1303 	mla	r3, r2, r3, r1
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	6023      	str	r3, [r4, #0]
 80029ca:	bd38      	pop	{r3, r4, r5, pc}
 80029cc:	20000d1c 	.word	0x20000d1c
 80029d0:	20000d70 	.word	0x20000d70
 80029d4:	20000d14 	.word	0x20000d14
 80029d8:	20000d6c 	.word	0x20000d6c
 80029dc:	20000c74 	.word	0x20000c74

080029e0 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80029e0:	b538      	push	{r3, r4, r5, lr}
 80029e2:	460d      	mov	r5, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 80029e4:	b910      	cbnz	r0, 80029ec <vTaskPlaceOnEventList+0xc>
 80029e6:	f7ff f895 	bl	8001b14 <ulPortSetInterruptMask>
 80029ea:	e7fe      	b.n	80029ea <vTaskPlaceOnEventList+0xa>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029ec:	4c11      	ldr	r4, [pc, #68]	; (8002a34 <vTaskPlaceOnEventList+0x54>)
 80029ee:	6821      	ldr	r1, [r4, #0]
 80029f0:	3118      	adds	r1, #24
 80029f2:	f7ff f82b 	bl	8001a4c <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80029f6:	6820      	ldr	r0, [r4, #0]
 80029f8:	3004      	adds	r0, #4
 80029fa:	f7ff f83f 	bl	8001a7c <uxListRemove>
 80029fe:	b940      	cbnz	r0, 8002a12 <vTaskPlaceOnEventList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	490d      	ldr	r1, [pc, #52]	; (8002a38 <vTaskPlaceOnEventList+0x58>)
 8002a04:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002a06:	680a      	ldr	r2, [r1, #0]
 8002a08:	2301      	movs	r3, #1
 8002a0a:	4083      	lsls	r3, r0
 8002a0c:	ea22 0303 	bic.w	r3, r2, r3
 8002a10:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8002a12:	1c6b      	adds	r3, r5, #1
 8002a14:	d106      	bne.n	8002a24 <vTaskPlaceOnEventList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002a16:	6821      	ldr	r1, [r4, #0]
 8002a18:	4808      	ldr	r0, [pc, #32]	; (8002a3c <vTaskPlaceOnEventList+0x5c>)
 8002a1a:	3104      	adds	r1, #4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8002a20:	f7ff b808 	b.w	8001a34 <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <vTaskPlaceOnEventList+0x60>)
 8002a26:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002a28:	4428      	add	r0, r5
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002a2e:	f7ff bced 	b.w	800240c <prvAddCurrentTaskToDelayedList>
 8002a32:	bf00      	nop
 8002a34:	20000d14 	.word	0x20000d14
 8002a38:	20000d6c 	.word	0x20000d6c
 8002a3c:	20000d58 	.word	0x20000d58
 8002a40:	20000d20 	.word	0x20000d20

08002a44 <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002a44:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002a46:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002a48:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002a4a:	b914      	cbnz	r4, 8002a52 <xTaskRemoveFromEventList+0xe>
 8002a4c:	f7ff f862 	bl	8001b14 <ulPortSetInterruptMask>
 8002a50:	e7fe      	b.n	8002a50 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002a52:	f104 0518 	add.w	r5, r4, #24
 8002a56:	4628      	mov	r0, r5
 8002a58:	f7ff f810 	bl	8001a7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <xTaskRemoveFromEventList+0x60>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	b983      	cbnz	r3, 8002a84 <xTaskRemoveFromEventList+0x40>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002a62:	1d26      	adds	r6, r4, #4
 8002a64:	4630      	mov	r0, r6
 8002a66:	f7ff f809 	bl	8001a7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002a6a:	490f      	ldr	r1, [pc, #60]	; (8002aa8 <xTaskRemoveFromEventList+0x64>)
 8002a6c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002a6e:	680a      	ldr	r2, [r1, #0]
 8002a70:	2301      	movs	r3, #1
 8002a72:	40ab      	lsls	r3, r5
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <xTaskRemoveFromEventList+0x68>)
 8002a7a:	2014      	movs	r0, #20
 8002a7c:	4631      	mov	r1, r6
 8002a7e:	fb00 3005 	mla	r0, r0, r5, r3
 8002a82:	e001      	b.n	8002a88 <xTaskRemoveFromEventList+0x44>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002a84:	4629      	mov	r1, r5
 8002a86:	480a      	ldr	r0, [pc, #40]	; (8002ab0 <xTaskRemoveFromEventList+0x6c>)
 8002a88:	f7fe ffd4 	bl	8001a34 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <xTaskRemoveFromEventList+0x70>)
 8002a8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002a96:	bf83      	ittte	hi
 8002a98:	4b07      	ldrhi	r3, [pc, #28]	; (8002ab8 <xTaskRemoveFromEventList+0x74>)
 8002a9a:	2001      	movhi	r0, #1
 8002a9c:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 8002a9e:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8002aa0:	bd70      	pop	{r4, r5, r6, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000d1c 	.word	0x20000d1c
 8002aa8:	20000d6c 	.word	0x20000d6c
 8002aac:	20000c74 	.word	0x20000c74
 8002ab0:	20000d28 	.word	0x20000d28
 8002ab4:	20000d14 	.word	0x20000d14
 8002ab8:	20000d70 	.word	0x20000d70

08002abc <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002abc:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8002abe:	b910      	cbnz	r0, 8002ac6 <vTaskSetTimeOutState+0xa>
 8002ac0:	f7ff f828 	bl	8001b14 <ulPortSetInterruptMask>
 8002ac4:	e7fe      	b.n	8002ac4 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ac6:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <vTaskSetTimeOutState+0x18>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002acc:	4b02      	ldr	r3, [pc, #8]	; (8002ad8 <vTaskSetTimeOutState+0x1c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6043      	str	r3, [r0, #4]
 8002ad2:	bd08      	pop	{r3, pc}
 8002ad4:	20000c4c 	.word	0x20000c4c
 8002ad8:	20000d20 	.word	0x20000d20

08002adc <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002adc:	b538      	push	{r3, r4, r5, lr}
 8002ade:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	b910      	cbnz	r0, 8002aea <xTaskCheckForTimeOut+0xe>
 8002ae4:	f7ff f816 	bl	8001b14 <ulPortSetInterruptMask>
 8002ae8:	e7fe      	b.n	8002ae8 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
 8002aea:	b911      	cbnz	r1, 8002af2 <xTaskCheckForTimeOut+0x16>
 8002aec:	f7ff f812 	bl	8001b14 <ulPortSetInterruptMask>
 8002af0:	e7fe      	b.n	8002af0 <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
 8002af2:	f7ff f825 	bl	8001b40 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <xTaskCheckForTimeOut+0x54>)
 8002af8:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002afa:	682b      	ldr	r3, [r5, #0]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	d010      	beq.n	8002b22 <xTaskCheckForTimeOut+0x46>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002b00:	4a0c      	ldr	r2, [pc, #48]	; (8002b34 <xTaskCheckForTimeOut+0x58>)
 8002b02:	6820      	ldr	r0, [r4, #0]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	4290      	cmp	r0, r2
 8002b08:	6862      	ldr	r2, [r4, #4]
 8002b0a:	d001      	beq.n	8002b10 <xTaskCheckForTimeOut+0x34>
 8002b0c:	4291      	cmp	r1, r2
 8002b0e:	d20a      	bcs.n	8002b26 <xTaskCheckForTimeOut+0x4a>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8002b10:	1a88      	subs	r0, r1, r2
 8002b12:	4283      	cmp	r3, r0
 8002b14:	d907      	bls.n	8002b26 <xTaskCheckForTimeOut+0x4a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8002b16:	1a52      	subs	r2, r2, r1
 8002b18:	4413      	add	r3, r2
 8002b1a:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f7ff ffcd 	bl	8002abc <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 8002b22:	2400      	movs	r4, #0
 8002b24:	e000      	b.n	8002b28 <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8002b26:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002b28:	f7ff f828 	bl	8001b7c <vPortExitCritical>

	return xReturn;
}
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	bd38      	pop	{r3, r4, r5, pc}
 8002b30:	20000d20 	.word	0x20000d20
 8002b34:	20000c4c 	.word	0x20000c4c

08002b38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8002b38:	4b01      	ldr	r3, [pc, #4]	; (8002b40 <vTaskMissedYield+0x8>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	4770      	bx	lr
 8002b40:	20000d70 	.word	0x20000d70

08002b44 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <xTaskGetSchedulerState+0x18>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	b133      	cbz	r3, 8002b58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <xTaskGetSchedulerState+0x1c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002b50:	bf0c      	ite	eq
 8002b52:	2002      	moveq	r0, #2
 8002b54:	2000      	movne	r0, #0
 8002b56:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002b58:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8002b5a:	4770      	bx	lr
 8002b5c:	20000c54 	.word	0x20000c54
 8002b60:	20000d1c 	.word	0x20000d1c

08002b64 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002b68:	4604      	mov	r4, r0
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d03b      	beq.n	8002be6 <vTaskPriorityInherit+0x82>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002b6e:	4d1f      	ldr	r5, [pc, #124]	; (8002bec <vTaskPriorityInherit+0x88>)
 8002b70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b72:	682a      	ldr	r2, [r5, #0]
 8002b74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d235      	bcs.n	8002be6 <vTaskPriorityInherit+0x82>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002b7a:	6982      	ldr	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002b7c:	4e1c      	ldr	r6, [pc, #112]	; (8002bf0 <vTaskPriorityInherit+0x8c>)
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002b7e:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b80:	bfa8      	it	ge
 8002b82:	682a      	ldrge	r2, [r5, #0]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002b84:	f04f 0714 	mov.w	r7, #20
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b88:	bfa8      	it	ge
 8002b8a:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002b8c:	fb07 6303 	mla	r3, r7, r3, r6
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b90:	bfa4      	itt	ge
 8002b92:	f1c2 0207 	rsbge	r2, r2, #7
 8002b96:	6182      	strge	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002b98:	6942      	ldr	r2, [r0, #20]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d120      	bne.n	8002be0 <vTaskPriorityInherit+0x7c>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002b9e:	f100 0804 	add.w	r8, r0, #4
 8002ba2:	4640      	mov	r0, r8
 8002ba4:	f7fe ff6a 	bl	8001a7c <uxListRemove>
 8002ba8:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <vTaskPriorityInherit+0x90>)
 8002baa:	b948      	cbnz	r0, 8002bc0 <vTaskPriorityInherit+0x5c>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002bac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002bae:	4347      	muls	r7, r0
 8002bb0:	59f2      	ldr	r2, [r6, r7]
 8002bb2:	b92a      	cbnz	r2, 8002bc0 <vTaskPriorityInherit+0x5c>
 8002bb4:	6819      	ldr	r1, [r3, #0]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4082      	lsls	r2, r0
 8002bba:	ea21 0202 	bic.w	r2, r1, r2
 8002bbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002bc0:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8002bc2:	2001      	movs	r0, #1
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002bc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002bc6:	4641      	mov	r1, r8
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002bc8:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002bca:	681c      	ldr	r4, [r3, #0]
 8002bcc:	4090      	lsls	r0, r2
 8002bce:	4320      	orrs	r0, r4
 8002bd0:	6018      	str	r0, [r3, #0]
 8002bd2:	2014      	movs	r0, #20
 8002bd4:	fb00 6002 	mla	r0, r0, r2, r6
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 8002bdc:	f7fe bf2a 	b.w	8001a34 <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bea:	bf00      	nop
 8002bec:	20000d14 	.word	0x20000d14
 8002bf0:	20000c74 	.word	0x20000c74
 8002bf4:	20000d6c 	.word	0x20000d6c

08002bf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	b908      	cbnz	r0, 8002c02 <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8002bfe:	2000      	movs	r0, #0
 8002c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <xTaskPriorityDisinherit+0x7c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4298      	cmp	r0, r3
 8002c08:	d002      	beq.n	8002c10 <xTaskPriorityDisinherit+0x18>
 8002c0a:	f7fe ff83 	bl	8001b14 <ulPortSetInterruptMask>
 8002c0e:	e7fe      	b.n	8002c0e <xTaskPriorityDisinherit+0x16>

			configASSERT( pxTCB->uxMutexesHeld );
 8002c10:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002c12:	b913      	cbnz	r3, 8002c1a <xTaskPriorityDisinherit+0x22>
 8002c14:	f7fe ff7e 	bl	8001b14 <ulPortSetInterruptMask>
 8002c18:	e7fe      	b.n	8002c18 <xTaskPriorityDisinherit+0x20>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002c1a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002c1c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8002c1e:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002c20:	4291      	cmp	r1, r2
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8002c22:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002c24:	d0eb      	beq.n	8002bfe <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1e9      	bne.n	8002bfe <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8002c2a:	1d05      	adds	r5, r0, #4
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f7fe ff25 	bl	8001a7c <uxListRemove>
 8002c32:	4e11      	ldr	r6, [pc, #68]	; (8002c78 <xTaskPriorityDisinherit+0x80>)
 8002c34:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <xTaskPriorityDisinherit+0x84>)
 8002c36:	b950      	cbnz	r0, 8002c4e <xTaskPriorityDisinherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002c38:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002c3a:	2114      	movs	r1, #20
 8002c3c:	4379      	muls	r1, r7
 8002c3e:	5873      	ldr	r3, [r6, r1]
 8002c40:	b92b      	cbnz	r3, 8002c4e <xTaskPriorityDisinherit+0x56>
 8002c42:	6810      	ldr	r0, [r2, #0]
 8002c44:	2301      	movs	r3, #1
 8002c46:	40bb      	lsls	r3, r7
 8002c48:	ea20 0303 	bic.w	r3, r0, r3
 8002c4c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002c4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 8002c50:	6810      	ldr	r0, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c52:	f1c3 0107 	rsb	r1, r3, #7
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002c56:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c58:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002c5a:	2401      	movs	r4, #1
 8002c5c:	fa04 f103 	lsl.w	r1, r4, r3
 8002c60:	4308      	orrs	r0, r1
 8002c62:	6010      	str	r0, [r2, #0]
 8002c64:	2014      	movs	r0, #20
 8002c66:	fb00 6003 	mla	r0, r0, r3, r6
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	f7fe fee2 	bl	8001a34 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002c70:	4620      	mov	r0, r4
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8002c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c74:	20000d14 	.word	0x20000d14
 8002c78:	20000c74 	.word	0x20000c74
 8002c7c:	20000d6c 	.word	0x20000d6c

08002c80 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <pvTaskIncrementMutexHeldCount+0x14>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	b11a      	cbz	r2, 8002c8e <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002c8a:	3201      	adds	r2, #1
 8002c8c:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 8002c8e:	6818      	ldr	r0, [r3, #0]
	}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000d14 	.word	0x20000d14

08002c98 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8002c9a:	4810      	ldr	r0, [pc, #64]	; (8002cdc <MX_ADC1_Init+0x44>)
 8002c9c:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <MX_ADC1_Init+0x48>)
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c9e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
{
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8002ca2:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8002ca4:	2401      	movs	r4, #1
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002caa:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cac:	6143      	str	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cae:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cb0:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002cb2:	6104      	str	r4, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cb4:	f7fd fcf0 	bl	8000698 <HAL_ADC_Init>
 8002cb8:	b108      	cbz	r0, 8002cbe <MX_ADC1_Init+0x26>
  {
    Error_Handler();
 8002cba:	f000 fb0b 	bl	80032d4 <Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_8;
 8002cbe:	2308      	movs	r3, #8
 8002cc0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cc2:	a901      	add	r1, sp, #4

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002cc4:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cc6:	4805      	ldr	r0, [pc, #20]	; (8002cdc <MX_ADC1_Init+0x44>)
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = 1;
 8002cc8:	9402      	str	r4, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002cca:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ccc:	f7fd fb86 	bl	80003dc <HAL_ADC_ConfigChannel>
 8002cd0:	b108      	cbz	r0, 8002cd6 <MX_ADC1_Init+0x3e>
  {
    Error_Handler();
 8002cd2:	f000 faff 	bl	80032d4 <Error_Handler>
  }
}
 8002cd6:	b004      	add	sp, #16
 8002cd8:	bd10      	pop	{r4, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000dcc 	.word	0x20000dcc
 8002ce0:	40012400 	.word	0x40012400

08002ce4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002ce4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8002ce6:	6802      	ldr	r2, [r0, #0]
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_ADC_MspInit+0x34>)
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d111      	bne.n	8002d12 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cee:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002cf2:	699a      	ldr	r2, [r3, #24]
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf4:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfa:	619a      	str	r2, [r3, #24]
 8002cfc:	699b      	ldr	r3, [r3, #24]
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfe:	4807      	ldr	r0, [pc, #28]	; (8002d1c <HAL_ADC_MspInit+0x38>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	9b01      	ldr	r3, [sp, #4]
  
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d0c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0e:	f7fd fde5 	bl	80008dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002d12:	b007      	add	sp, #28
 8002d14:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d18:	40012400 	.word	0x40012400
 8002d1c:	40010c00 	.word	0x40010c00

08002d20 <adcTest>:
  /* USER CODE END ADC1_MspDeInit 1 */
} 

/* USER CODE BEGIN 1 */
void adcTest(void)
{
 8002d20:	b538      	push	{r3, r4, r5, lr}
	uint16_t adcValA;

	HAL_ADC_Start(&hadc1);
 8002d22:	4c0b      	ldr	r4, [pc, #44]	; (8002d50 <adcTest+0x30>)
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7fd fc51 	bl	80005cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 500);
 8002d2a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f7fd faaa 	bl	8000288 <HAL_ADC_PollForConversion>
	adcValA = HAL_ADC_GetValue(&hadc1);
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7fd fb4d 	bl	80003d4 <HAL_ADC_GetValue>
 8002d3a:	4605      	mov	r5, r0
	HAL_ADC_Stop(&hadc1);
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7fd fd3f 	bl	80007c0 <HAL_ADC_Stop>

	printf("ADC A value %u \n", adcValA);
 8002d42:	b2a9      	uxth	r1, r5
 8002d44:	4803      	ldr	r0, [pc, #12]	; (8002d54 <adcTest+0x34>)
}
 8002d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion(&hadc1, 500);
	adcValA = HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);

	printf("ADC A value %u \n", adcValA);
 8002d4a:	f001 b81d 	b.w	8003d88 <iprintf>
 8002d4e:	bf00      	nop
 8002d50:	20000dcc 	.word	0x20000dcc
 8002d54:	08004045 	.word	0x08004045

08002d58 <find_cmd_tbl>:

/***************************************************************************
 * find command table entry for a command
 */
cmd_tbl_t *find_cmd_tbl (const char *cmd, cmd_tbl_t *table, int table_len)
{
 8002d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d5c:	460c      	mov	r4, r1

	/*
	 * Some commands allow length modifiers (like "cp.b");
	 * compare command name only until first dot.
	 */
	len = ((p = strchr(cmd, '.')) == NULL) ? strlen (cmd) : (p - cmd);
 8002d5e:	212e      	movs	r1, #46	; 0x2e

/***************************************************************************
 * find command table entry for a command
 */
cmd_tbl_t *find_cmd_tbl (const char *cmd, cmd_tbl_t *table, int table_len)
{
 8002d60:	4681      	mov	r9, r0
 8002d62:	4615      	mov	r5, r2

	/*
	 * Some commands allow length modifiers (like "cp.b");
	 * compare command name only until first dot.
	 */
	len = ((p = strchr(cmd, '.')) == NULL) ? strlen (cmd) : (p - cmd);
 8002d64:	f001 f8f2 	bl	8003f4c <strchr>
 8002d68:	b920      	cbnz	r0, 8002d74 <find_cmd_tbl+0x1c>
 8002d6a:	4648      	mov	r0, r9
 8002d6c:	f7fd f9f8 	bl	8000160 <strlen>
 8002d70:	4606      	mov	r6, r0
 8002d72:	e001      	b.n	8002d78 <find_cmd_tbl+0x20>
 8002d74:	ebc9 0600 	rsb	r6, r9, r0

	for (cmdtp = table;
	     cmdtp != table + table_len;
 8002d78:	f04f 0818 	mov.w	r8, #24
 8002d7c:	fb08 4805 	mla	r8, r8, r5, r4
 * find command table entry for a command
 */
cmd_tbl_t *find_cmd_tbl (const char *cmd, cmd_tbl_t *table, int table_len)
{
	cmd_tbl_t *cmdtp;
	cmd_tbl_t *cmdtp_temp = table;	/*Init value */
 8002d80:	4625      	mov	r5, r4
	const char *p;
	int len;
	int n_found = 0;
 8002d82:	2700      	movs	r7, #0
	 * Some commands allow length modifiers (like "cp.b");
	 * compare command name only until first dot.
	 */
	len = ((p = strchr(cmd, '.')) == NULL) ? strlen (cmd) : (p - cmd);

	for (cmdtp = table;
 8002d84:	4544      	cmp	r4, r8
 8002d86:	d010      	beq.n	8002daa <find_cmd_tbl+0x52>
	     cmdtp != table + table_len;
	     cmdtp++) {
		if (strncmp (cmd, cmdtp->name, len) == 0) {
 8002d88:	f8d4 a000 	ldr.w	sl, [r4]
 8002d8c:	4632      	mov	r2, r6
 8002d8e:	4651      	mov	r1, sl
 8002d90:	4648      	mov	r0, r9
 8002d92:	f001 f8f1 	bl	8003f78 <strncmp>
 8002d96:	b930      	cbnz	r0, 8002da6 <find_cmd_tbl+0x4e>
			if (len == strlen (cmdtp->name))
 8002d98:	4650      	mov	r0, sl
 8002d9a:	f7fd f9e1 	bl	8000160 <strlen>
 8002d9e:	4286      	cmp	r6, r0
 8002da0:	d00b      	beq.n	8002dba <find_cmd_tbl+0x62>
				return cmdtp;	/* full match */

			cmdtp_temp = cmdtp;	/* abbreviated command ? */
			n_found++;
 8002da2:	4625      	mov	r5, r4
 8002da4:	3701      	adds	r7, #1
	 */
	len = ((p = strchr(cmd, '.')) == NULL) ? strlen (cmd) : (p - cmd);

	for (cmdtp = table;
	     cmdtp != table + table_len;
	     cmdtp++) {
 8002da6:	3418      	adds	r4, #24
 8002da8:	e7ec      	b.n	8002d84 <find_cmd_tbl+0x2c>

			cmdtp_temp = cmdtp;	/* abbreviated command ? */
			n_found++;
		}
	}
	if (n_found == 1) {			/* exactly one match */
 8002daa:	2f01      	cmp	r7, #1
 8002dac:	d008      	beq.n	8002dc0 <find_cmd_tbl+0x68>
		return cmdtp_temp;
	}
	printf("command.c no match command\n");
 8002dae:	4806      	ldr	r0, [pc, #24]	; (8002dc8 <find_cmd_tbl+0x70>)
 8002db0:	f001 f80e 	bl	8003dd0 <puts>
	return NULL;	/* not found or ambiguous command */
 8002db4:	2000      	movs	r0, #0
 8002db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dba:	4620      	mov	r0, r4
 8002dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dc0:	4628      	mov	r0, r5
}
 8002dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dc6:	bf00      	nop
 8002dc8:	08004056 	.word	0x08004056

08002dcc <find_cmd>:

cmd_tbl_t *find_cmd (const char *cmd)
{
	int len = &__shell_cmd_end - &__shell_cmd_start;
	return find_cmd_tbl(cmd, &__shell_cmd_start, len);
 8002dcc:	4903      	ldr	r1, [pc, #12]	; (8002ddc <find_cmd+0x10>)
 8002dce:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <find_cmd+0x14>)
 8002dd0:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <find_cmd+0x18>)
 8002dd2:	1a5b      	subs	r3, r3, r1
 8002dd4:	10db      	asrs	r3, r3, #3
 8002dd6:	435a      	muls	r2, r3
 8002dd8:	f7ff bfbe 	b.w	8002d58 <find_cmd_tbl>
 8002ddc:	08004298 	.word	0x08004298
 8002de0:	080042b0 	.word	0x080042b0
 8002de4:	aaaaaaab 	.word	0xaaaaaaab

08002de8 <cmd_usage>:
}

int cmd_usage(cmd_tbl_t *cmdtp)
{
 8002de8:	b510      	push	{r4, lr}
 8002dea:	4604      	mov	r4, r0
	printf("%s - %s\n", cmdtp->name, cmdtp->usage);
 8002dec:	6902      	ldr	r2, [r0, #16]
 8002dee:	6801      	ldr	r1, [r0, #0]
 8002df0:	480a      	ldr	r0, [pc, #40]	; (8002e1c <cmd_usage+0x34>)
 8002df2:	f000 ffc9 	bl	8003d88 <iprintf>

#ifdef	CONFIG_SYS_LONGHELP
	printf("Usage:\n%s ", cmdtp->name);
 8002df6:	6821      	ldr	r1, [r4, #0]
 8002df8:	4809      	ldr	r0, [pc, #36]	; (8002e20 <cmd_usage+0x38>)
 8002dfa:	f000 ffc5 	bl	8003d88 <iprintf>

	if (!cmdtp->help) {
 8002dfe:	6960      	ldr	r0, [r4, #20]
 8002e00:	b920      	cbnz	r0, 8002e0c <cmd_usage+0x24>
		puts ("- No additional help available.\n");
 8002e02:	4808      	ldr	r0, [pc, #32]	; (8002e24 <cmd_usage+0x3c>)
 8002e04:	f000 ffe4 	bl	8003dd0 <puts>
		return 1;
 8002e08:	2001      	movs	r0, #1
 8002e0a:	bd10      	pop	{r4, pc}
	}

	puts (cmdtp->help);
 8002e0c:	f000 ffbc 	bl	8003d88 <iprintf>
	putc ('\n');
 8002e10:	200a      	movs	r0, #10
 8002e12:	f000 fa79 	bl	8003308 <usartPutc>
#endif	/* CONFIG_SYS_LONGHELP */
	return 0;
 8002e16:	2000      	movs	r0, #0
}
 8002e18:	bd10      	pop	{r4, pc}
 8002e1a:	bf00      	nop
 8002e1c:	08004071 	.word	0x08004071
 8002e20:	0800407a 	.word	0x0800407a
 8002e24:	08004085 	.word	0x08004085

08002e28 <_do_help>:
 * for long help messages
 */

int _do_help (cmd_tbl_t *cmd_start, int cmd_items, cmd_tbl_t * cmdtp, int
	      flag, int argc, char *argv[])
{
 8002e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8002e34:	4606      	mov	r6, r0
	int i;
	int rcode = 0;

	if (argc == 1) {	/*show list of commands */
 8002e36:	f1ba 0f01 	cmp.w	sl, #1
 * for long help messages
 */

int _do_help (cmd_tbl_t *cmd_start, int cmd_items, cmd_tbl_t * cmdtp, int
	      flag, int argc, char *argv[])
{
 8002e3a:	460d      	mov	r5, r1
	int i;
	int rcode = 0;

	if (argc == 1) {	/*show list of commands */
 8002e3c:	d005      	beq.n	8002e4a <_do_help+0x22>
 8002e3e:	f8d7 9034 	ldr.w	r9, [r7, #52]	; 0x34
 8002e42:	2400      	movs	r4, #0
 8002e44:	f04f 0801 	mov.w	r8, #1
 8002e48:	e075      	b.n	8002f36 <_do_help+0x10e>
		cmd_tbl_t *cmd_array[cmd_items];
 8002e4a:	008b      	lsls	r3, r1, #2
 8002e4c:	330a      	adds	r3, #10
 8002e4e:	f023 0307 	bic.w	r3, r3, #7
	      flag, int argc, char *argv[])
{
	int i;
	int rcode = 0;

	if (argc == 1) {	/*show list of commands */
 8002e52:	f8c7 d004 	str.w	sp, [r7, #4]
		cmd_tbl_t *cmd_array[cmd_items];
 8002e56:	ebad 0d03 	sub.w	sp, sp, r3
 8002e5a:	46e8      	mov	r8, sp
 8002e5c:	f101 3aff 	add.w	sl, r1, #4294967295
		int i, j, swaps;

		/* Make array of commands from .shell_cmd section */
		cmdtp = cmd_start;
		for (i = 0; i < cmd_items; i++) {
 8002e60:	2300      	movs	r3, #0
 8002e62:	2118      	movs	r1, #24
 8002e64:	429d      	cmp	r5, r3
 8002e66:	fb01 6203 	mla	r2, r1, r3, r6
 8002e6a:	dd20      	ble.n	8002eae <_do_help+0x86>
			cmd_array[i] = cmdtp++;
 8002e6c:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
		cmd_tbl_t *cmd_array[cmd_items];
		int i, j, swaps;

		/* Make array of commands from .shell_cmd section */
		cmdtp = cmd_start;
		for (i = 0; i < cmd_items; i++) {
 8002e70:	3301      	adds	r3, #1
 8002e72:	e7f7      	b.n	8002e64 <_do_help+0x3c>
			cmd_array[i] = cmdtp++;
		}

		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
 8002e74:	2600      	movs	r6, #0
 8002e76:	4644      	mov	r4, r8
 8002e78:	46b3      	mov	fp, r6
			swaps = 0;
			for (j = 0; j < i; ++j) {
				if (strcmp (cmd_array[j]->name,
 8002e7a:	f8d4 9000 	ldr.w	r9, [r4]
					    cmd_array[j + 1]->name) > 0) {
 8002e7e:	f854 2f04 	ldr.w	r2, [r4, #4]!

		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
			swaps = 0;
			for (j = 0; j < i; ++j) {
				if (strcmp (cmd_array[j]->name,
 8002e82:	f8d9 0000 	ldr.w	r0, [r9]
 8002e86:	6811      	ldr	r1, [r2, #0]
 8002e88:	603a      	str	r2, [r7, #0]
 8002e8a:	f7fd f95f 	bl	800014c <strcmp>
 8002e8e:	2800      	cmp	r0, #0
					    cmd_array[j + 1]->name) > 0) {
					cmd_tbl_t *tmp;
					tmp = cmd_array[j];
					cmd_array[j] = cmd_array[j + 1];
 8002e90:	bfc8      	it	gt
 8002e92:	683a      	ldrgt	r2, [r7, #0]
		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
			swaps = 0;
			for (j = 0; j < i; ++j) {
				if (strcmp (cmd_array[j]->name,
					    cmd_array[j + 1]->name) > 0) {
 8002e94:	f10b 0b01 	add.w	fp, fp, #1
					cmd_tbl_t *tmp;
					tmp = cmd_array[j];
					cmd_array[j] = cmd_array[j + 1];
 8002e98:	bfc2      	ittt	gt
 8002e9a:	f844 2c04 	strgt.w	r2, [r4, #-4]
					cmd_array[j + 1] = tmp;
 8002e9e:	f8c4 9000 	strgt.w	r9, [r4]
					++swaps;
 8002ea2:	3601      	addgt	r6, #1
		}

		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
			swaps = 0;
			for (j = 0; j < i; ++j) {
 8002ea4:	45d3      	cmp	fp, sl
 8002ea6:	d1e8      	bne.n	8002e7a <_do_help+0x52>
					cmd_array[j] = cmd_array[j + 1];
					cmd_array[j + 1] = tmp;
					++swaps;
				}
			}
			if (!swaps)
 8002ea8:	b126      	cbz	r6, 8002eb4 <_do_help+0x8c>
		for (i = 0; i < cmd_items; i++) {
			cmd_array[i] = cmdtp++;
		}

		/* Sort command list (trivial bubble sort) */
		for (i = cmd_items - 1; i > 0; --i) {
 8002eaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002eae:	f1ba 0f00 	cmp.w	sl, #0
 8002eb2:	dcdf      	bgt.n	8002e74 <_do_help+0x4c>
			       cmd_array[i]->name, usage);
#else
			{
				char* cmd_name = cmd_array[i]->name;
				int cmd_name_len = strlen(cmd_name);
				int blank_len = (cmd_name_len < CONFIG_SYS_HELP_CMD_WIDTH)?  (CONFIG_SYS_HELP_CMD_WIDTH - cmd_name_len):0;
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	e006      	b.n	8002ec6 <_do_help+0x9e>
				while(cmd_name_len--) putc(*cmd_name++);
				while(blank_len--) putc(' ');
				puts("- ");
 8002eb8:	4826      	ldr	r0, [pc, #152]	; (8002f54 <_do_help+0x12c>)
 8002eba:	f000 ff65 	bl	8003d88 <iprintf>
				puts(usage);
 8002ebe:	4650      	mov	r0, sl
 8002ec0:	f000 ff62 	bl	8003d88 <iprintf>
			if (!swaps)
				break;
		}

		/* print short help (usage) */
		for (i = 0; i < cmd_items; i++) {
 8002ec4:	3601      	adds	r6, #1
 8002ec6:	42b5      	cmp	r5, r6
 8002ec8:	dd23      	ble.n	8002f12 <_do_help+0xea>
			const char *usage = cmd_array[i]->usage;
 8002eca:	f858 b026 	ldr.w	fp, [r8, r6, lsl #2]
 8002ece:	f8db a010 	ldr.w	sl, [fp, #16]

			/* allow user abort */
			if (ctrlc ())
 8002ed2:	f000 fa8d 	bl	80033f0 <ctrlc>
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	b9e8      	cbnz	r0, 8002f16 <_do_help+0xee>
				return 1;
			if (usage == NULL)
 8002eda:	f1ba 0f00 	cmp.w	sl, #0
 8002ede:	d0f1      	beq.n	8002ec4 <_do_help+0x9c>
#if 0
			printf("%-*s- %s\n", CONFIG_SYS_HELP_CMD_WIDTH,
			       cmd_array[i]->name, usage);
#else
			{
				char* cmd_name = cmd_array[i]->name;
 8002ee0:	f8db 9000 	ldr.w	r9, [fp]
				int cmd_name_len = strlen(cmd_name);
 8002ee4:	4648      	mov	r0, r9
 8002ee6:	f7fd f93b 	bl	8000160 <strlen>
				int blank_len = (cmd_name_len < CONFIG_SYS_HELP_CMD_WIDTH)?  (CONFIG_SYS_HELP_CMD_WIDTH - cmd_name_len):0;
 8002eea:	2807      	cmp	r0, #7
 8002eec:	bfd8      	it	le
 8002eee:	f1c0 0408 	rsble	r4, r0, #8
 8002ef2:	eb09 0b00 	add.w	fp, r9, r0
				while(cmd_name_len--) putc(*cmd_name++);
 8002ef6:	45d9      	cmp	r9, fp
 8002ef8:	d004      	beq.n	8002f04 <_do_help+0xdc>
 8002efa:	f819 0b01 	ldrb.w	r0, [r9], #1
 8002efe:	f000 fa03 	bl	8003308 <usartPutc>
 8002f02:	e7f8      	b.n	8002ef6 <_do_help+0xce>
				while(blank_len--) putc(' ');
 8002f04:	f114 34ff 	adds.w	r4, r4, #4294967295
 8002f08:	d3d6      	bcc.n	8002eb8 <_do_help+0x90>
 8002f0a:	2020      	movs	r0, #32
 8002f0c:	f000 f9fc 	bl	8003308 <usartPutc>
 8002f10:	e7f8      	b.n	8002f04 <_do_help+0xdc>
				puts(usage);
				//putc('\n');
			}
#endif
		}
		return 0;
 8002f12:	2000      	movs	r0, #0
 8002f14:	e000      	b.n	8002f18 <_do_help+0xf0>
		for (i = 0; i < cmd_items; i++) {
			const char *usage = cmd_array[i]->usage;

			/* allow user abort */
			if (ctrlc ())
				return 1;
 8002f16:	2001      	movs	r0, #1
 8002f18:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8002f1c:	e016      	b.n	8002f4c <_do_help+0x124>
	}
	/*
	 * command help (long version)
	 */
	for (i = 1; i < argc; ++i) {
		if ((cmdtp = find_cmd_tbl (argv[i], cmd_start, cmd_items )) != NULL) {
 8002f1e:	462a      	mov	r2, r5
 8002f20:	4631      	mov	r1, r6
 8002f22:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8002f26:	f7ff ff17 	bl	8002d58 <find_cmd_tbl>
 8002f2a:	b138      	cbz	r0, 8002f3c <_do_help+0x114>
			rcode |= cmd_usage(cmdtp);
 8002f2c:	f7ff ff5c 	bl	8002de8 <cmd_usage>
 8002f30:	4304      	orrs	r4, r0
		return 0;
	}
	/*
	 * command help (long version)
	 */
	for (i = 1; i < argc; ++i) {
 8002f32:	f108 0801 	add.w	r8, r8, #1
 8002f36:	45d0      	cmp	r8, sl
 8002f38:	dbf1      	blt.n	8002f1e <_do_help+0xf6>
 8002f3a:	e006      	b.n	8002f4a <_do_help+0x122>
		if ((cmdtp = find_cmd_tbl (argv[i], cmd_start, cmd_items )) != NULL) {
			rcode |= cmd_usage(cmdtp);
		} else {
			printf ("Unknown command '%s' - try 'help'"
 8002f3c:	f8d9 1000 	ldr.w	r1, [r9]
 8002f40:	4805      	ldr	r0, [pc, #20]	; (8002f58 <_do_help+0x130>)
 8002f42:	f000 ff21 	bl	8003d88 <iprintf>
				" without arguments for list of all"
				" known commands\n\n", argv[i]
					);
			rcode = 1;
 8002f46:	2401      	movs	r4, #1
 8002f48:	e7f3      	b.n	8002f32 <_do_help+0x10a>
 8002f4a:	4620      	mov	r0, r4
		}
	}
	return rcode;
}
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f54:	080040a5 	.word	0x080040a5
 8002f58:	080040a8 	.word	0x080040a8

08002f5c <do_help>:
	return simple_strtoul(cp,endp,base);
}

/* --------------------------------------------------------------------------- */
int do_help(cmd_tbl_t * cmdtp, int flag, int argc, char *argv[])
{
 8002f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return _do_help(&__shell_cmd_start,
 8002f5e:	4d07      	ldr	r5, [pc, #28]	; (8002f7c <do_help+0x20>)
 8002f60:	4c07      	ldr	r4, [pc, #28]	; (8002f80 <do_help+0x24>)
 8002f62:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002f66:	1b64      	subs	r4, r4, r5
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4906      	ldr	r1, [pc, #24]	; (8002f84 <do_help+0x28>)
 8002f6c:	10e4      	asrs	r4, r4, #3
 8002f6e:	4602      	mov	r2, r0
 8002f70:	4361      	muls	r1, r4
 8002f72:	4628      	mov	r0, r5
 8002f74:	f7ff ff58 	bl	8002e28 <_do_help>
			&__shell_cmd_end - &__shell_cmd_start,
			cmdtp, flag, argc, argv);
}
 8002f78:	b003      	add	sp, #12
 8002f7a:	bd30      	pop	{r4, r5, pc}
 8002f7c:	08004298 	.word	0x08004298
 8002f80:	080042b0 	.word	0x080042b0
 8002f84:	aaaaaaab 	.word	0xaaaaaaab

08002f88 <StartDefaultTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartDefaultTask function */
__weak void StartDefaultTask(void const * argument)
{
 8002f88:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	f7fe fccf 	bl	800192e <osDelay>
 8002f90:	e7fb      	b.n	8002f8a <StartDefaultTask+0x2>

08002f92 <alarmOutTask>:
	}
}

/* alarmOutTask function */
void alarmOutTask(void const * argument)
{
 8002f92:	b508      	push	{r3, lr}
	for(;;)
	{
		osDelay(1000);
 8002f94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f98:	f7fe fcc9 	bl	800192e <osDelay>
 8002f9c:	e7fa      	b.n	8002f94 <alarmOutTask+0x2>
	...

08002fa0 <stm32LiveTask>:
}

/* USER CODE BEGIN Application */
/* stm32LiveTask function */
void stm32LiveTask(void const * argument)
{
 8002fa0:	b510      	push	{r4, lr}
	uint8_t count = 0;
 8002fa2:	2400      	movs	r4, #0

	for(;;)
	{
		if(count % 2)	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002fa4:	f014 0201 	ands.w	r2, r4, #1
 8002fa8:	bf18      	it	ne
 8002faa:	2201      	movne	r2, #1
		else			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002fac:	2120      	movs	r1, #32
 8002fae:	4807      	ldr	r0, [pc, #28]	; (8002fcc <stm32LiveTask+0x2c>)
 8002fb0:	f7fd fd6c 	bl	8000a8c <HAL_GPIO_WritePin>

		if(count < 100) 	count++;
 8002fb4:	2c63      	cmp	r4, #99	; 0x63
 8002fb6:	bf9a      	itte	ls
 8002fb8:	3401      	addls	r4, #1
 8002fba:	b2e4      	uxtbls	r4, r4
		else				count = 0;
 8002fbc:	2400      	movhi	r4, #0

		adcTest();
 8002fbe:	f7ff feaf 	bl	8002d20 <adcTest>

		osDelay(1000);
 8002fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fc6:	f7fe fcb2 	bl	800192e <osDelay>
	}
 8002fca:	e7eb      	b.n	8002fa4 <stm32LiveTask+0x4>
 8002fcc:	40010c00 	.word	0x40010c00

08002fd0 <stm32Usart1Task>:
		osDelay(1000);
	}
}

void stm32Usart1Task(void const * argument)
{
 8002fd0:	b508      	push	{r3, lr}
	HAL_UART_Receive_IT(&huart1, &usartRxBuff, USART_RX_BUFF_SIZE);
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	4904      	ldr	r1, [pc, #16]	; (8002fe8 <stm32Usart1Task+0x18>)
 8002fd6:	4805      	ldr	r0, [pc, #20]	; (8002fec <stm32Usart1Task+0x1c>)
 8002fd8:	f7fe fb92 	bl	8001700 <HAL_UART_Receive_IT>

	for(;;)
	{
		stm32ShellCommand();
 8002fdc:	f000 fd64 	bl	8003aa8 <stm32ShellCommand>
		osDelay(10);
 8002fe0:	200a      	movs	r0, #10
 8002fe2:	f7fe fca4 	bl	800192e <osDelay>
 8002fe6:	e7f9      	b.n	8002fdc <stm32Usart1Task+0xc>
 8002fe8:	20000e34 	.word	0x20000e34
 8002fec:	2000143c 	.word	0x2000143c

08002ff0 <MX_FREERTOS_Init>:

/* Hook prototypes */

/* Init FreeRTOS */

void MX_FREERTOS_Init(void) {
 8002ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff4:	b098      	sub	sp, #96	; 0x60
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of i2cMutex */
  osMutexDef(i2cMutex);
 8002ff6:	2700      	movs	r7, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE - 96 );
 8002ff8:	4c25      	ldr	r4, [pc, #148]	; (8003090 <MX_FREERTOS_Init+0xa0>)
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of i2cMutex */
  osMutexDef(i2cMutex);
 8002ffa:	a818      	add	r0, sp, #96	; 0x60
 8002ffc:	f840 7d5c 	str.w	r7, [r0, #-92]!
  i2cMutexHandle = osMutexCreate(osMutex(i2cMutex));
 8003000:	f7fe fc9d 	bl	800193e <osMutexCreate>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE - 96 );
 8003004:	4626      	mov	r6, r4
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of i2cMutex */
  osMutexDef(i2cMutex);
  i2cMutexHandle = osMutexCreate(osMutex(i2cMutex));
 8003006:	4b23      	ldr	r3, [pc, #140]	; (8003094 <MX_FREERTOS_Init+0xa4>)
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE - 96 );
 8003008:	ad04      	add	r5, sp, #16
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of i2cMutex */
  osMutexDef(i2cMutex);
  i2cMutexHandle = osMutexCreate(osMutex(i2cMutex));
 800300a:	6018      	str	r0, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE - 96 );
 800300c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800300e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003010:	6833      	ldr	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003012:	4639      	mov	r1, r7
 8003014:	a804      	add	r0, sp, #16
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE - 96 );
 8003016:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003018:	f7fe fc6d 	bl	80018f6 <osThreadCreate>
 800301c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800309c <MX_FREERTOS_Init+0xac>

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(stm32AlarmOut, alarmOutTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE - 96 );
 8003020:	ad09      	add	r5, sp, #36	; 0x24
 8003022:	f104 0614 	add.w	r6, r4, #20
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE - 96 );
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003026:	f8c8 0000 	str.w	r0, [r8]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(stm32AlarmOut, alarmOutTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE - 96 );
 800302a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800302c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302e:	6833      	ldr	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(stm32AlarmOut), NULL);
 8003030:	4639      	mov	r1, r7
 8003032:	a809      	add	r0, sp, #36	; 0x24
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE - 96 );
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(stm32AlarmOut, alarmOutTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE - 96 );
 8003034:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(stm32AlarmOut), NULL);
 8003036:	f7fe fc5e 	bl	80018f6 <osThreadCreate>

  osThreadDef(stm32LiveCheck, stm32LiveTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE -32 );
 800303a:	ad0e      	add	r5, sp, #56	; 0x38
 800303c:	f104 0628 	add.w	r6, r4, #40	; 0x28
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(stm32AlarmOut, alarmOutTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE - 96 );
  defaultTaskHandle = osThreadCreate(osThread(stm32AlarmOut), NULL);
 8003040:	f8c8 0000 	str.w	r0, [r8]

  osThreadDef(stm32LiveCheck, stm32LiveTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE -32 );
 8003044:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003048:	6833      	ldr	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(stm32LiveCheck), NULL);
 800304a:	4639      	mov	r1, r7
 800304c:	a80e      	add	r0, sp, #56	; 0x38
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(stm32AlarmOut, alarmOutTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE - 96 );
  defaultTaskHandle = osThreadCreate(osThread(stm32AlarmOut), NULL);

  osThreadDef(stm32LiveCheck, stm32LiveTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE -32 );
 800304e:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(stm32LiveCheck), NULL);
 8003050:	f7fe fc51 	bl	80018f6 <osThreadCreate>

  osThreadDef(stm32Usart, stm32Usart1Task, osPriorityNormal, 0, configMINIMAL_STACK_SIZE + 128 );
 8003054:	ad13      	add	r5, sp, #76	; 0x4c
 8003056:	f104 063c 	add.w	r6, r4, #60	; 0x3c
  /* add threads, ... */
  osThreadDef(stm32AlarmOut, alarmOutTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE - 96 );
  defaultTaskHandle = osThreadCreate(osThread(stm32AlarmOut), NULL);

  osThreadDef(stm32LiveCheck, stm32LiveTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE -32 );
  defaultTaskHandle = osThreadCreate(osThread(stm32LiveCheck), NULL);
 800305a:	f8c8 0000 	str.w	r0, [r8]

  osThreadDef(stm32Usart, stm32Usart1Task, osPriorityNormal, 0, configMINIMAL_STACK_SIZE + 128 );
 800305e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003062:	6833      	ldr	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(stm32Usart), NULL);
 8003064:	4639      	mov	r1, r7
 8003066:	a813      	add	r0, sp, #76	; 0x4c
  defaultTaskHandle = osThreadCreate(osThread(stm32AlarmOut), NULL);

  osThreadDef(stm32LiveCheck, stm32LiveTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE -32 );
  defaultTaskHandle = osThreadCreate(osThread(stm32LiveCheck), NULL);

  osThreadDef(stm32Usart, stm32Usart1Task, osPriorityNormal, 0, configMINIMAL_STACK_SIZE + 128 );
 8003068:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(stm32Usart), NULL);
 800306a:	f7fe fc44 	bl	80018f6 <osThreadCreate>
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of uartRxQueue */
  osMessageQDef(uartRxQueue, CONFIG_SYS_CBSIZE, uint8_t);
 800306e:	3450      	adds	r4, #80	; 0x50
 8003070:	ab02      	add	r3, sp, #8

  osThreadDef(stm32LiveCheck, stm32LiveTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE -32 );
  defaultTaskHandle = osThreadCreate(osThread(stm32LiveCheck), NULL);

  osThreadDef(stm32Usart, stm32Usart1Task, osPriorityNormal, 0, configMINIMAL_STACK_SIZE + 128 );
  defaultTaskHandle = osThreadCreate(osThread(stm32Usart), NULL);
 8003072:	f8c8 0000 	str.w	r0, [r8]
  /* USER CODE END RTOS_THREADS */

  /* Create the queue(s) */
  /* definition and creation of uartRxQueue */
  osMessageQDef(uartRxQueue, CONFIG_SYS_CBSIZE, uint8_t);
 8003076:	e894 0003 	ldmia.w	r4, {r0, r1}
 800307a:	e883 0003 	stmia.w	r3, {r0, r1}
  uartRxQueueHandle = osMessageCreate(osMessageQ(uartRxQueue), NULL);
 800307e:	4639      	mov	r1, r7
 8003080:	4618      	mov	r0, r3
 8003082:	f7fe fc5f 	bl	8001944 <osMessageCreate>
 8003086:	4b04      	ldr	r3, [pc, #16]	; (8003098 <MX_FREERTOS_Init+0xa8>)
 8003088:	6018      	str	r0, [r3, #0]
  /* add queues, ... */
#ifdef	DEBUG_PARSER
  	  printf("FreeRTOS init complete\n");
#endif
  /* USER CODE END RTOS_QUEUES */
}
 800308a:	b018      	add	sp, #96	; 0x60
 800308c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003090:	08003fd0 	.word	0x08003fd0
 8003094:	20000e38 	.word	0x20000e38
 8003098:	20000e30 	.word	0x20000e30
 800309c:	20000e2c 	.word	0x20000e2c

080030a0 <vApplicationStackOverflowHook>:
	}
}

void vApplicationStackOverflowHook( TaskHandle_t xTask,signed char *pcTaskName )
{
	printf("%s stack overlow \n", (char*)pcTaskName);
 80030a0:	4801      	ldr	r0, [pc, #4]	; (80030a8 <vApplicationStackOverflowHook+0x8>)
 80030a2:	f000 be71 	b.w	8003d88 <iprintf>
 80030a6:	bf00      	nop
 80030a8:	08004189 	.word	0x08004189

080030ac <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook( void )
{
 80030ac:	b508      	push	{r3, lr}
	printf("FreeRTOS memory allocation failed\n");
 80030ae:	4804      	ldr	r0, [pc, #16]	; (80030c0 <vApplicationMallocFailedHook+0x14>)
 80030b0:	f000 fe8e 	bl	8003dd0 <puts>
	printf("Check all of Task Stack Size or data + bss Size\n");
}
 80030b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void vApplicationMallocFailedHook( void )
{
	printf("FreeRTOS memory allocation failed\n");
	printf("Check all of Task Stack Size or data + bss Size\n");
 80030b8:	4802      	ldr	r0, [pc, #8]	; (80030c4 <vApplicationMallocFailedHook+0x18>)
 80030ba:	f000 be89 	b.w	8003dd0 <puts>
 80030be:	bf00      	nop
 80030c0:	0800419c 	.word	0x0800419c
 80030c4:	080041be 	.word	0x080041be

080030c8 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030c8:	4b26      	ldr	r3, [pc, #152]	; (8003164 <MX_GPIO_Init+0x9c>)
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80030ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ce:	699a      	ldr	r2, [r3, #24]
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80030d0:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030d2:	f042 0220 	orr.w	r2, r2, #32
 80030d6:	619a      	str	r2, [r3, #24]
 80030d8:	699a      	ldr	r2, [r3, #24]
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030da:	4d23      	ldr	r5, [pc, #140]	; (8003168 <MX_GPIO_Init+0xa0>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030dc:	f002 0220 	and.w	r2, r2, #32
 80030e0:	9201      	str	r2, [sp, #4]
 80030e2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e4:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030e6:	2400      	movs	r4, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e8:	f042 0204 	orr.w	r2, r2, #4
 80030ec:	619a      	str	r2, [r3, #24]
 80030ee:	699a      	ldr	r2, [r3, #24]
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f0:	a904      	add	r1, sp, #16

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f2:	f002 0204 	and.w	r2, r2, #4
 80030f6:	9202      	str	r2, [sp, #8]
 80030f8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fa:	699a      	ldr	r2, [r3, #24]
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fc:	4628      	mov	r0, r5
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fe:	f042 0208 	orr.w	r2, r2, #8
 8003102:	619a      	str	r2, [r3, #24]
 8003104:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003106:	f44f 6800 	mov.w	r8, #2048	; 0x800
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	9303      	str	r3, [sp, #12]
 8003110:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003112:	23ff      	movs	r3, #255	; 0xff
 8003114:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003116:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	2602      	movs	r6, #2

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800311c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003120:	f7fd fbdc 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003124:	a904      	add	r1, sp, #16
 8003126:	4628      	mov	r0, r5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003128:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800312a:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800312e:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003132:	f7fd fbd3 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003136:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003138:	4e0c      	ldr	r6, [pc, #48]	; (800316c <MX_GPIO_Init+0xa4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800313a:	2778      	movs	r7, #120	; 0x78
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313c:	a904      	add	r1, sp, #16
 800313e:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003140:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003142:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003146:	f7fd fbc9 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800314a:	4622      	mov	r2, r4
 800314c:	4641      	mov	r1, r8
 800314e:	4628      	mov	r0, r5
 8003150:	f7fd fc9c 	bl	8000a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8003154:	4622      	mov	r2, r4
 8003156:	4639      	mov	r1, r7
 8003158:	4630      	mov	r0, r6
 800315a:	f7fd fc97 	bl	8000a8c <HAL_GPIO_WritePin>

}
 800315e:	b009      	add	sp, #36	; 0x24
 8003160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003164:	40021000 	.word	0x40021000
 8003168:	40010800 	.word	0x40010800
 800316c:	40010c00 	.word	0x40010c00

08003170 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003170:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003172:	480c      	ldr	r0, [pc, #48]	; (80031a4 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <MX_I2C1_Init+0x38>)
 8003176:	f8df e034 	ldr.w	lr, [pc, #52]	; 80031ac <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800317a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
/* I2C1 init function */
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
 800317e:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003182:	6102      	str	r2, [r0, #16]
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003184:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8003186:	2240      	movs	r2, #64	; 0x40
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003188:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800318a:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800318c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800318e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8003190:	61c2      	str	r2, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003192:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003194:	f7fd fc7e 	bl	8000a94 <HAL_I2C_Init>
 8003198:	b118      	cbz	r0, 80031a2 <MX_I2C1_Init+0x32>
  {
    Error_Handler();
  }

}
 800319a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
 800319e:	f000 b899 	b.w	80032d4 <Error_Handler>
 80031a2:	bd08      	pop	{r3, pc}
 80031a4:	20000e3c 	.word	0x20000e3c
 80031a8:	40005400 	.word	0x40005400
 80031ac:	00061a80 	.word	0x00061a80

080031b0 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80031b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 80031b2:	6802      	ldr	r2, [r0, #0]
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <HAL_I2C_MspInit+0x44>)
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d119      	bne.n	80031ee <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031be:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031c0:	2312      	movs	r3, #18
 80031c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c4:	a902      	add	r1, sp, #8
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031c6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c8:	480b      	ldr	r0, [pc, #44]	; (80031f8 <HAL_I2C_MspInit+0x48>)
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031cc:	f7fd fb86 	bl	80008dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_I2C_MspInit+0x4c>)
 80031d2:	6853      	ldr	r3, [r2, #4]
 80031d4:	f043 0302 	orr.w	r3, r3, #2
 80031d8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_I2C_MspInit+0x50>)
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80031e2:	61da      	str	r2, [r3, #28]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80031ee:	b007      	add	sp, #28
 80031f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80031f4:	40005400 	.word	0x40005400
 80031f8:	40010c00 	.word	0x40010c00
 80031fc:	40010000 	.word	0x40010000
 8003200:	40021000 	.word	0x40021000

08003204 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8003204:	b508      	push	{r3, lr}

  hiwdg.Instance = IWDG;
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
  hiwdg.Init.Reload = 4095;
 8003206:	f640 73ff 	movw	r3, #4095	; 0xfff

/* IWDG init function */
void MX_IWDG_Init(void)
{

  hiwdg.Instance = IWDG;
 800320a:	4806      	ldr	r0, [pc, #24]	; (8003224 <MX_IWDG_Init+0x20>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
  hiwdg.Init.Reload = 4095;
 800320c:	4906      	ldr	r1, [pc, #24]	; (8003228 <MX_IWDG_Init+0x24>)
 800320e:	2200      	movs	r2, #0
 8003210:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003214:	f7fd fca9 	bl	8000b6a <HAL_IWDG_Init>
 8003218:	b118      	cbz	r0, 8003222 <MX_IWDG_Init+0x1e>
  {
    Error_Handler();
  }

}
 800321a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  hiwdg.Instance = IWDG;
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
  hiwdg.Init.Reload = 4095;
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
  {
    Error_Handler();
 800321e:	f000 b859 	b.w	80032d4 <Error_Handler>
 8003222:	bd08      	pop	{r3, pc}
 8003224:	20000e78 	.word	0x20000e78
 8003228:	40003000 	.word	0x40003000

0800322c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800322c:	b570      	push	{r4, r5, r6, lr}

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800322e:	2309      	movs	r3, #9
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003230:	b092      	sub	sp, #72	; 0x48

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003232:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003238:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800323a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800323e:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003240:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003242:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003244:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800324a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800324c:	960e      	str	r6, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800324e:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003250:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003252:	f7fd fcb7 	bl	8000bc4 <HAL_RCC_OscConfig>
 8003256:	b100      	cbz	r0, 800325a <SystemClock_Config+0x2e>
 8003258:	e7fe      	b.n	8003258 <SystemClock_Config+0x2c>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800325a:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800325c:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800325e:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003260:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003262:	4631      	mov	r1, r6
 8003264:	a803      	add	r0, sp, #12
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003266:	9503      	str	r5, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003268:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800326a:	f7fd ff53 	bl	8001114 <HAL_RCC_ClockConfig>
 800326e:	b100      	cbz	r0, 8003272 <SystemClock_Config+0x46>
 8003270:	e7fe      	b.n	8003270 <SystemClock_Config+0x44>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8003272:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003276:	4668      	mov	r0, sp
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003278:	9400      	str	r4, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800327a:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800327c:	f7fe f832 	bl	80012e4 <HAL_RCCEx_PeriphCLKConfig>
 8003280:	4604      	mov	r4, r0
 8003282:	b100      	cbz	r0, 8003286 <SystemClock_Config+0x5a>
 8003284:	e7fe      	b.n	8003284 <SystemClock_Config+0x58>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003286:	f7fd fff7 	bl	8001278 <HAL_RCC_GetHCLKFreq>
 800328a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800328e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003292:	f7fd fb01 	bl	8000898 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003296:	2004      	movs	r0, #4
 8003298:	f7fd fb14 	bl	80008c4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800329c:	4622      	mov	r2, r4
 800329e:	4629      	mov	r1, r5
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295
 80032a4:	f7fd fab8 	bl	8000818 <HAL_NVIC_SetPriority>
}
 80032a8:	b012      	add	sp, #72	; 0x48
 80032aa:	bd70      	pop	{r4, r5, r6, pc}

080032ac <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80032ac:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032ae:	f7fc ffbd 	bl	800022c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80032b2:	f7ff ffbb 	bl	800322c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032b6:	f7ff ff07 	bl	80030c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80032ba:	f7ff fced 	bl	8002c98 <MX_ADC1_Init>
  MX_IWDG_Init();
 80032be:	f7ff ffa1 	bl	8003204 <MX_IWDG_Init>
  MX_USART1_UART_Init();
 80032c2:	f000 fd9f 	bl	8003e04 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80032c6:	f7ff ff53 	bl	8003170 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80032ca:	f7ff fe91 	bl	8002ff0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80032ce:	f7fe fb0d 	bl	80018ec <osKernelStart>
 80032d2:	e7fe      	b.n	80032d2 <main+0x26>

080032d4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80032d4:	e7fe      	b.n	80032d4 <Error_Handler>
	...

080032d8 <uart_isrx>:

osEvent evt;
extern uint8_t usartRxBuff;

uint8_t uart_isrx(void)
{
 80032d8:	b530      	push	{r4, r5, lr}
	// checks if a character is present in the RX buffer
	evt = osMessageGet(uartRxQueueHandle, 0);
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <uart_isrx+0x28>)

osEvent evt;
extern uint8_t usartRxBuff;

uint8_t uart_isrx(void)
{
 80032dc:	b085      	sub	sp, #20
	// checks if a character is present in the RX buffer
	evt = osMessageGet(uartRxQueueHandle, 0);
 80032de:	6819      	ldr	r1, [r3, #0]
 80032e0:	4668      	mov	r0, sp
 80032e2:	2200      	movs	r2, #0
 80032e4:	f7fe fb58 	bl	8001998 <osMessageGet>
 80032e8:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 80032ec:	4d05      	ldr	r5, [pc, #20]	; (8003304 <uart_isrx+0x2c>)
	return (evt.status == osEventMessage);
}
 80032ee:	f1a0 0310 	sub.w	r3, r0, #16
extern uint8_t usartRxBuff;

uint8_t uart_isrx(void)
{
	// checks if a character is present in the RX buffer
	evt = osMessageGet(uartRxQueueHandle, 0);
 80032f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	return (evt.status == osEventMessage);
}
 80032f6:	4258      	negs	r0, r3
 80032f8:	4158      	adcs	r0, r3
 80032fa:	b005      	add	sp, #20
 80032fc:	bd30      	pop	{r4, r5, pc}
 80032fe:	bf00      	nop
 8003300:	20000e30 	.word	0x20000e30
 8003304:	20001430 	.word	0x20001430

08003308 <usartPutc>:

void usartPutc(uint8_t ch)
{
 8003308:	b507      	push	{r0, r1, r2, lr}
 800330a:	a902      	add	r1, sp, #8
 800330c:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_UART_Transmit(&huart1, &ch, 1, 10);
 8003310:	230a      	movs	r3, #10
 8003312:	2201      	movs	r2, #1
 8003314:	4802      	ldr	r0, [pc, #8]	; (8003320 <usartPutc+0x18>)
 8003316:	f7fe f997 	bl	8001648 <HAL_UART_Transmit>
}
 800331a:	b003      	add	sp, #12
 800331c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003320:	2000143c 	.word	0x2000143c

08003324 <putnstr>:
#define putnstr(str,n)	do {			\
		printf ("%.*s", (int)n, str);	\
	} while (0)
#else
static void putnstr(char* str, int len)
{
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	460c      	mov	r4, r1
 8003328:	4606      	mov	r6, r0
	int str_len = strlen(str);
 800332a:	f7fc ff19 	bl	8000160 <strlen>
	if(str_len < len) {
 800332e:	42a0      	cmp	r0, r4
		printf ("%.*s", (int)n, str);	\
	} while (0)
#else
static void putnstr(char* str, int len)
{
	int str_len = strlen(str);
 8003330:	4605      	mov	r5, r0
	if(str_len < len) {
 8003332:	da07      	bge.n	8003344 <putnstr+0x20>
		int blank_len = len - str_len;
 8003334:	1a24      	subs	r4, r4, r0
		while(blank_len--) putc(' ');
 8003336:	f114 34ff 	adds.w	r4, r4, #4294967295
 800333a:	d304      	bcc.n	8003346 <putnstr+0x22>
 800333c:	2020      	movs	r0, #32
 800333e:	f7ff ffe3 	bl	8003308 <usartPutc>
 8003342:	e7f8      	b.n	8003336 <putnstr+0x12>
 8003344:	4625      	mov	r5, r4
 8003346:	4435      	add	r5, r6
	} else {
		str_len = len;
	}
	while(str_len--) putc(*str++);
 8003348:	42ae      	cmp	r6, r5
 800334a:	d004      	beq.n	8003356 <putnstr+0x32>
 800334c:	f816 0b01 	ldrb.w	r0, [r6], #1
 8003350:	f7ff ffda 	bl	8003308 <usartPutc>
 8003354:	e7f8      	b.n	8003348 <putnstr+0x24>
}
 8003356:	bd70      	pop	{r4, r5, r6, pc}

08003358 <cread_add_char>:
	}					\
}

static void cread_add_char(char ichar, int insert, unsigned long *num,
	       unsigned long *eol_num, char *buf, unsigned long len)
{
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	9e06      	ldr	r6, [sp, #24]
 800335c:	4615      	mov	r5, r2
 800335e:	4607      	mov	r7, r0
 8003360:	9a07      	ldr	r2, [sp, #28]
 8003362:	681c      	ldr	r4, [r3, #0]
	unsigned long wlen = 0;

	/* room ??? */
	if (insert || *num == *eol_num) {
 8003364:	b911      	cbnz	r1, 800336c <cread_add_char+0x14>
 8003366:	6828      	ldr	r0, [r5, #0]
 8003368:	42a0      	cmp	r0, r4
 800336a:	d125      	bne.n	80033b8 <cread_add_char+0x60>
		if (*eol_num > len - 1) {
 800336c:	3a01      	subs	r2, #1
 800336e:	4294      	cmp	r4, r2
 8003370:	d904      	bls.n	800337c <cread_add_char+0x24>
		wlen = 1;
		buf[*num] = ichar;
		putnstr(buf + *num, wlen);
		(*num)++;
	}
}
 8003372:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	unsigned long wlen = 0;

	/* room ??? */
	if (insert || *num == *eol_num) {
		if (*eol_num > len - 1) {
			getcmd_cbeep();		//alert(beep)
 8003376:	2007      	movs	r0, #7
 8003378:	f7ff bfc6 	b.w	8003308 <usartPutc>
			return;
		}
		(*eol_num)++;
 800337c:	3401      	adds	r4, #1
 800337e:	601c      	str	r4, [r3, #0]
	}

	if (insert) {
 8003380:	b1d1      	cbz	r1, 80033b8 <cread_add_char+0x60>
		wlen = *eol_num - *num;
 8003382:	6829      	ldr	r1, [r5, #0]
 8003384:	1a64      	subs	r4, r4, r1
		if (wlen > 1) {
 8003386:	2c01      	cmp	r4, #1
 8003388:	d905      	bls.n	8003396 <cread_add_char+0x3e>
			memmove(&buf[*num+1], &buf[*num], wlen-1);
 800338a:	1c48      	adds	r0, r1, #1
 800338c:	1e62      	subs	r2, r4, #1
 800338e:	4431      	add	r1, r6
 8003390:	4430      	add	r0, r6
 8003392:	f000 fdb8 	bl	8003f06 <memmove>
		}

		buf[*num] = ichar;
 8003396:	682b      	ldr	r3, [r5, #0]
		putnstr(buf + *num, wlen);
 8003398:	4621      	mov	r1, r4
		wlen = *eol_num - *num;
		if (wlen > 1) {
			memmove(&buf[*num+1], &buf[*num], wlen-1);
		}

		buf[*num] = ichar;
 800339a:	54f7      	strb	r7, [r6, r3]
		putnstr(buf + *num, wlen);
 800339c:	6828      	ldr	r0, [r5, #0]
 800339e:	4430      	add	r0, r6
 80033a0:	f7ff ffc0 	bl	8003324 <putnstr>
		(*num)++;
 80033a4:	682b      	ldr	r3, [r5, #0]
 80033a6:	3301      	adds	r3, #1
 80033a8:	602b      	str	r3, [r5, #0]
		while (--wlen) {
 80033aa:	3c01      	subs	r4, #1
 80033ac:	d003      	beq.n	80033b6 <cread_add_char+0x5e>
			getcmd_putch(CTL_BACKSPACE);
 80033ae:	2008      	movs	r0, #8
 80033b0:	f7ff ffaa 	bl	8003308 <usartPutc>
 80033b4:	e7f9      	b.n	80033aa <cread_add_char+0x52>
 80033b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	} else {
		/* echo the character */
		wlen = 1;
		buf[*num] = ichar;
 80033b8:	682b      	ldr	r3, [r5, #0]
		putnstr(buf + *num, wlen);
 80033ba:	2101      	movs	r1, #1
			getcmd_putch(CTL_BACKSPACE);
		}
	} else {
		/* echo the character */
		wlen = 1;
		buf[*num] = ichar;
 80033bc:	54f7      	strb	r7, [r6, r3]
		putnstr(buf + *num, wlen);
 80033be:	6828      	ldr	r0, [r5, #0]
 80033c0:	4430      	add	r0, r6
 80033c2:	f7ff ffaf 	bl	8003324 <putnstr>
		(*num)++;
 80033c6:	682b      	ldr	r3, [r5, #0]
 80033c8:	3301      	adds	r3, #1
 80033ca:	602b      	str	r3, [r5, #0]
 80033cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080033d0 <usartGetC>:
{
	HAL_UART_Transmit(&huart1, &ch, 1, 10);
}

uint8_t usartGetC(void)
{
 80033d0:	b508      	push	{r3, lr}
	uint8_t c;

	while (uart_isrx()==0)
 80033d2:	f7ff ff81 	bl	80032d8 <uart_isrx>
 80033d6:	b918      	cbnz	r0, 80033e0 <usartGetC+0x10>
	{
		osDelay(10);
 80033d8:	200a      	movs	r0, #10
 80033da:	f7fe faa8 	bl	800192e <osDelay>
		continue;
 80033de:	e7f8      	b.n	80033d2 <usartGetC+0x2>
	}

	c = evt.value.v & BIT8_MASK;
 80033e0:	4b02      	ldr	r3, [pc, #8]	; (80033ec <usartGetC+0x1c>)
	evt.status = osOK;
 80033e2:	2200      	movs	r2, #0
	{
		osDelay(10);
		continue;
	}

	c = evt.value.v & BIT8_MASK;
 80033e4:	7918      	ldrb	r0, [r3, #4]
	evt.status = osOK;
 80033e6:	601a      	str	r2, [r3, #0]

	return c;
}
 80033e8:	bd08      	pop	{r3, pc}
 80033ea:	bf00      	nop
 80033ec:	20001430 	.word	0x20001430

080033f0 <ctrlc>:
static int ctrlc_disabled = 0;  /* see disable_ctrl() */
static int ctrlc_was_pressed = 0;

int ctrlc(void)
{
	if (!ctrlc_disabled) {
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <ctrlc+0x28>)
/* test if ctrl-c was pressed */
static int ctrlc_disabled = 0;  /* see disable_ctrl() */
static int ctrlc_was_pressed = 0;

int ctrlc(void)
{
 80033f2:	b510      	push	{r4, lr}
	if (!ctrlc_disabled) {
 80033f4:	681c      	ldr	r4, [r3, #0]
 80033f6:	b10c      	cbz	r4, 80033fc <ctrlc+0xc>
				default:
					break;
			}
		}
	}
	return 0;
 80033f8:	2400      	movs	r4, #0
 80033fa:	e00a      	b.n	8003412 <ctrlc+0x22>
static int ctrlc_was_pressed = 0;

int ctrlc(void)
{
	if (!ctrlc_disabled) {
		if (tstc()) {
 80033fc:	f7ff ff6c 	bl	80032d8 <uart_isrx>
 8003400:	2800      	cmp	r0, #0
 8003402:	d0f9      	beq.n	80033f8 <ctrlc+0x8>
			switch (getc()) {
 8003404:	f7ff ffe4 	bl	80033d0 <usartGetC>
 8003408:	2803      	cmp	r0, #3
				case 0x03:      /* ^C - Control C */
					ctrlc_was_pressed = 1;
 800340a:	bf02      	ittt	eq
 800340c:	4b03      	ldreq	r3, [pc, #12]	; (800341c <ctrlc+0x2c>)
 800340e:	2401      	moveq	r4, #1
 8003410:	601c      	streq	r4, [r3, #0]
					break;
			}
		}
	}
	return 0;
}
 8003412:	4620      	mov	r0, r4
 8003414:	bd10      	pop	{r4, pc}
 8003416:	bf00      	nop
 8003418:	20000dc0 	.word	0x20000dc0
 800341c:	20000d74 	.word	0x20000d74

08003420 <readline_into_buffer>:
 *		-1 if break
 *		-2 if timed out
 */

int readline_into_buffer (const char *const prompt, char * buffer)
{
 8003420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * writable until after relocation to RAM.
	 * Revert to non-history version if still
	 * running from flash.
	 */
	if (1) {
		if (!initted) {
 8003424:	4ba7      	ldr	r3, [pc, #668]	; (80036c4 <readline_into_buffer+0x2a4>)
 *		-1 if break
 *		-2 if timed out
 */

int readline_into_buffer (const char *const prompt, char * buffer)
{
 8003426:	b087      	sub	sp, #28
	 * writable until after relocation to RAM.
	 * Revert to non-history version if still
	 * running from flash.
	 */
	if (1) {
		if (!initted) {
 8003428:	681c      	ldr	r4, [r3, #0]
 *		-1 if break
 *		-2 if timed out
 */

int readline_into_buffer (const char *const prompt, char * buffer)
{
 800342a:	4607      	mov	r7, r0
 800342c:	460d      	mov	r5, r1
 800342e:	461e      	mov	r6, r3
	 * writable until after relocation to RAM.
	 * Revert to non-history version if still
	 * running from flash.
	 */
	if (1) {
		if (!initted) {
 8003430:	b9f4      	cbnz	r4, 8003470 <readline_into_buffer+0x50>
			putc('\r');
 8003432:	200d      	movs	r0, #13
 8003434:	f7ff ff68 	bl	8003308 <usartPutc>
			putc('\n');
 8003438:	200a      	movs	r0, #10
 800343a:	f7ff ff65 	bl	8003308 <usartPutc>

static void hist_init(void)
{
	int i;

	hist_max = 0;
 800343e:	4ba2      	ldr	r3, [pc, #648]	; (80036c8 <readline_into_buffer+0x2a8>)
	hist_add_idx = 0;
	hist_cur = -1;
 8003440:	f04f 32ff 	mov.w	r2, #4294967295

static void hist_init(void)
{
	int i;

	hist_max = 0;
 8003444:	601c      	str	r4, [r3, #0]
	hist_add_idx = 0;
 8003446:	4ba1      	ldr	r3, [pc, #644]	; (80036cc <readline_into_buffer+0x2ac>)
	hist_cur = -1;
	hist_num = 0;

	for (i = 0; i < HIST_MAX; i++) {
 8003448:	f240 5014 	movw	r0, #1300	; 0x514
static void hist_init(void)
{
	int i;

	hist_max = 0;
	hist_add_idx = 0;
 800344c:	601c      	str	r4, [r3, #0]
	hist_cur = -1;
 800344e:	4ba0      	ldr	r3, [pc, #640]	; (80036d0 <readline_into_buffer+0x2b0>)
 8003450:	49a0      	ldr	r1, [pc, #640]	; (80036d4 <readline_into_buffer+0x2b4>)
 8003452:	601a      	str	r2, [r3, #0]
	hist_num = 0;
 8003454:	4ba0      	ldr	r3, [pc, #640]	; (80036d8 <readline_into_buffer+0x2b8>)

	for (i = 0; i < HIST_MAX; i++) {
		hist_list[i] = hist_lines[i];
 8003456:	4aa1      	ldr	r2, [pc, #644]	; (80036dc <readline_into_buffer+0x2bc>)
	int i;

	hist_max = 0;
	hist_add_idx = 0;
	hist_cur = -1;
	hist_num = 0;
 8003458:	601c      	str	r4, [r3, #0]
 800345a:	4623      	mov	r3, r4

	for (i = 0; i < HIST_MAX; i++) {
		hist_list[i] = hist_lines[i];
 800345c:	eb03 0e02 	add.w	lr, r3, r2
		hist_list[i][0] = '\0';
 8003460:	549c      	strb	r4, [r3, r2]
 8003462:	3341      	adds	r3, #65	; 0x41
	hist_max = 0;
	hist_add_idx = 0;
	hist_cur = -1;
	hist_num = 0;

	for (i = 0; i < HIST_MAX; i++) {
 8003464:	4283      	cmp	r3, r0
		hist_list[i] = hist_lines[i];
 8003466:	f841 ef04 	str.w	lr, [r1, #4]!
	hist_max = 0;
	hist_add_idx = 0;
	hist_cur = -1;
	hist_num = 0;

	for (i = 0; i < HIST_MAX; i++) {
 800346a:	d1f7      	bne.n	800345c <readline_into_buffer+0x3c>
	if (1) {
		if (!initted) {
			putc('\r');
			putc('\n');
			hist_init();
			initted = 1;
 800346c:	2301      	movs	r3, #1
 800346e:	6033      	str	r3, [r6, #0]
		}
		puts(prompt);
 8003470:	4638      	mov	r0, r7
 8003472:	f000 fc89 	bl	8003d88 <iprintf>
	}
}

static int cread_line(const char *const prompt, char *buf, unsigned int *len)
{
	unsigned long num = 0;
 8003476:	2300      	movs	r3, #0
	unsigned long wlen;
	char ichar;
	int insert = 1;
	int esc_len = 0;
	char esc_save[8];
	int init_len = strlen(buf);
 8003478:	4628      	mov	r0, r5
	}
}

static int cread_line(const char *const prompt, char *buf, unsigned int *len)
{
	unsigned long num = 0;
 800347a:	9302      	str	r3, [sp, #8]
	unsigned long eol_num = 0;
 800347c:	9303      	str	r3, [sp, #12]
	unsigned long wlen;
	char ichar;
	int insert = 1;
	int esc_len = 0;
	char esc_save[8];
	int init_len = strlen(buf);
 800347e:	f7fc fe6f 	bl	8000160 <strlen>

	if (init_len)
 8003482:	b118      	cbz	r0, 800348c <readline_into_buffer+0x6c>
 8003484:	182c      	adds	r4, r5, r0
 8003486:	462e      	mov	r6, r5

static void cread_add_str(char *str, int strsize, int insert, unsigned long *num,
	      unsigned long *eol_num, char *buf, unsigned long len)
{
	while (strsize--) {
		cread_add_char(*str, insert, num, eol_num, buf, len);
 8003488:	2740      	movs	r7, #64	; 0x40
 800348a:	e006      	b.n	800349a <readline_into_buffer+0x7a>

static char* hist_next(void)
{
	char *ret;

	if (hist_cur < 0)
 800348c:	4e90      	ldr	r6, [pc, #576]	; (80036d0 <readline_into_buffer+0x2b0>)
		case CTL_CH('p'):
		case CTL_CH('n'):
		{
			char * hline;

			esc_len = 0;
 800348e:	2400      	movs	r4, #0
 8003490:	2701      	movs	r7, #1
 8003492:	46b0      	mov	r8, r6
	char *ret;

	if (hist_cur < 0)
		return NULL;

	if (hist_cur == hist_add_idx)
 8003494:	f8df 9234 	ldr.w	r9, [pc, #564]	; 80036cc <readline_into_buffer+0x2ac>
 8003498:	e01e      	b.n	80034d8 <readline_into_buffer+0xb8>
}

static void cread_add_str(char *str, int strsize, int insert, unsigned long *num,
	      unsigned long *eol_num, char *buf, unsigned long len)
{
	while (strsize--) {
 800349a:	42a6      	cmp	r6, r4
 800349c:	d0f6      	beq.n	800348c <readline_into_buffer+0x6c>
		cread_add_char(*str, insert, num, eol_num, buf, len);
 800349e:	f816 0b01 	ldrb.w	r0, [r6], #1
 80034a2:	ab03      	add	r3, sp, #12
 80034a4:	e88d 00a0 	stmia.w	sp, {r5, r7}
 80034a8:	aa02      	add	r2, sp, #8
 80034aa:	2101      	movs	r1, #1
 80034ac:	f7ff ff54 	bl	8003358 <cread_add_char>
 80034b0:	e7f3      	b.n	800349a <readline_into_buffer+0x7a>
	if (init_len)
		cread_add_str(buf, init_len, 1, &num, &eol_num, buf, *len);

	while (1) {
		ichar = getcmd_getch();
		if ((ichar == '\n') || (ichar == '\r')) {
 80034b2:	280d      	cmp	r0, #13
 80034b4:	d014      	beq.n	80034e0 <readline_into_buffer+0xc0>
		}

		/*
		 * handle standard linux xterm esc sequences for arrow key, etc.
		 */
		if (esc_len != 0) {
 80034b6:	2c00      	cmp	r4, #0
 80034b8:	d046      	beq.n	8003548 <readline_into_buffer+0x128>
			if (esc_len == 1) {
 80034ba:	2c01      	cmp	r4, #1
 80034bc:	d120      	bne.n	8003500 <readline_into_buffer+0xe0>
				if (ichar == '[') {
 80034be:	285b      	cmp	r0, #91	; 0x5b
 80034c0:	d01a      	beq.n	80034f8 <readline_into_buffer+0xd8>

static void cread_add_str(char *str, int strsize, int insert, unsigned long *num,
	      unsigned long *eol_num, char *buf, unsigned long len)
{
	while (strsize--) {
		cread_add_char(*str, insert, num, eol_num, buf, len);
 80034c2:	2340      	movs	r3, #64	; 0x40
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80034ca:	9500      	str	r5, [sp, #0]
 80034cc:	ab03      	add	r3, sp, #12
 80034ce:	aa02      	add	r2, sp, #8
 80034d0:	4639      	mov	r1, r7
 80034d2:	f7ff ff41 	bl	8003358 <cread_add_char>
		case CTL_CH('p'):
		case CTL_CH('n'):
		{
			char * hline;

			esc_len = 0;
 80034d6:	2400      	movs	r4, #0

	if (init_len)
		cread_add_str(buf, init_len, 1, &num, &eol_num, buf, *len);

	while (1) {
		ichar = getcmd_getch();
 80034d8:	f7ff ff7a 	bl	80033d0 <usartGetC>
		if ((ichar == '\n') || (ichar == '\r')) {
 80034dc:	280a      	cmp	r0, #10
 80034de:	d1e8      	bne.n	80034b2 <readline_into_buffer+0x92>
			puts("\r\n");
 80034e0:	487f      	ldr	r0, [pc, #508]	; (80036e0 <readline_into_buffer+0x2c0>)
 80034e2:	f000 fc75 	bl	8003dd0 <puts>
			cread_add_char(ichar, insert, &num, &eol_num, buf, *len);
			break;
		}
		osDelay(10);
	}
	*len = eol_num;
 80034e6:	9e03      	ldr	r6, [sp, #12]
	buf[eol_num] = '\0';	/* lose the newline */
 80034e8:	2300      	movs	r3, #0
 80034ea:	55ab      	strb	r3, [r5, r6]

	if (buf[0] && buf[0] != CREAD_HIST_CHAR)
 80034ec:	782b      	ldrb	r3, [r5, #0]
 80034ee:	4f77      	ldr	r7, [pc, #476]	; (80036cc <readline_into_buffer+0x2ac>)
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f040 818f 	bne.w	8003814 <readline_into_buffer+0x3f4>
 80034f6:	e1a4      	b.n	8003842 <readline_into_buffer+0x422>
		 * handle standard linux xterm esc sequences for arrow key, etc.
		 */
		if (esc_len != 0) {
			if (esc_len == 1) {
				if (ichar == '[') {
					esc_save[esc_len] = ichar;
 80034f8:	f88d 0011 	strb.w	r0, [sp, #17]
					esc_len = 2;
 80034fc:	2402      	movs	r4, #2
 80034fe:	e7eb      	b.n	80034d8 <readline_into_buffer+0xb8>
					esc_len = 0;
				}
				continue;
			}

			switch (ichar) {
 8003500:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8003504:	2b07      	cmp	r3, #7
 8003506:	d809      	bhi.n	800351c <readline_into_buffer+0xfc>
 8003508:	e8df f013 	tbh	[pc, r3, lsl #1]
 800350c:	01290111 	.word	0x01290111
 8003510:	0068005d 	.word	0x0068005d
 8003514:	00080008 	.word	0x00080008
 8003518:	004e0008 	.word	0x004e0008
			case 'B':	/* down arrow */
				ichar = CTL_CH('n');
				esc_len = 0;
				break;	/* pass off to ^N handler */
			default:
				esc_save[esc_len++] = ichar;
 800351c:	ab06      	add	r3, sp, #24
 800351e:	4423      	add	r3, r4
 8003520:	f803 0c08 	strb.w	r0, [r3, #-8]
 8003524:	ab04      	add	r3, sp, #16
 8003526:	469a      	mov	sl, r3
 8003528:	3401      	adds	r4, #1
 800352a:	441c      	add	r4, r3

static void cread_add_str(char *str, int strsize, int insert, unsigned long *num,
	      unsigned long *eol_num, char *buf, unsigned long len)
{
	while (strsize--) {
		cread_add_char(*str, insert, num, eol_num, buf, len);
 800352c:	f04f 0b40 	mov.w	fp, #64	; 0x40
}

static void cread_add_str(char *str, int strsize, int insert, unsigned long *num,
	      unsigned long *eol_num, char *buf, unsigned long len)
{
	while (strsize--) {
 8003530:	4554      	cmp	r4, sl
 8003532:	d0d0      	beq.n	80034d6 <readline_into_buffer+0xb6>
		cread_add_char(*str, insert, num, eol_num, buf, len);
 8003534:	f81a 0b01 	ldrb.w	r0, [sl], #1
 8003538:	ab03      	add	r3, sp, #12
 800353a:	e88d 0820 	stmia.w	sp, {r5, fp}
 800353e:	aa02      	add	r2, sp, #8
 8003540:	4639      	mov	r1, r7
 8003542:	f7ff ff09 	bl	8003358 <cread_add_char>
 8003546:	e7f3      	b.n	8003530 <readline_into_buffer+0x110>
				esc_len = 0;
				continue;
			}
		}

		switch (ichar) {
 8003548:	280b      	cmp	r0, #11
 800354a:	d070      	beq.n	800362e <readline_into_buffer+0x20e>
 800354c:	d80e      	bhi.n	800356c <readline_into_buffer+0x14c>
 800354e:	2804      	cmp	r0, #4
 8003550:	d04f      	beq.n	80035f2 <readline_into_buffer+0x1d2>
 8003552:	d806      	bhi.n	8003562 <readline_into_buffer+0x142>
 8003554:	2802      	cmp	r0, #2
 8003556:	d041      	beq.n	80035dc <readline_into_buffer+0x1bc>
 8003558:	d831      	bhi.n	80035be <readline_into_buffer+0x19e>
 800355a:	2801      	cmp	r0, #1
 800355c:	f040 814c 	bne.w	80037f8 <readline_into_buffer+0x3d8>
 8003560:	e022      	b.n	80035a8 <readline_into_buffer+0x188>
 8003562:	2806      	cmp	r0, #6
 8003564:	d02f      	beq.n	80035c6 <readline_into_buffer+0x1a6>
 8003566:	d37b      	bcc.n	8003660 <readline_into_buffer+0x240>
 8003568:	2808      	cmp	r0, #8
 800356a:	e016      	b.n	800359a <readline_into_buffer+0x17a>
 800356c:	2815      	cmp	r0, #21
 800356e:	f000 8086 	beq.w	800367e <readline_into_buffer+0x25e>
 8003572:	d808      	bhi.n	8003586 <readline_into_buffer+0x166>
 8003574:	280f      	cmp	r0, #15
 8003576:	d07f      	beq.n	8003678 <readline_into_buffer+0x258>
 8003578:	2810      	cmp	r0, #16
 800357a:	f000 80d8 	beq.w	800372e <readline_into_buffer+0x30e>
 800357e:	280e      	cmp	r0, #14
 8003580:	f040 813a 	bne.w	80037f8 <readline_into_buffer+0x3d8>
 8003584:	e0eb      	b.n	800375e <readline_into_buffer+0x33e>
 8003586:	281b      	cmp	r0, #27
 8003588:	d00a      	beq.n	80035a0 <readline_into_buffer+0x180>
 800358a:	d802      	bhi.n	8003592 <readline_into_buffer+0x172>
 800358c:	2818      	cmp	r0, #24
 800358e:	d076      	beq.n	800367e <readline_into_buffer+0x25e>
 8003590:	e132      	b.n	80037f8 <readline_into_buffer+0x3d8>
 8003592:	287f      	cmp	r0, #127	; 0x7f
 8003594:	f000 80a6 	beq.w	80036e4 <readline_into_buffer+0x2c4>
 8003598:	28ff      	cmp	r0, #255	; 0xff
 800359a:	f000 80a3 	beq.w	80036e4 <readline_into_buffer+0x2c4>
 800359e:	e12b      	b.n	80037f8 <readline_into_buffer+0x3d8>
		case 0x1b:				//escape
			if (esc_len == 0) {
				esc_save[esc_len] = ichar;
 80035a0:	f88d 0010 	strb.w	r0, [sp, #16]
				esc_len = 1;
 80035a4:	2401      	movs	r4, #1
 80035a6:	e131      	b.n	800380c <readline_into_buffer+0x3ec>
				puts("impossible condition #876\n");
				esc_len = 0;
			}
			break;
		case CTL_CH('a'):
			BEGINNING_OF_LINE();
 80035a8:	9c02      	ldr	r4, [sp, #8]
 80035aa:	2c00      	cmp	r4, #0
 80035ac:	f000 812e 	beq.w	800380c <readline_into_buffer+0x3ec>
 80035b0:	2008      	movs	r0, #8
 80035b2:	f7ff fea9 	bl	8003308 <usartPutc>
 80035b6:	9b02      	ldr	r3, [sp, #8]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	9302      	str	r3, [sp, #8]
 80035bc:	e7f4      	b.n	80035a8 <readline_into_buffer+0x188>
			break;
		case CTL_CH('c'):	/* ^C - break */
			*buf = '\0';	/* discard input */
 80035be:	702c      	strb	r4, [r5, #0]
			return (-1);
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	e146      	b.n	8003854 <readline_into_buffer+0x434>
		case CTL_CH('f'):
			if (num < eol_num) {
 80035c6:	9b02      	ldr	r3, [sp, #8]
 80035c8:	9a03      	ldr	r2, [sp, #12]
 80035ca:	4293      	cmp	r3, r2
 80035cc:	f080 811d 	bcs.w	800380a <readline_into_buffer+0x3ea>
				getcmd_putch(buf[num]);
 80035d0:	5ce8      	ldrb	r0, [r5, r3]
 80035d2:	f7ff fe99 	bl	8003308 <usartPutc>
				num++;
 80035d6:	9b02      	ldr	r3, [sp, #8]
 80035d8:	3301      	adds	r3, #1
 80035da:	e008      	b.n	80035ee <readline_into_buffer+0x1ce>
			}
			break;
		case CTL_CH('b'):
			if (num) {
 80035dc:	9c02      	ldr	r4, [sp, #8]
 80035de:	2c00      	cmp	r4, #0
 80035e0:	f000 8114 	beq.w	800380c <readline_into_buffer+0x3ec>
				getcmd_putch(CTL_BACKSPACE);
 80035e4:	2008      	movs	r0, #8
 80035e6:	f7ff fe8f 	bl	8003308 <usartPutc>
				num--;
 80035ea:	9b02      	ldr	r3, [sp, #8]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	9302      	str	r3, [sp, #8]
 80035f0:	e10b      	b.n	800380a <readline_into_buffer+0x3ea>
			}
			break;
		case CTL_CH('d'):
			if (num < eol_num) {
 80035f2:	9902      	ldr	r1, [sp, #8]
 80035f4:	9b03      	ldr	r3, [sp, #12]
 80035f6:	4299      	cmp	r1, r3
 80035f8:	f080 8108 	bcs.w	800380c <readline_into_buffer+0x3ec>
				wlen = eol_num - num - 1;
 80035fc:	f103 3aff 	add.w	sl, r3, #4294967295
				if (wlen) {
 8003600:	ebba 0a01 	subs.w	sl, sl, r1
 8003604:	d009      	beq.n	800361a <readline_into_buffer+0x1fa>
					memmove(&buf[num], &buf[num+1], wlen);
 8003606:	186b      	adds	r3, r5, r1
 8003608:	3101      	adds	r1, #1
 800360a:	4429      	add	r1, r5
 800360c:	4652      	mov	r2, sl
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fc79 	bl	8003f06 <memmove>
					putnstr(buf + num, wlen);
 8003614:	4651      	mov	r1, sl
 8003616:	f7ff fe85 	bl	8003324 <putnstr>
				}

				getcmd_putch(' ');
 800361a:	2020      	movs	r0, #32
 800361c:	f7ff fe74 	bl	8003308 <usartPutc>
				do {
					getcmd_putch(CTL_BACKSPACE);
 8003620:	2008      	movs	r0, #8
 8003622:	f7ff fe71 	bl	8003308 <usartPutc>
				} while (wlen--);
 8003626:	f11a 3aff 	adds.w	sl, sl, #4294967295
 800362a:	d2f9      	bcs.n	8003620 <readline_into_buffer+0x200>
 800362c:	e07b      	b.n	8003726 <readline_into_buffer+0x306>
				eol_num--;
			}
			break;
		case CTL_CH('k'):
			ERASE_TO_EOL();
 800362e:	9b02      	ldr	r3, [sp, #8]
 8003630:	9a03      	ldr	r2, [sp, #12]
 8003632:	4293      	cmp	r3, r2
 8003634:	f080 80ea 	bcs.w	800380c <readline_into_buffer+0x3ec>
 8003638:	469a      	mov	sl, r3
 800363a:	9b03      	ldr	r3, [sp, #12]
 800363c:	459a      	cmp	sl, r3
 800363e:	d205      	bcs.n	800364c <readline_into_buffer+0x22c>
 8003640:	2020      	movs	r0, #32
 8003642:	f7ff fe61 	bl	8003308 <usartPutc>
 8003646:	f10a 0a01 	add.w	sl, sl, #1
 800364a:	e7f6      	b.n	800363a <readline_into_buffer+0x21a>
 800364c:	9b02      	ldr	r3, [sp, #8]
 800364e:	f10a 3bff 	add.w	fp, sl, #4294967295
 8003652:	4553      	cmp	r3, sl
 8003654:	d269      	bcs.n	800372a <readline_into_buffer+0x30a>
 8003656:	2008      	movs	r0, #8
 8003658:	f7ff fe56 	bl	8003308 <usartPutc>
 800365c:	46da      	mov	sl, fp
 800365e:	e7f5      	b.n	800364c <readline_into_buffer+0x22c>
			break;
		case CTL_CH('e'):
			REFRESH_TO_EOL();
 8003660:	9802      	ldr	r0, [sp, #8]
 8003662:	9903      	ldr	r1, [sp, #12]
 8003664:	4288      	cmp	r0, r1
 8003666:	f080 80d1 	bcs.w	800380c <readline_into_buffer+0x3ec>
 800366a:	1a09      	subs	r1, r1, r0
 800366c:	4428      	add	r0, r5
 800366e:	f7ff fe59 	bl	8003324 <putnstr>
 8003672:	9b03      	ldr	r3, [sp, #12]
 8003674:	9302      	str	r3, [sp, #8]
 8003676:	e0c9      	b.n	800380c <readline_into_buffer+0x3ec>
 8003678:	f087 0701 	eor.w	r7, r7, #1
 800367c:	e0c6      	b.n	800380c <readline_into_buffer+0x3ec>
		case CTL_CH('o'):
			insert = !insert;
			break;
		case CTL_CH('x'):
		case CTL_CH('u'):
			BEGINNING_OF_LINE();
 800367e:	9b02      	ldr	r3, [sp, #8]
 8003680:	b133      	cbz	r3, 8003690 <readline_into_buffer+0x270>
 8003682:	2008      	movs	r0, #8
 8003684:	f7ff fe40 	bl	8003308 <usartPutc>
 8003688:	9b02      	ldr	r3, [sp, #8]
 800368a:	3b01      	subs	r3, #1
 800368c:	9302      	str	r3, [sp, #8]
 800368e:	e7f6      	b.n	800367e <readline_into_buffer+0x25e>
			ERASE_TO_EOL();
 8003690:	9a03      	ldr	r2, [sp, #12]
 8003692:	2a00      	cmp	r2, #0
 8003694:	f000 80ba 	beq.w	800380c <readline_into_buffer+0x3ec>
 8003698:	469a      	mov	sl, r3
 800369a:	9b03      	ldr	r3, [sp, #12]
 800369c:	459a      	cmp	sl, r3
 800369e:	d205      	bcs.n	80036ac <readline_into_buffer+0x28c>
 80036a0:	2020      	movs	r0, #32
 80036a2:	f7ff fe31 	bl	8003308 <usartPutc>
 80036a6:	f10a 0a01 	add.w	sl, sl, #1
 80036aa:	e7f6      	b.n	800369a <readline_into_buffer+0x27a>
 80036ac:	9a02      	ldr	r2, [sp, #8]
 80036ae:	4592      	cmp	sl, r2
 80036b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80036b4:	d903      	bls.n	80036be <readline_into_buffer+0x29e>
 80036b6:	2008      	movs	r0, #8
 80036b8:	f7ff fe26 	bl	8003308 <usartPutc>
 80036bc:	e7f6      	b.n	80036ac <readline_into_buffer+0x28c>
 80036be:	9203      	str	r2, [sp, #12]
 80036c0:	e0a4      	b.n	800380c <readline_into_buffer+0x3ec>
 80036c2:	bf00      	nop
 80036c4:	20000dc8 	.word	0x20000dc8
 80036c8:	20000d78 	.word	0x20000d78
 80036cc:	20000dbc 	.word	0x20000dbc
 80036d0:	20000008 	.word	0x20000008
 80036d4:	20000ec8 	.word	0x20000ec8
 80036d8:	20000dc4 	.word	0x20000dc4
 80036dc:	20000f1c 	.word	0x20000f1c
 80036e0:	08004222 	.word	0x08004222
			break;
		case DEL:
		case DEL7:
		case 8:
			if (num) {
 80036e4:	9902      	ldr	r1, [sp, #8]
 80036e6:	2900      	cmp	r1, #0
 80036e8:	f000 8090 	beq.w	800380c <readline_into_buffer+0x3ec>
				wlen = eol_num - num;
 80036ec:	9b03      	ldr	r3, [sp, #12]
				num--;
 80036ee:	1e48      	subs	r0, r1, #1
			break;
		case DEL:
		case DEL7:
		case 8:
			if (num) {
				wlen = eol_num - num;
 80036f0:	ebc1 0a03 	rsb	sl, r1, r3
				num--;
				memmove(&buf[num], &buf[num+1], wlen);
 80036f4:	4652      	mov	r2, sl
 80036f6:	4429      	add	r1, r5
		case DEL:
		case DEL7:
		case 8:
			if (num) {
				wlen = eol_num - num;
				num--;
 80036f8:	9002      	str	r0, [sp, #8]
				memmove(&buf[num], &buf[num+1], wlen);
 80036fa:	4428      	add	r0, r5
 80036fc:	f000 fc03 	bl	8003f06 <memmove>
				getcmd_putch(CTL_BACKSPACE);
 8003700:	2008      	movs	r0, #8
 8003702:	f7ff fe01 	bl	8003308 <usartPutc>
				putnstr(buf + num, wlen);
 8003706:	9802      	ldr	r0, [sp, #8]
 8003708:	4651      	mov	r1, sl
 800370a:	4428      	add	r0, r5
 800370c:	f7ff fe0a 	bl	8003324 <putnstr>
				getcmd_putch(' ');
 8003710:	2020      	movs	r0, #32
 8003712:	f7ff fdf9 	bl	8003308 <usartPutc>
				do {
					getcmd_putch(CTL_BACKSPACE);
 8003716:	2008      	movs	r0, #8
 8003718:	f7ff fdf6 	bl	8003308 <usartPutc>
 800371c:	4653      	mov	r3, sl
 800371e:	f10a 3aff 	add.w	sl, sl, #4294967295
				} while (wlen--);
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f7      	bne.n	8003716 <readline_into_buffer+0x2f6>
				eol_num--;
 8003726:	9b03      	ldr	r3, [sp, #12]
 8003728:	3b01      	subs	r3, #1
 800372a:	9303      	str	r3, [sp, #12]
 800372c:	e06e      	b.n	800380c <readline_into_buffer+0x3ec>
static char* hist_prev(void)
{
	char *ret;
	int old_cur;

	if (hist_cur < 0)
 800372e:	6833      	ldr	r3, [r6, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f2c0 808b 	blt.w	800384c <readline_into_buffer+0x42c>
		return NULL;

	old_cur = hist_cur;
	if (--hist_cur < 0)
 8003736:	1e5a      	subs	r2, r3, #1
 8003738:	6032      	str	r2, [r6, #0]
 800373a:	3201      	adds	r2, #1
		hist_cur = hist_max;
 800373c:	bf08      	it	eq
 800373e:	4a47      	ldreq	r2, [pc, #284]	; (800385c <readline_into_buffer+0x43c>)

	if (hist_cur == hist_add_idx) {
 8003740:	f8d9 1000 	ldr.w	r1, [r9]
	if (hist_cur < 0)
		return NULL;

	old_cur = hist_cur;
	if (--hist_cur < 0)
		hist_cur = hist_max;
 8003744:	bf04      	itt	eq
 8003746:	6812      	ldreq	r2, [r2, #0]
 8003748:	6032      	streq	r2, [r6, #0]

	if (hist_cur == hist_add_idx) {
 800374a:	f8d8 2000 	ldr.w	r2, [r8]
 800374e:	428a      	cmp	r2, r1
 8003750:	d101      	bne.n	8003756 <readline_into_buffer+0x336>
		hist_cur = old_cur;
 8003752:	6033      	str	r3, [r6, #0]
 8003754:	e07a      	b.n	800384c <readline_into_buffer+0x42c>
		ret = NULL;
	} else
		ret = hist_list[hist_cur];
 8003756:	4b42      	ldr	r3, [pc, #264]	; (8003860 <readline_into_buffer+0x440>)
 8003758:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800375c:	e015      	b.n	800378a <readline_into_buffer+0x36a>

static char* hist_next(void)
{
	char *ret;

	if (hist_cur < 0)
 800375e:	6833      	ldr	r3, [r6, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	db73      	blt.n	800384c <readline_into_buffer+0x42c>
		return NULL;

	if (hist_cur == hist_add_idx)
 8003764:	f8d9 2000 	ldr.w	r2, [r9]
 8003768:	4293      	cmp	r3, r2
 800376a:	d06f      	beq.n	800384c <readline_into_buffer+0x42c>
		return NULL;

	if (++hist_cur > hist_max)
 800376c:	493b      	ldr	r1, [pc, #236]	; (800385c <readline_into_buffer+0x43c>)
 800376e:	3301      	adds	r3, #1
 8003770:	6809      	ldr	r1, [r1, #0]
 8003772:	6033      	str	r3, [r6, #0]
 8003774:	428b      	cmp	r3, r1
		hist_cur = 0;
 8003776:	bfc4      	itt	gt
 8003778:	2300      	movgt	r3, #0
 800377a:	6033      	strgt	r3, [r6, #0]

	if (hist_cur == hist_add_idx) {
 800377c:	f8d8 3000 	ldr.w	r3, [r8]
 8003780:	429a      	cmp	r2, r3
 8003782:	d006      	beq.n	8003792 <readline_into_buffer+0x372>
		ret = "";
	} else
		ret = hist_list[hist_cur];
 8003784:	4a36      	ldr	r2, [pc, #216]	; (8003860 <readline_into_buffer+0x440>)
 8003786:	f852 a023 	ldr.w	sl, [r2, r3, lsl #2]
			if (ichar == CTL_CH('p'))
				hline = hist_prev();
			else
				hline = hist_next();

			if (!hline) {
 800378a:	f1ba 0f00 	cmp.w	sl, #0
 800378e:	d102      	bne.n	8003796 <readline_into_buffer+0x376>
 8003790:	e05c      	b.n	800384c <readline_into_buffer+0x42c>

	if (++hist_cur > hist_max)
		hist_cur = 0;

	if (hist_cur == hist_add_idx) {
		ret = "";
 8003792:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800386c <readline_into_buffer+0x44c>
				continue;
			}

			/* nuke the current line */
			/* first, go home */
			BEGINNING_OF_LINE();
 8003796:	9c02      	ldr	r4, [sp, #8]
 8003798:	b134      	cbz	r4, 80037a8 <readline_into_buffer+0x388>
 800379a:	2008      	movs	r0, #8
 800379c:	f7ff fdb4 	bl	8003308 <usartPutc>
 80037a0:	9b02      	ldr	r3, [sp, #8]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	9302      	str	r3, [sp, #8]
 80037a6:	e7f6      	b.n	8003796 <readline_into_buffer+0x376>

			/* erase to end of line */
			ERASE_TO_EOL();
 80037a8:	9b03      	ldr	r3, [sp, #12]
 80037aa:	b193      	cbz	r3, 80037d2 <readline_into_buffer+0x3b2>
 80037ac:	9b03      	ldr	r3, [sp, #12]
 80037ae:	429c      	cmp	r4, r3
 80037b0:	d204      	bcs.n	80037bc <readline_into_buffer+0x39c>
 80037b2:	2020      	movs	r0, #32
 80037b4:	f7ff fda8 	bl	8003308 <usartPutc>
 80037b8:	3401      	adds	r4, #1
 80037ba:	e7f7      	b.n	80037ac <readline_into_buffer+0x38c>
 80037bc:	9b02      	ldr	r3, [sp, #8]
 80037be:	f104 3bff 	add.w	fp, r4, #4294967295
 80037c2:	42a3      	cmp	r3, r4
 80037c4:	d204      	bcs.n	80037d0 <readline_into_buffer+0x3b0>
 80037c6:	2008      	movs	r0, #8
 80037c8:	f7ff fd9e 	bl	8003308 <usartPutc>
 80037cc:	465c      	mov	r4, fp
 80037ce:	e7f5      	b.n	80037bc <readline_into_buffer+0x39c>
 80037d0:	9303      	str	r3, [sp, #12]

			/* copy new line into place and display */
			strcpy(buf, hline);
 80037d2:	4651      	mov	r1, sl
 80037d4:	4628      	mov	r0, r5
 80037d6:	f000 fbc7 	bl	8003f68 <strcpy>
			eol_num = strlen(buf);
 80037da:	4628      	mov	r0, r5
 80037dc:	f7fc fcc0 	bl	8000160 <strlen>
			REFRESH_TO_EOL();
 80037e0:	9b02      	ldr	r3, [sp, #8]
			/* erase to end of line */
			ERASE_TO_EOL();

			/* copy new line into place and display */
			strcpy(buf, hline);
			eol_num = strlen(buf);
 80037e2:	9003      	str	r0, [sp, #12]
			REFRESH_TO_EOL();
 80037e4:	4298      	cmp	r0, r3
 80037e6:	f67f ae76 	bls.w	80034d6 <readline_into_buffer+0xb6>
 80037ea:	1ac1      	subs	r1, r0, r3
 80037ec:	18e8      	adds	r0, r5, r3
 80037ee:	f7ff fd99 	bl	8003324 <putnstr>
 80037f2:	9b03      	ldr	r3, [sp, #12]
 80037f4:	9302      	str	r3, [sp, #8]
 80037f6:	e66e      	b.n	80034d6 <readline_into_buffer+0xb6>
			}
			break;
		}
#endif
		default:
			cread_add_char(ichar, insert, &num, &eol_num, buf, *len);
 80037f8:	2340      	movs	r3, #64	; 0x40
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	9500      	str	r5, [sp, #0]
 80037fe:	ab03      	add	r3, sp, #12
 8003800:	aa02      	add	r2, sp, #8
 8003802:	4639      	mov	r1, r7
 8003804:	f7ff fda8 	bl	8003358 <cread_add_char>
 8003808:	e000      	b.n	800380c <readline_into_buffer+0x3ec>
			break;
		case CTL_CH('c'):	/* ^C - break */
			*buf = '\0';	/* discard input */
			return (-1);
		case CTL_CH('f'):
			if (num < eol_num) {
 800380a:	2400      	movs	r4, #0
#endif
		default:
			cread_add_char(ichar, insert, &num, &eol_num, buf, *len);
			break;
		}
		osDelay(10);
 800380c:	200a      	movs	r0, #10
 800380e:	f7fe f88e 	bl	800192e <osDelay>
 8003812:	e661      	b.n	80034d8 <readline_into_buffer+0xb8>
	}
	*len = eol_num;
	buf[eol_num] = '\0';	/* lose the newline */

	if (buf[0] && buf[0] != CREAD_HIST_CHAR)
 8003814:	2b21      	cmp	r3, #33	; 0x21
 8003816:	d014      	beq.n	8003842 <readline_into_buffer+0x422>
	}
}

static void cread_add_to_hist(char *line)
{
	strcpy(hist_list[hist_add_idx], line);
 8003818:	683c      	ldr	r4, [r7, #0]
 800381a:	4b11      	ldr	r3, [pc, #68]	; (8003860 <readline_into_buffer+0x440>)
 800381c:	4629      	mov	r1, r5
 800381e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003822:	f000 fba1 	bl	8003f68 <strcpy>

	if (++hist_add_idx >= HIST_MAX)
		hist_add_idx = 0;

	if (hist_add_idx > hist_max)
 8003826:	4a0d      	ldr	r2, [pc, #52]	; (800385c <readline_into_buffer+0x43c>)

static void cread_add_to_hist(char *line)
{
	strcpy(hist_list[hist_add_idx], line);

	if (++hist_add_idx >= HIST_MAX)
 8003828:	1c63      	adds	r3, r4, #1
		hist_add_idx = 0;

	if (hist_add_idx > hist_max)
 800382a:	6811      	ldr	r1, [r2, #0]

static void cread_add_to_hist(char *line)
{
	strcpy(hist_list[hist_add_idx], line);

	if (++hist_add_idx >= HIST_MAX)
 800382c:	2b13      	cmp	r3, #19
 800382e:	bfc8      	it	gt
 8003830:	2300      	movgt	r3, #0
		hist_add_idx = 0;

	if (hist_add_idx > hist_max)
 8003832:	428b      	cmp	r3, r1
		hist_max = hist_add_idx;
 8003834:	bfc8      	it	gt
 8003836:	6013      	strgt	r3, [r2, #0]

	hist_num++;
 8003838:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <readline_into_buffer+0x444>)

static void cread_add_to_hist(char *line)
{
	strcpy(hist_list[hist_add_idx], line);

	if (++hist_add_idx >= HIST_MAX)
 800383a:	603b      	str	r3, [r7, #0]
		hist_add_idx = 0;

	if (hist_add_idx > hist_max)
		hist_max = hist_add_idx;

	hist_num++;
 800383c:	6813      	ldr	r3, [r2, #0]
 800383e:	3301      	adds	r3, #1
 8003840:	6013      	str	r3, [r2, #0]
	*len = eol_num;
	buf[eol_num] = '\0';	/* lose the newline */

	if (buf[0] && buf[0] != CREAD_HIST_CHAR)
		cread_add_to_hist(buf);
	hist_cur = hist_add_idx;
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <readline_into_buffer+0x448>)
			initted = 1;
		}
		puts(prompt);

		rc = cread_line(prompt, p, &len);
		return rc < 0 ? rc : len;
 8003846:	4630      	mov	r0, r6
	*len = eol_num;
	buf[eol_num] = '\0';	/* lose the newline */

	if (buf[0] && buf[0] != CREAD_HIST_CHAR)
		cread_add_to_hist(buf);
	hist_cur = hist_add_idx;
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e003      	b.n	8003854 <readline_into_buffer+0x434>
				hline = hist_prev();
			else
				hline = hist_next();

			if (!hline) {
				getcmd_cbeep();
 800384c:	2007      	movs	r0, #7
 800384e:	f7ff fd5b 	bl	8003308 <usartPutc>
 8003852:	e640      	b.n	80034d6 <readline_into_buffer+0xb6>
		}
	}
#ifdef CONFIG_CMDLINE_EDITING
	}
#endif
}
 8003854:	b007      	add	sp, #28
 8003856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800385a:	bf00      	nop
 800385c:	20000d78 	.word	0x20000d78
 8003860:	20000ecc 	.word	0x20000ecc
 8003864:	20000dc4 	.word	0x20000dc4
 8003868:	20000008 	.word	0x20000008
 800386c:	080040fc 	.word	0x080040fc

08003870 <readline>:
{
	/*
	 * If console_buffer isn't 0-length the user will be prompted to modify
	 * it instead of entering it from scratch as desired.
	 */
	console_buffer[0] = '\0';
 8003870:	4902      	ldr	r1, [pc, #8]	; (800387c <readline+0xc>)
 8003872:	2300      	movs	r3, #0
 8003874:	700b      	strb	r3, [r1, #0]

	return readline_into_buffer(prompt, console_buffer);
 8003876:	f7ff bdd3 	b.w	8003420 <readline_into_buffer>
 800387a:	bf00      	nop
 800387c:	20000e88 	.word	0x20000e88

08003880 <parse_line>:
}

/****************************************************************************/

int parse_line (char *line, char *argv[])
{
 8003880:	b570      	push	{r4, r5, r6, lr}
	int nargs = 0;
 8003882:	2400      	movs	r4, #0
		printf ("parse_line: nargs=%d\n", nargs);
#endif
			return (nargs);
		}

		*line++ = '\0';		/* terminate current arg	 */
 8003884:	4626      	mov	r6, r4
 8003886:	1f0d      	subs	r5, r1, #4
	printf ("parse_line: \"%s\"\n", line);
#endif
	while (nargs < CONFIG_SYS_MAXARGS) {

		/* skip any white space */
		while ((*line == ' ') || (*line == '\t')) {
 8003888:	4602      	mov	r2, r0
 800388a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800388e:	2b20      	cmp	r3, #32
 8003890:	d101      	bne.n	8003896 <parse_line+0x16>
}

/****************************************************************************/

int parse_line (char *line, char *argv[])
{
 8003892:	4610      	mov	r0, r2
 8003894:	e7f8      	b.n	8003888 <parse_line+0x8>
	printf ("parse_line: \"%s\"\n", line);
#endif
	while (nargs < CONFIG_SYS_MAXARGS) {

		/* skip any white space */
		while ((*line == ' ') || (*line == '\t')) {
 8003896:	2b09      	cmp	r3, #9
 8003898:	d0fb      	beq.n	8003892 <parse_line+0x12>
			++line;
		}

		if (*line == '\0') {	/* end of line, no more args	*/
 800389a:	b15b      	cbz	r3, 80038b4 <parse_line+0x34>
		printf ("parse_line: nargs=%d\n", nargs);
#endif
			return (nargs);
		}

		argv[nargs++] = line;	/* begin of argument string	*/
 800389c:	3401      	adds	r4, #1
 800389e:	f845 0f04 	str.w	r0, [r5, #4]!
 80038a2:	4602      	mov	r2, r0

		/* find end of string */
		while (*line && (*line != ' ') && (*line != '\t')) {
 80038a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80038a8:	b123      	cbz	r3, 80038b4 <parse_line+0x34>
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d005      	beq.n	80038ba <parse_line+0x3a>
 80038ae:	2b09      	cmp	r3, #9
 80038b0:	d1f7      	bne.n	80038a2 <parse_line+0x22>
 80038b2:	e002      	b.n	80038ba <parse_line+0x3a>
			++line;
		}

		if (*line == '\0') {	/* end of line, no more args	*/
			argv[nargs] = NULL;
 80038b4:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
#ifdef DEBUG_PARSER
		printf ("parse_line: nargs=%d\n", nargs);
#endif
			return (nargs);
 80038b8:	e008      	b.n	80038cc <parse_line+0x4c>
	int nargs = 0;

#ifdef DEBUG_PARSER
	printf ("parse_line: \"%s\"\n", line);
#endif
	while (nargs < CONFIG_SYS_MAXARGS) {
 80038ba:	2c08      	cmp	r4, #8
		printf ("parse_line: nargs=%d\n", nargs);
#endif
			return (nargs);
		}

		*line++ = '\0';		/* terminate current arg	 */
 80038bc:	f102 0001 	add.w	r0, r2, #1
 80038c0:	7016      	strb	r6, [r2, #0]
	int nargs = 0;

#ifdef DEBUG_PARSER
	printf ("parse_line: \"%s\"\n", line);
#endif
	while (nargs < CONFIG_SYS_MAXARGS) {
 80038c2:	d1e1      	bne.n	8003888 <parse_line+0x8>
		}

		*line++ = '\0';		/* terminate current arg	 */
	}

	printf ("** Too many args (max. %d) **\n", CONFIG_SYS_MAXARGS);
 80038c4:	4621      	mov	r1, r4
 80038c6:	4802      	ldr	r0, [pc, #8]	; (80038d0 <parse_line+0x50>)
 80038c8:	f000 fa5e 	bl	8003d88 <iprintf>

#ifdef DEBUG_PARSER
	printf ("parse_line: nargs=%d\n", nargs);
#endif
	return (nargs);
}
 80038cc:	4620      	mov	r0, r4
 80038ce:	bd70      	pop	{r4, r5, r6, pc}
 80038d0:	08004224 	.word	0x08004224

080038d4 <run_command>:
 * may be the result from getenv(), which returns a pointer directly to
 * the environment data, which may change magicly when the command we run
 * creates or modifies environment variables (like "bootp" does).
 */
int run_command (const char *cmd, int flag)
{
 80038d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ctrlc_was_pressed;
}

void clear_ctrlc(void)
{
	ctrlc_was_pressed = 0;
 80038d8:	4b70      	ldr	r3, [pc, #448]	; (8003a9c <run_command+0x1c8>)
 * may be the result from getenv(), which returns a pointer directly to
 * the environment data, which may change magicly when the command we run
 * creates or modifies environment variables (like "bootp" does).
 */
int run_command (const char *cmd, int flag)
{
 80038da:	b0ad      	sub	sp, #180	; 0xb4
	return ctrlc_was_pressed;
}

void clear_ctrlc(void)
{
	ctrlc_was_pressed = 0;
 80038dc:	2400      	movs	r4, #0
 * may be the result from getenv(), which returns a pointer directly to
 * the environment data, which may change magicly when the command we run
 * creates or modifies environment variables (like "bootp" does).
 */
int run_command (const char *cmd, int flag)
{
 80038de:	9101      	str	r1, [sp, #4]
	return ctrlc_was_pressed;
}

void clear_ctrlc(void)
{
	ctrlc_was_pressed = 0;
 80038e0:	601c      	str	r4, [r3, #0]
	puts ("\"\n");
#endif

	clear_ctrlc();		/* forget any previous Control C */

	if (!cmd || !*cmd) {
 80038e2:	4605      	mov	r5, r0
 80038e4:	4698      	mov	r8, r3
 80038e6:	2800      	cmp	r0, #0
 80038e8:	f000 80d0 	beq.w	8003a8c <run_command+0x1b8>
 80038ec:	7803      	ldrb	r3, [r0, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80cc 	beq.w	8003a8c <run_command+0x1b8>
		return -1;	/* empty command */
	}

	if (strlen(cmd) >= CONFIG_SYS_CBSIZE) {
 80038f4:	f7fc fc34 	bl	8000160 <strlen>
 80038f8:	283f      	cmp	r0, #63	; 0x3f
 80038fa:	d903      	bls.n	8003904 <run_command+0x30>
		puts ("## Command too long!\n");
 80038fc:	4868      	ldr	r0, [pc, #416]	; (8003aa0 <run_command+0x1cc>)
 80038fe:	f000 fa67 	bl	8003dd0 <puts>
 8003902:	e0c3      	b.n	8003a8c <run_command+0x1b8>
		return -1;
	}

	strcpy (cmdbuf, cmd);
 8003904:	4629      	mov	r1, r5
 8003906:	a80c      	add	r0, sp, #48	; 0x30
 8003908:	f000 fb2e 	bl	8003f68 <strcpy>
{
	char c, prev;
	const char *varname_start = NULL;
	int inputcnt = strlen (input);
	int outputcnt = CONFIG_SYS_CBSIZE;
	int state = 0;		/* 0 = waiting for '$'  */
 800390c:	46a1      	mov	r9, r4
	char *sep;			/* end of token (separator) in cmdbuf */
	char finaltoken[CONFIG_SYS_CBSIZE];
	char *str = cmdbuf;
	char *argv[CONFIG_SYS_MAXARGS + 1];	/* NULL terminated	*/
	int argc, inquotes;
	int repeatable = 1;
 800390e:	2501      	movs	r5, #1
	cmd_tbl_t *cmdtp;
	char cmdbuf[CONFIG_SYS_CBSIZE];	/* working copy of cmd		*/
	char *token;			/* start of token in cmdbuf	*/
	char *sep;			/* end of token (separator) in cmdbuf */
	char finaltoken[CONFIG_SYS_CBSIZE];
	char *str = cmdbuf;
 8003910:	af0c      	add	r7, sp, #48	; 0x30
	 */

#ifdef DEBUG_PARSER
	printf ("[PROCESS_SEPARATORS] %s\n", cmd);
#endif
	while (*str) {
 8003912:	783b      	ldrb	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80b8 	beq.w	8003a8a <run_command+0x1b6>
 800391a:	1e7a      	subs	r2, r7, #1
 800391c:	2300      	movs	r3, #0
 800391e:	3201      	adds	r2, #1

		/*
		 * Find separator, or string end
		 * Allow simple escape of ';' by writing "\;"
		 */
		for (inquotes = 0, sep = str; *sep; sep++) {
 8003920:	7811      	ldrb	r1, [r2, #0]
 8003922:	4616      	mov	r6, r2
 8003924:	b1b1      	cbz	r1, 8003954 <run_command+0x80>
			if ((*sep=='\'') &&
 8003926:	2927      	cmp	r1, #39	; 0x27
 8003928:	d106      	bne.n	8003938 <run_command+0x64>
 800392a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800392e:	295c      	cmp	r1, #92	; 0x5c
 8003930:	d0f5      	beq.n	800391e <run_command+0x4a>
 8003932:	f083 0301 	eor.w	r3, r3, #1
 8003936:	e7f2      	b.n	800391e <run_command+0x4a>
			    (*(sep-1) != '\\'))
				inquotes=!inquotes;

			if (!inquotes &&
 8003938:	b953      	cbnz	r3, 8003950 <run_command+0x7c>
 800393a:	293b      	cmp	r1, #59	; 0x3b
 800393c:	d1ef      	bne.n	800391e <run_command+0x4a>
			    (*sep == ';') &&	/* separator		*/
 800393e:	42b7      	cmp	r7, r6
 8003940:	d0ed      	beq.n	800391e <run_command+0x4a>
			    ( sep != str) &&	/* past string start	*/
 8003942:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003946:	295c      	cmp	r1, #92	; 0x5c
 8003948:	d0e9      	beq.n	800391e <run_command+0x4a>
		 * Limit the token to data between separators
		 */
		token = str;
		if (*sep) {
			str = sep + 1;	/* start of command for next pass */
			*sep = '\0';
 800394a:	7033      	strb	r3, [r6, #0]
		/*
		 * Limit the token to data between separators
		 */
		token = str;
		if (*sep) {
			str = sep + 1;	/* start of command for next pass */
 800394c:	3601      	adds	r6, #1
 800394e:	e001      	b.n	8003954 <run_command+0x80>
 8003950:	2301      	movs	r3, #1
 8003952:	e7e4      	b.n	800391e <run_command+0x4a>

static void process_macros (const char *input, char *output)
{
	char c, prev;
	const char *varname_start = NULL;
	int inputcnt = strlen (input);
 8003954:	4638      	mov	r0, r7
 8003956:	f7fc fc03 	bl	8000160 <strlen>
	int outputcnt = CONFIG_SYS_CBSIZE;
	int state = 0;		/* 0 = waiting for '$'  */
 800395a:	2300      	movs	r3, #0

	printf ("[PROCESS_MACROS] INPUT len %d: \"%s\"\n", strlen (input),
		input);
#endif

	prev = '\0';		/* previous character   */
 800395c:	469c      	mov	ip, r3
static void process_macros (const char *input, char *output)
{
	char c, prev;
	const char *varname_start = NULL;
	int inputcnt = strlen (input);
	int outputcnt = CONFIG_SYS_CBSIZE;
 800395e:	f04f 0e40 	mov.w	lr, #64	; 0x40

static void process_macros (const char *input, char *output)
{
	char c, prev;
	const char *varname_start = NULL;
	int inputcnt = strlen (input);
 8003962:	aa1c      	add	r2, sp, #112	; 0x70
		input);
#endif

	prev = '\0';		/* previous character   */

	while (inputcnt && outputcnt) {
 8003964:	2800      	cmp	r0, #0
 8003966:	d060      	beq.n	8003a2a <run_command+0x156>
 8003968:	f1be 0f00 	cmp.w	lr, #0
 800396c:	d060      	beq.n	8003a30 <run_command+0x15c>
		c = *input++;
		inputcnt--;

		if (state != 3) {
 800396e:	2b03      	cmp	r3, #3
#endif

	prev = '\0';		/* previous character   */

	while (inputcnt && outputcnt) {
		c = *input++;
 8003970:	f107 0b01 	add.w	fp, r7, #1
 8003974:	7839      	ldrb	r1, [r7, #0]
		inputcnt--;
 8003976:	f100 3aff 	add.w	sl, r0, #4294967295

		if (state != 3) {
 800397a:	d03d      	beq.n	80039f8 <run_command+0x124>
			/* remove one level of escape characters */
			if ((c == '\\') && (prev != '\\')) {
 800397c:	295c      	cmp	r1, #92	; 0x5c
 800397e:	d10e      	bne.n	800399e <run_command+0xca>
 8003980:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
 8003984:	d046      	beq.n	8003a14 <run_command+0x140>
				if (inputcnt-- == 0)
 8003986:	3802      	subs	r0, #2
 8003988:	f1ba 0f00 	cmp.w	sl, #0
 800398c:	d102      	bne.n	8003994 <run_command+0xc0>
		}
		prev = c;
	}

	if (outputcnt)
		*output = 0;
 800398e:	f882 9000 	strb.w	r9, [r2]
 8003992:	e04f      	b.n	8003a34 <run_command+0x160>
		inputcnt--;

		if (state != 3) {
			/* remove one level of escape characters */
			if ((c == '\\') && (prev != '\\')) {
				if (inputcnt-- == 0)
 8003994:	4682      	mov	sl, r0
					break;
				prev = c;
				c = *input++;
 8003996:	468c      	mov	ip, r1
 8003998:	7879      	ldrb	r1, [r7, #1]
 800399a:	f107 0b02 	add.w	fp, r7, #2
			}
		}

		switch (state) {
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d011      	beq.n	80039c6 <run_command+0xf2>
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d023      	beq.n	80039ee <run_command+0x11a>
		case 0:	/* Waiting for (unescaped) $    */
			if ((c == '\'') && (prev != '\\')) {
 80039a6:	2927      	cmp	r1, #39	; 0x27
 80039a8:	d103      	bne.n	80039b2 <run_command+0xde>
 80039aa:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
 80039ae:	d12d      	bne.n	8003a0c <run_command+0x138>
 80039b0:	e004      	b.n	80039bc <run_command+0xe8>
				state = 3;
				break;
			}
			if ((c == '$') && (prev != '\\')) {
 80039b2:	2924      	cmp	r1, #36	; 0x24
 80039b4:	d102      	bne.n	80039bc <run_command+0xe8>
 80039b6:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
 80039ba:	d129      	bne.n	8003a10 <run_command+0x13c>
				state++;
			} else {
				*(output++) = c;
 80039bc:	7011      	strb	r1, [r2, #0]
				outputcnt--;
 80039be:	f10e 3eff 	add.w	lr, lr, #4294967295
				break;
			}
			if ((c == '$') && (prev != '\\')) {
				state++;
			} else {
				*(output++) = c;
 80039c2:	3201      	adds	r2, #1
 80039c4:	e02c      	b.n	8003a20 <run_command+0x14c>
				outputcnt--;
			}
			break;
		case 1:	/* Waiting for (        */
			if (c == '(' || c == '{') {
 80039c6:	2928      	cmp	r1, #40	; 0x28
 80039c8:	d028      	beq.n	8003a1c <run_command+0x148>
 80039ca:	297b      	cmp	r1, #123	; 0x7b
 80039cc:	d026      	beq.n	8003a1c <run_command+0x148>
				state++;
				varname_start = input;
			} else {
				state = 0;
				*(output++) = '$';
 80039ce:	f04f 0324 	mov.w	r3, #36	; 0x24
				outputcnt--;

				if (outputcnt) {
 80039d2:	f1be 0f01 	cmp.w	lr, #1
			if (c == '(' || c == '{') {
				state++;
				varname_start = input;
			} else {
				state = 0;
				*(output++) = '$';
 80039d6:	7013      	strb	r3, [r2, #0]
				outputcnt--;

				if (outputcnt) {
 80039d8:	d104      	bne.n	80039e4 <run_command+0x110>
		case 1:	/* Waiting for (        */
			if (c == '(' || c == '{') {
				state++;
				varname_start = input;
			} else {
				state = 0;
 80039da:	f04f 0e00 	mov.w	lr, #0
				*(output++) = '$';
 80039de:	3201      	adds	r2, #1
 80039e0:	4673      	mov	r3, lr
 80039e2:	e01e      	b.n	8003a22 <run_command+0x14e>
				outputcnt--;

				if (outputcnt) {
					*(output++) = c;
 80039e4:	7051      	strb	r1, [r2, #1]
					outputcnt--;
 80039e6:	f1ae 0e02 	sub.w	lr, lr, #2
				state = 0;
				*(output++) = '$';
				outputcnt--;

				if (outputcnt) {
					*(output++) = c;
 80039ea:	3202      	adds	r2, #2
 80039ec:	e018      	b.n	8003a20 <run_command+0x14c>
					outputcnt--;
				}
			}
			break;
		case 2:	/* Waiting for )        */
			if (c == ')' || c == '}') {
 80039ee:	2929      	cmp	r1, #41	; 0x29
 80039f0:	d016      	beq.n	8003a20 <run_command+0x14c>
 80039f2:	297d      	cmp	r1, #125	; 0x7d
 80039f4:	d112      	bne.n	8003a1c <run_command+0x148>
 80039f6:	e013      	b.n	8003a20 <run_command+0x14c>
				/* Look for another '$' */
				state = 0;
			}
			break;
		case 3:	/* Waiting for '        */
			if ((c == '\'') && (prev != '\\')) {
 80039f8:	2927      	cmp	r1, #39	; 0x27
 80039fa:	d102      	bne.n	8003a02 <run_command+0x12e>
 80039fc:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
 8003a00:	d10e      	bne.n	8003a20 <run_command+0x14c>
				state = 0;
			} else {
				*(output++) = c;
 8003a02:	7011      	strb	r1, [r2, #0]
				outputcnt--;
 8003a04:	f10e 3eff 	add.w	lr, lr, #4294967295
			break;
		case 3:	/* Waiting for '        */
			if ((c == '\'') && (prev != '\\')) {
				state = 0;
			} else {
				*(output++) = c;
 8003a08:	3201      	adds	r2, #1
 8003a0a:	e00a      	b.n	8003a22 <run_command+0x14e>
		}

		switch (state) {
		case 0:	/* Waiting for (unescaped) $    */
			if ((c == '\'') && (prev != '\\')) {
				state = 3;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e008      	b.n	8003a22 <run_command+0x14e>
				break;
			}
			if ((c == '$') && (prev != '\\')) {
				state++;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e006      	b.n	8003a22 <run_command+0x14e>
				prev = c;
				c = *input++;
			}
		}

		switch (state) {
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d0da      	beq.n	80039ce <run_command+0xfa>
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d1cf      	bne.n	80039bc <run_command+0xe8>
					outputcnt--;
				}
			}
			break;
		case 2:	/* Waiting for )        */
			if (c == ')' || c == '}') {
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e000      	b.n	8003a22 <run_command+0x14e>
				state = 0;
			}
			break;
		case 3:	/* Waiting for '        */
			if ((c == '\'') && (prev != '\\')) {
				state = 0;
 8003a20:	2300      	movs	r3, #0
						*(output++) = *(envval++);
						outputcnt--;
					}
#endif
				/* Look for another '$' */
				state = 0;
 8003a22:	4650      	mov	r0, sl
 8003a24:	468c      	mov	ip, r1
 8003a26:	465f      	mov	r7, fp
 8003a28:	e79c      	b.n	8003964 <run_command+0x90>
			break;
		}
		prev = c;
	}

	if (outputcnt)
 8003a2a:	f1be 0f00 	cmp.w	lr, #0
 8003a2e:	d1ae      	bne.n	800398e <run_command+0xba>
		*output = 0;
	else
		*(output - 1) = 0;
 8003a30:	f802 9c01 	strb.w	r9, [r2, #-1]

		/* find macros in this token and replace them */
		process_macros (token, finaltoken);

		/* Extract arguments */
		if ((argc = parse_line (finaltoken, argv)) == 0) {
 8003a34:	a903      	add	r1, sp, #12
 8003a36:	a81c      	add	r0, sp, #112	; 0x70
 8003a38:	f7ff ff22 	bl	8003880 <parse_line>
 8003a3c:	4607      	mov	r7, r0
 8003a3e:	b300      	cbz	r0, 8003a82 <run_command+0x1ae>
			rc = -1;	/* no command at all */
			continue;
		}

		/* Look up command in command table */
		if ((cmdtp = find_cmd(argv[0])) == NULL) {
 8003a40:	9803      	ldr	r0, [sp, #12]
 8003a42:	f7ff f9c3 	bl	8002dcc <find_cmd>
 8003a46:	4682      	mov	sl, r0
 8003a48:	b920      	cbnz	r0, 8003a54 <run_command+0x180>
			printf ("Unknown command '%s' - try 'help'\n", argv[0]);
 8003a4a:	9903      	ldr	r1, [sp, #12]
 8003a4c:	4815      	ldr	r0, [pc, #84]	; (8003aa4 <run_command+0x1d0>)
 8003a4e:	f000 f99b 	bl	8003d88 <iprintf>
 8003a52:	e016      	b.n	8003a82 <run_command+0x1ae>
			rc = -1;	/* give up after bad command */
			continue;
		}

		/* found - check max args */
		if (argc > cmdtp->maxargs) {
 8003a54:	6843      	ldr	r3, [r0, #4]
 8003a56:	429f      	cmp	r7, r3
 8003a58:	dd02      	ble.n	8003a60 <run_command+0x18c>
			cmd_usage(cmdtp);
 8003a5a:	f7ff f9c5 	bl	8002de8 <cmd_usage>
 8003a5e:	e010      	b.n	8003a82 <run_command+0x1ae>
			rc = -1;
			continue;
		}

		/* OK - call function to do the command */
		if ((cmdtp->cmd) (cmdtp, flag, argc, argv) != 0) {
 8003a60:	ab03      	add	r3, sp, #12
 8003a62:	463a      	mov	r2, r7
 8003a64:	9901      	ldr	r1, [sp, #4]
 8003a66:	68c7      	ldr	r7, [r0, #12]
 8003a68:	47b8      	blx	r7
			rc = -1;
		}

		repeatable &= cmdtp->repeatable;
 8003a6a:	f8da 3008 	ldr.w	r3, [sl, #8]
			continue;
		}

		/* OK - call function to do the command */
		if ((cmdtp->cmd) (cmdtp, flag, argc, argv) != 0) {
			rc = -1;
 8003a6e:	2800      	cmp	r0, #0
		}

		repeatable &= cmdtp->repeatable;
 8003a70:	ea05 0503 	and.w	r5, r5, r3

		/* Did the user stop this? */
		if (had_ctrlc ())
 8003a74:	f8d8 3000 	ldr.w	r3, [r8]
			continue;
		}

		/* OK - call function to do the command */
		if ((cmdtp->cmd) (cmdtp, flag, argc, argv) != 0) {
			rc = -1;
 8003a78:	bf18      	it	ne
 8003a7a:	f04f 34ff 	movne.w	r4, #4294967295
		}

		repeatable &= cmdtp->repeatable;

		/* Did the user stop this? */
		if (had_ctrlc ())
 8003a7e:	b113      	cbz	r3, 8003a86 <run_command+0x1b2>
 8003a80:	e004      	b.n	8003a8c <run_command+0x1b8>
		/* find macros in this token and replace them */
		process_macros (token, finaltoken);

		/* Extract arguments */
		if ((argc = parse_line (finaltoken, argv)) == 0) {
			rc = -1;	/* no command at all */
 8003a82:	f04f 34ff 	mov.w	r4, #4294967295
		}

		/* found - check max args */
		if (argc > cmdtp->maxargs) {
			cmd_usage(cmdtp);
			rc = -1;
 8003a86:	4637      	mov	r7, r6
 8003a88:	e743      	b.n	8003912 <run_command+0x3e>

		/* Did the user stop this? */
		if (had_ctrlc ())
			return -1;	/* if stopped then not repeatable */
	}
	return rc ? rc : repeatable;
 8003a8a:	b114      	cbz	r4, 8003a92 <run_command+0x1be>
	cmd_tbl_t *cmdtp;
	char cmdbuf[CONFIG_SYS_CBSIZE];	/* working copy of cmd		*/
	char *token;			/* start of token in cmdbuf	*/
	char *sep;			/* end of token (separator) in cmdbuf */
	char finaltoken[CONFIG_SYS_CBSIZE];
	char *str = cmdbuf;
 8003a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a90:	e000      	b.n	8003a94 <run_command+0x1c0>
 8003a92:	4628      	mov	r0, r5
		/* Did the user stop this? */
		if (had_ctrlc ())
			return -1;	/* if stopped then not repeatable */
	}
	return rc ? rc : repeatable;
}
 8003a94:	b02d      	add	sp, #180	; 0xb4
 8003a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000d74 	.word	0x20000d74
 8003aa0:	08004243 	.word	0x08004243
 8003aa4:	08004258 	.word	0x08004258

08003aa8 <stm32ShellCommand>:

void stm32ShellCommand(void)
{
 8003aa8:	b508      	push	{r3, lr}
	install_auto_complete();
#endif
	/*
	 * Main Loop for Monitor Command Processing
	 */
	len = readline (CONFIG_SYS_PROMPT);
 8003aaa:	480a      	ldr	r0, [pc, #40]	; (8003ad4 <stm32ShellCommand+0x2c>)
 8003aac:	f7ff fee0 	bl	8003870 <readline>
 8003ab0:	b200      	sxth	r0, r0
	flag = 0;	/* assume no special flags for now */

	if (len > 0)		strcpy (lastcommand, console_buffer);
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	dd05      	ble.n	8003ac2 <stm32ShellCommand+0x1a>
 8003ab6:	4908      	ldr	r1, [pc, #32]	; (8003ad8 <stm32ShellCommand+0x30>)
 8003ab8:	4808      	ldr	r0, [pc, #32]	; (8003adc <stm32ShellCommand+0x34>)
 8003aba:	f000 fa55 	bl	8003f68 <strcpy>
#endif
	/*
	 * Main Loop for Monitor Command Processing
	 */
	len = readline (CONFIG_SYS_PROMPT);
	flag = 0;	/* assume no special flags for now */
 8003abe:	2100      	movs	r1, #0
 8003ac0:	e001      	b.n	8003ac6 <stm32ShellCommand+0x1e>

	if (len > 0)		strcpy (lastcommand, console_buffer);
	else if (len == 0)	flag |= CMD_FLAG_REPEAT;

	if (len <= -1){
 8003ac2:	d103      	bne.n	8003acc <stm32ShellCommand+0x24>
 8003ac4:	2101      	movs	r1, #1
	}else{
		run_command (lastcommand, flag);
 8003ac6:	4805      	ldr	r0, [pc, #20]	; (8003adc <stm32ShellCommand+0x34>)
 8003ac8:	f7ff ff04 	bl	80038d4 <run_command>
	}
	/* invalid command or not repeatable, forget it */
	lastcommand[0] = 0;
 8003acc:	4b03      	ldr	r3, [pc, #12]	; (8003adc <stm32ShellCommand+0x34>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
 8003ad2:	bd08      	pop	{r3, pc}
 8003ad4:	0800427b 	.word	0x0800427b
 8003ad8:	20000e88 	.word	0x20000e88
 8003adc:	20000d7c 	.word	0x20000d7c

08003ae0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	uint8_t ret;

	if(huart->Instance == USART1)
 8003ae0:	6802      	ldr	r2, [r0, #0]
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <HAL_UART_RxCpltCallback+0x38>)
	/* invalid command or not repeatable, forget it */
	lastcommand[0] = 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae4:	b510      	push	{r4, lr}
	uint8_t ret;

	if(huart->Instance == USART1)
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d115      	bne.n	8003b16 <HAL_UART_RxCpltCallback+0x36>
	{
	  ret = osMessagePut(uartRxQueueHandle, usartRxBuff, 0);
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <HAL_UART_RxCpltCallback+0x3c>)
 8003aec:	4c0c      	ldr	r4, [pc, #48]	; (8003b20 <HAL_UART_RxCpltCallback+0x40>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	7821      	ldrb	r1, [r4, #0]
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	f7fd ff2a 	bl	800194c <osMessagePut>
	  if(ret == osErrorOS)	printf("Failed osMessage Put\n");
 8003af8:	b2c0      	uxtb	r0, r0
 8003afa:	28ff      	cmp	r0, #255	; 0xff
 8003afc:	d102      	bne.n	8003b04 <HAL_UART_RxCpltCallback+0x24>
 8003afe:	4809      	ldr	r0, [pc, #36]	; (8003b24 <HAL_UART_RxCpltCallback+0x44>)
 8003b00:	f000 f966 	bl	8003dd0 <puts>
		  uint8_t recvData = evt.value.v & BIT8_MASK;
		  printf("evt.value.v %d\n", recvData );
		  evt.status = osOK;
	  }
#endif
	  usartRxBuff = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Receive_IT(&huart1, &usartRxBuff, USART_RX_BUFF_SIZE);
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4905      	ldr	r1, [pc, #20]	; (8003b20 <HAL_UART_RxCpltCallback+0x40>)
 8003b0c:	4806      	ldr	r0, [pc, #24]	; (8003b28 <HAL_UART_RxCpltCallback+0x48>)
	}
}
 8003b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		  printf("evt.value.v %d\n", recvData );
		  evt.status = osOK;
	  }
#endif
	  usartRxBuff = 0;
	  HAL_UART_Receive_IT(&huart1, &usartRxBuff, USART_RX_BUFF_SIZE);
 8003b12:	f7fd bdf5 	b.w	8001700 <HAL_UART_Receive_IT>
 8003b16:	bd10      	pop	{r4, pc}
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	20000e30 	.word	0x20000e30
 8003b20:	20000e34 	.word	0x20000e34
 8003b24:	08004283 	.word	0x08004283
 8003b28:	2000143c 	.word	0x2000143c

08003b2c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b2c:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <HAL_MspInit+0x84>)

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b2e:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b30:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b32:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	619a      	str	r2, [r3, #24]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	9301      	str	r3, [sp, #4]
 8003b42:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b44:	f7fc fe56 	bl	80007f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	f06f 000b 	mvn.w	r0, #11
 8003b50:	f7fc fe62 	bl	8000818 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003b54:	2200      	movs	r2, #0
 8003b56:	4611      	mov	r1, r2
 8003b58:	f06f 000a 	mvn.w	r0, #10
 8003b5c:	f7fc fe5c 	bl	8000818 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003b60:	2200      	movs	r2, #0
 8003b62:	4611      	mov	r1, r2
 8003b64:	f06f 0009 	mvn.w	r0, #9
 8003b68:	f7fc fe56 	bl	8000818 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4611      	mov	r1, r2
 8003b70:	f06f 0004 	mvn.w	r0, #4
 8003b74:	f7fc fe50 	bl	8000818 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	f06f 0003 	mvn.w	r0, #3
 8003b80:	f7fc fe4a 	bl	8000818 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b84:	2200      	movs	r2, #0
 8003b86:	210f      	movs	r1, #15
 8003b88:	f06f 0001 	mvn.w	r0, #1
 8003b8c:	f7fc fe44 	bl	8000818 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003b90:	2200      	movs	r2, #0
 8003b92:	210f      	movs	r1, #15
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295
 8003b98:	f7fc fe3e 	bl	8000818 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8003b9c:	4a05      	ldr	r2, [pc, #20]	; (8003bb4 <HAL_MspInit+0x88>)
 8003b9e:	6853      	ldr	r3, [r2, #4]
 8003ba0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003ba4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003baa:	b003      	add	sp, #12
 8003bac:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40010000 	.word	0x40010000

08003bb8 <NMI_Handler>:
 8003bb8:	4770      	bx	lr

08003bba <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003bba:	e7fe      	b.n	8003bba <HardFault_Handler>

08003bbc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003bbc:	e7fe      	b.n	8003bbc <MemManage_Handler>

08003bbe <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003bbe:	e7fe      	b.n	8003bbe <BusFault_Handler>

08003bc0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003bc0:	e7fe      	b.n	8003bc0 <UsageFault_Handler>

08003bc2 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8003bc2:	4770      	bx	lr

08003bc4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003bc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bc6:	f7fc fb43 	bl	8000250 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8003bca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  osSystickHandler();
 8003bce:	f7fd bf19 	b.w	8001a04 <osSystickHandler>
	...

08003bd4 <USART1_IRQHandler>:
*/
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003bd4:	4801      	ldr	r0, [pc, #4]	; (8003bdc <USART1_IRQHandler+0x8>)
 8003bd6:	f7fd bdc7 	b.w	8001768 <HAL_UART_IRQHandler>
 8003bda:	bf00      	nop
 8003bdc:	2000143c 	.word	0x2000143c

08003be0 <_write>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8003be0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003be2:	4615      	mov	r5, r2
 8003be4:	460c      	mov	r4, r1
 8003be6:	188e      	adds	r6, r1, r2
	/* Implement your write code here, this is used by puts and printf for example */
		for(unsigned int i = 0; i < len; i++)
 8003be8:	42b4      	cmp	r4, r6
 8003bea:	4621      	mov	r1, r4
 8003bec:	d010      	beq.n	8003c10 <_write+0x30>
		{
			if(*ptr == '\n')
 8003bee:	780b      	ldrb	r3, [r1, #0]
				HAL_UART_Transmit(&huart1, temp, 2, 10);
				ptr++;
			}
			else
			{
				HAL_UART_Transmit(&huart1, ptr, 1, 10);
 8003bf0:	4809      	ldr	r0, [pc, #36]	; (8003c18 <_write+0x38>)
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
	/* Implement your write code here, this is used by puts and printf for example */
		for(unsigned int i = 0; i < len; i++)
		{
			if(*ptr == '\n')
 8003bf2:	2b0a      	cmp	r3, #10
			{
				uint8_t temp[2] = "\r\n";
 8003bf4:	bf03      	ittte	eq
 8003bf6:	f640 220d 	movweq	r2, #2573	; 0xa0d
 8003bfa:	a902      	addeq	r1, sp, #8
 8003bfc:	f821 2d04 	strheq.w	r2, [r1, #-4]!
				HAL_UART_Transmit(&huart1, temp, 2, 10);
				ptr++;
			}
			else
			{
				HAL_UART_Transmit(&huart1, ptr, 1, 10);
 8003c00:	230a      	movne	r3, #10
		for(unsigned int i = 0; i < len; i++)
		{
			if(*ptr == '\n')
			{
				uint8_t temp[2] = "\r\n";
				HAL_UART_Transmit(&huart1, temp, 2, 10);
 8003c02:	bf0c      	ite	eq
 8003c04:	2202      	moveq	r2, #2
				ptr++;
			}
			else
			{
				HAL_UART_Transmit(&huart1, ptr, 1, 10);
 8003c06:	2201      	movne	r2, #1
 8003c08:	3401      	adds	r4, #1
 8003c0a:	f7fd fd1d 	bl	8001648 <HAL_UART_Transmit>
 8003c0e:	e7eb      	b.n	8003be8 <_write+0x8>
				ptr++;
			}
		}
		return len;
}
 8003c10:	4628      	mov	r0, r5
 8003c12:	b002      	add	sp, #8
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
 8003c16:	bf00      	nop
 8003c18:	2000143c 	.word	0x2000143c

08003c1c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003c1c:	b570      	push	{r4, r5, r6, lr}
	int div = 1;
 8003c1e:	2301      	movs	r3, #1
	while (d/div >= base)
 8003c20:	fbb1 f4f3 	udiv	r4, r1, r3
 8003c24:	4294      	cmp	r4, r2
 8003c26:	d301      	bcc.n	8003c2c <ts_itoa+0x10>
		div *= base;
 8003c28:	4353      	muls	r3, r2
 8003c2a:	e7f9      	b.n	8003c20 <ts_itoa+0x4>

	while (div != 0)
 8003c2c:	b17b      	cbz	r3, 8003c4e <ts_itoa+0x32>
	{
		int num = d/div;
 8003c2e:	fbb1 f4f3 	udiv	r4, r1, r3
 8003c32:	6805      	ldr	r5, [r0, #0]
		d = d%div;
		div /= base;
		if (num > 9)
 8003c34:	2c09      	cmp	r4, #9
		div *= base;

	while (div != 0)
	{
		int num = d/div;
		d = d%div;
 8003c36:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
 8003c3a:	f105 0601 	add.w	r6, r5, #1
 8003c3e:	bfcc      	ite	gt
 8003c40:	3437      	addgt	r4, #55	; 0x37
		else
			*((*buf)++) = num + '0';
 8003c42:	3430      	addle	r4, #48	; 0x30
	{
		int num = d/div;
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
 8003c44:	6006      	str	r6, [r0, #0]

	while (div != 0)
	{
		int num = d/div;
		d = d%div;
		div /= base;
 8003c46:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
 8003c4a:	702c      	strb	r4, [r5, #0]
 8003c4c:	e7ee      	b.n	8003c2c <ts_itoa+0x10>
	}
}
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}

08003c50 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003c50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003c54:	4613      	mov	r3, r2
 8003c56:	460c      	mov	r4, r1
	char *start_buf = buf;
 8003c58:	4606      	mov	r6, r0
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003c5a:	ad02      	add	r5, sp, #8
 8003c5c:	f845 0d04 	str.w	r0, [r5, #-4]!
				{
					signed int val = va_arg(va, signed int);
					if (val < 0)
					{
						val *= -1;
						*buf++ = '-';
 8003c60:	272d      	movs	r7, #45	; 0x2d
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 8003c62:	7822      	ldrb	r2, [r4, #0]
 8003c64:	2a00      	cmp	r2, #0
 8003c66:	d050      	beq.n	8003d0a <ts_formatstring+0xba>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003c68:	2a25      	cmp	r2, #37	; 0x25
 8003c6a:	d148      	bne.n	8003cfe <ts_formatstring+0xae>
		{
			switch (*(++fmt))
 8003c6c:	7862      	ldrb	r2, [r4, #1]
 8003c6e:	2a64      	cmp	r2, #100	; 0x64
 8003c70:	d01e      	beq.n	8003cb0 <ts_formatstring+0x60>
 8003c72:	d80a      	bhi.n	8003c8a <ts_formatstring+0x3a>
 8003c74:	2a58      	cmp	r2, #88	; 0x58
 8003c76:	d038      	beq.n	8003cea <ts_formatstring+0x9a>
 8003c78:	2a63      	cmp	r2, #99	; 0x63
 8003c7a:	d011      	beq.n	8003ca0 <ts_formatstring+0x50>
 8003c7c:	2a25      	cmp	r2, #37	; 0x25
 8003c7e:	d13c      	bne.n	8003cfa <ts_formatstring+0xaa>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 8003c80:	9901      	ldr	r1, [sp, #4]
 8003c82:	1c48      	adds	r0, r1, #1
 8003c84:	9001      	str	r0, [sp, #4]
 8003c86:	700a      	strb	r2, [r1, #0]
				  break;
 8003c88:	e037      	b.n	8003cfa <ts_formatstring+0xaa>
	while(*fmt)
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 8003c8a:	2a73      	cmp	r2, #115	; 0x73
 8003c8c:	d01c      	beq.n	8003cc8 <ts_formatstring+0x78>
 8003c8e:	d802      	bhi.n	8003c96 <ts_formatstring+0x46>
 8003c90:	2a69      	cmp	r2, #105	; 0x69
 8003c92:	d00d      	beq.n	8003cb0 <ts_formatstring+0x60>
 8003c94:	e031      	b.n	8003cfa <ts_formatstring+0xaa>
 8003c96:	2a75      	cmp	r2, #117	; 0x75
 8003c98:	d023      	beq.n	8003ce2 <ts_formatstring+0x92>
 8003c9a:	2a78      	cmp	r2, #120	; 0x78
 8003c9c:	d025      	beq.n	8003cea <ts_formatstring+0x9a>
 8003c9e:	e02c      	b.n	8003cfa <ts_formatstring+0xaa>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003ca0:	9a01      	ldr	r2, [sp, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	1c51      	adds	r1, r2, #1
 8003ca6:	9101      	str	r1, [sp, #4]
 8003ca8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8003cac:	7011      	strb	r1, [r2, #0]
				break;
 8003cae:	e024      	b.n	8003cfa <ts_formatstring+0xaa>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	f103 0804 	add.w	r8, r3, #4
					if (val < 0)
 8003cb6:	2900      	cmp	r1, #0
 8003cb8:	da04      	bge.n	8003cc4 <ts_formatstring+0x74>
					{
						val *= -1;
						*buf++ = '-';
 8003cba:	9b01      	ldr	r3, [sp, #4]
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
					if (val < 0)
					{
						val *= -1;
 8003cbc:	4249      	negs	r1, r1
						*buf++ = '-';
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	9201      	str	r2, [sp, #4]
 8003cc2:	701f      	strb	r7, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003cc4:	220a      	movs	r2, #10
 8003cc6:	e014      	b.n	8003cf2 <ts_formatstring+0xa2>
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003cc8:	1d19      	adds	r1, r3, #4
 8003cca:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	b132      	cbz	r2, 8003cde <ts_formatstring+0x8e>
					{
						*buf++ = *arg++;
 8003cd0:	9a01      	ldr	r2, [sp, #4]
 8003cd2:	1c50      	adds	r0, r2, #1
 8003cd4:	9001      	str	r0, [sp, #4]
 8003cd6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003cda:	7010      	strb	r0, [r2, #0]
 8003cdc:	e7f6      	b.n	8003ccc <ts_formatstring+0x7c>
					ts_itoa(&buf, val, 10);
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003cde:	460b      	mov	r3, r1
 8003ce0:	e00b      	b.n	8003cfa <ts_formatstring+0xaa>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8003ce2:	f103 0804 	add.w	r8, r3, #4
 8003ce6:	220a      	movs	r2, #10
 8003ce8:	e002      	b.n	8003cf0 <ts_formatstring+0xa0>
				break;
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003cea:	f103 0804 	add.w	r8, r3, #4
 8003cee:	2210      	movs	r2, #16
 8003cf0:	6819      	ldr	r1, [r3, #0]
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f7ff ff92 	bl	8003c1c <ts_itoa>
 8003cf8:	4643      	mov	r3, r8
				break;
			  case '%':
				  *buf++ = '%';
				  break;
			}
			fmt++;
 8003cfa:	3402      	adds	r4, #2
 8003cfc:	e7b1      	b.n	8003c62 <ts_formatstring+0x12>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8003cfe:	9901      	ldr	r1, [sp, #4]
 8003d00:	3401      	adds	r4, #1
 8003d02:	1c48      	adds	r0, r1, #1
 8003d04:	9001      	str	r0, [sp, #4]
 8003d06:	700a      	strb	r2, [r1, #0]
 8003d08:	e7ab      	b.n	8003c62 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003d0a:	9b01      	ldr	r3, [sp, #4]
 8003d0c:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 8003d0e:	9801      	ldr	r0, [sp, #4]
 8003d10:	1b80      	subs	r0, r0, r6
 8003d12:	b002      	add	sp, #8
 8003d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003d18 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8003d18:	b530      	push	{r4, r5, lr}
 8003d1a:	4604      	mov	r4, r0
	int length = 0;
 8003d1c:	2000      	movs	r0, #0
	while (*fmt)
 8003d1e:	7823      	ldrb	r3, [r4, #0]
 8003d20:	b38b      	cbz	r3, 8003d86 <ts_formatlength+0x6e>
	{
		if (*fmt == '%')
 8003d22:	2b25      	cmp	r3, #37	; 0x25
 8003d24:	d128      	bne.n	8003d78 <ts_formatlength+0x60>
		{
			++fmt;
			switch (*fmt)
 8003d26:	7863      	ldrb	r3, [r4, #1]
	int length = 0;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			++fmt;
 8003d28:	1c65      	adds	r5, r4, #1
			switch (*fmt)
 8003d2a:	2b69      	cmp	r3, #105	; 0x69
 8003d2c:	d014      	beq.n	8003d58 <ts_formatlength+0x40>
 8003d2e:	d806      	bhi.n	8003d3e <ts_formatlength+0x26>
 8003d30:	2b63      	cmp	r3, #99	; 0x63
 8003d32:	d00e      	beq.n	8003d52 <ts_formatlength+0x3a>
 8003d34:	2b64      	cmp	r3, #100	; 0x64
 8003d36:	d00f      	beq.n	8003d58 <ts_formatlength+0x40>
 8003d38:	2b58      	cmp	r3, #88	; 0x58
 8003d3a:	d11a      	bne.n	8003d72 <ts_formatlength+0x5a>
 8003d3c:	e015      	b.n	8003d6a <ts_formatlength+0x52>
 8003d3e:	2b75      	cmp	r3, #117	; 0x75
 8003d40:	d00a      	beq.n	8003d58 <ts_formatlength+0x40>
 8003d42:	2b78      	cmp	r3, #120	; 0x78
 8003d44:	d011      	beq.n	8003d6a <ts_formatlength+0x52>
 8003d46:	2b73      	cmp	r3, #115	; 0x73
 8003d48:	d113      	bne.n	8003d72 <ts_formatlength+0x5a>
				  length += 11;
				  va_arg(va, int);
				  break;
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8003d4a:	1d0a      	adds	r2, r1, #4
 8003d4c:	6809      	ldr	r1, [r1, #0]
 8003d4e:	1a40      	subs	r0, r0, r1
			  		  while (*str++)
 8003d50:	e005      	b.n	8003d5e <ts_formatlength+0x46>
		{
			++fmt;
			switch (*fmt)
			{
			  case 'c':
		  		  va_arg(va, int);
 8003d52:	1d0a      	adds	r2, r1, #4
				  ++length;
 8003d54:	1c43      	adds	r3, r0, #1
				  break;
 8003d56:	e012      	b.n	8003d7e <ts_formatlength+0x66>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8003d58:	f100 030b 	add.w	r3, r0, #11
 8003d5c:	e007      	b.n	8003d6e <ts_formatlength+0x56>
 8003d5e:	180b      	adds	r3, r1, r0
				  va_arg(va, int);
				  break;
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
			  		  while (*str++)
 8003d60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d64:	2c00      	cmp	r4, #0
 8003d66:	d1fa      	bne.n	8003d5e <ts_formatlength+0x46>
 8003d68:	e009      	b.n	8003d7e <ts_formatlength+0x66>
			  	  }
				  break;
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8003d6a:	f100 0308 	add.w	r3, r0, #8
				  va_arg(va, unsigned int);
 8003d6e:	1d0a      	adds	r2, r1, #4
				  break;
 8003d70:	e005      	b.n	8003d7e <ts_formatlength+0x66>
			  default:
				  ++length;
 8003d72:	1c43      	adds	r3, r0, #1
				  break;
 8003d74:	460a      	mov	r2, r1
 8003d76:	e002      	b.n	8003d7e <ts_formatlength+0x66>
			}
		}
		else
		{
			++length;
 8003d78:	460a      	mov	r2, r1
 8003d7a:	4625      	mov	r5, r4
 8003d7c:	1c43      	adds	r3, r0, #1
		}
		++fmt;
 8003d7e:	1c6c      	adds	r4, r5, #1
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	e7cb      	b.n	8003d1e <ts_formatlength+0x6>
	}
	return length;
}
 8003d86:	bd30      	pop	{r4, r5, pc}

08003d88 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8003d88:	b40f      	push	{r0, r1, r2, r3}
 8003d8a:	b5b0      	push	{r4, r5, r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	f107 0418 	add.w	r4, r7, #24
 8003d94:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
	length = ts_formatlength(fmt, va);
 8003d98:	4621      	mov	r1, r4
 8003d9a:	4628      	mov	r0, r5
*/
int iprintf(const char *fmt, ...)
{
	int length = 0;
	va_list va;
	va_start(va, fmt);
 8003d9c:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 8003d9e:	f7ff ffbb 	bl	8003d18 <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 8003da2:	3007      	adds	r0, #7
 8003da4:	f020 0007 	bic.w	r0, r0, #7
 8003da8:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
 8003dac:	4622      	mov	r2, r4
 8003dae:	4629      	mov	r1, r5
 8003db0:	4668      	mov	r0, sp
	va_start(va, fmt);
	length = ts_formatlength(fmt, va);
	va_end(va);
	{
		char buf[length];
		va_start(va, fmt);
 8003db2:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 8003db4:	f7ff ff4c 	bl	8003c50 <ts_formatstring>
		length = _write(1, buf, length);
 8003db8:	4669      	mov	r1, sp
 8003dba:	4602      	mov	r2, r0
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	f7ff ff0f 	bl	8003be0 <_write>
		va_end(va);
	}
	return length;
}
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003dca:	b004      	add	sp, #16
 8003dcc:	4770      	bx	lr
	...

08003dd0 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8003dd0:	b538      	push	{r3, r4, r5, lr}
 8003dd2:	4605      	mov	r5, r0
	int length = strlen(s);
 8003dd4:	f7fc f9c4 	bl	8000160 <strlen>
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 8003dd8:	4629      	mov	r1, r5
 8003dda:	4602      	mov	r2, r0
**
**===========================================================================
*/
int puts(const char *s)
{
	int length = strlen(s);
 8003ddc:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 8003dde:	2001      	movs	r0, #1
 8003de0:	f7ff fefe 	bl	8003be0 <_write>
	numbytes += _write(1, "\n", 1);
 8003de4:	2201      	movs	r2, #1
{
	int length = strlen(s);
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*)s, length);
 8003de6:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 8003de8:	4905      	ldr	r1, [pc, #20]	; (8003e00 <puts+0x30>)
 8003dea:	4610      	mov	r0, r2
 8003dec:	f7ff fef8 	bl	8003be0 <_write>
	else
	{
		res = EOF;
	}

	return res;
 8003df0:	3401      	adds	r4, #1
 8003df2:	4428      	add	r0, r5
}
 8003df4:	1b00      	subs	r0, r0, r4
 8003df6:	bf18      	it	ne
 8003df8:	f04f 30ff 	movne.w	r0, #4294967295
 8003dfc:	bd38      	pop	{r3, r4, r5, pc}
 8003dfe:	bf00      	nop
 8003e00:	080040fb 	.word	0x080040fb

08003e04 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e04:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8003e06:	480b      	ldr	r0, [pc, #44]	; (8003e34 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <MX_USART1_UART_Init+0x34>)
 8003e0a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003e0e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e12:	220c      	movs	r2, #12
void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e14:	2300      	movs	r3, #0
 8003e16:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e18:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e1a:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e1c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e1e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e20:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e22:	f7fd fbe5 	bl	80015f0 <HAL_UART_Init>
 8003e26:	b118      	cbz	r0, 8003e30 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8003e28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
 8003e2c:	f7ff ba52 	b.w	80032d4 <Error_Handler>
 8003e30:	bd08      	pop	{r3, pc}
 8003e32:	bf00      	nop
 8003e34:	2000143c 	.word	0x2000143c
 8003e38:	40013800 	.word	0x40013800

08003e3c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e3c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8003e3e:	6802      	ldr	r2, [r0, #0]
 8003e40:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <HAL_UART_MspInit+0x60>)
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e42:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d127      	bne.n	8003e98 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e48:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003e4c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e4e:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e54:	619a      	str	r2, [r3, #24]
 8003e56:	699b      	ldr	r3, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e58:	4811      	ldr	r0, [pc, #68]	; (8003ea0 <HAL_UART_MspInit+0x64>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e66:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e6c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e6e:	2400      	movs	r4, #0
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e70:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e72:	f7fc fd33 	bl	80008dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e7a:	a902      	add	r1, sp, #8
 8003e7c:	4808      	ldr	r0, [pc, #32]	; (8003ea0 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e7e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e80:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e84:	f7fc fd2a 	bl	80008dc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003e88:	2025      	movs	r0, #37	; 0x25
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	2105      	movs	r1, #5
 8003e8e:	f7fc fcc3 	bl	8000818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e92:	2025      	movs	r0, #37	; 0x25
 8003e94:	f7fc fcf4 	bl	8000880 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003e98:	b006      	add	sp, #24
 8003e9a:	bd10      	pop	{r4, pc}
 8003e9c:	40013800 	.word	0x40013800
 8003ea0:	40010800 	.word	0x40010800

08003ea4 <__libc_init_array>:
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <__libc_init_array+0x3c>)
 8003ea6:	b570      	push	{r4, r5, r6, lr}
 8003ea8:	461e      	mov	r6, r3
 8003eaa:	4c0e      	ldr	r4, [pc, #56]	; (8003ee4 <__libc_init_array+0x40>)
 8003eac:	2500      	movs	r5, #0
 8003eae:	1ae4      	subs	r4, r4, r3
 8003eb0:	10a4      	asrs	r4, r4, #2
 8003eb2:	42a5      	cmp	r5, r4
 8003eb4:	d004      	beq.n	8003ec0 <__libc_init_array+0x1c>
 8003eb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003eba:	4798      	blx	r3
 8003ebc:	3501      	adds	r5, #1
 8003ebe:	e7f8      	b.n	8003eb2 <__libc_init_array+0xe>
 8003ec0:	f000 f870 	bl	8003fa4 <_init>
 8003ec4:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <__libc_init_array+0x44>)
 8003ec6:	4c09      	ldr	r4, [pc, #36]	; (8003eec <__libc_init_array+0x48>)
 8003ec8:	461e      	mov	r6, r3
 8003eca:	1ae4      	subs	r4, r4, r3
 8003ecc:	10a4      	asrs	r4, r4, #2
 8003ece:	2500      	movs	r5, #0
 8003ed0:	42a5      	cmp	r5, r4
 8003ed2:	d004      	beq.n	8003ede <__libc_init_array+0x3a>
 8003ed4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ed8:	4798      	blx	r3
 8003eda:	3501      	adds	r5, #1
 8003edc:	e7f8      	b.n	8003ed0 <__libc_init_array+0x2c>
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	080042b0 	.word	0x080042b0
 8003ee4:	080042b0 	.word	0x080042b0
 8003ee8:	080042b0 	.word	0x080042b0
 8003eec:	080042b4 	.word	0x080042b4

08003ef0 <memcpy>:
 8003ef0:	b510      	push	{r4, lr}
 8003ef2:	1e43      	subs	r3, r0, #1
 8003ef4:	440a      	add	r2, r1
 8003ef6:	4291      	cmp	r1, r2
 8003ef8:	d004      	beq.n	8003f04 <memcpy+0x14>
 8003efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f02:	e7f8      	b.n	8003ef6 <memcpy+0x6>
 8003f04:	bd10      	pop	{r4, pc}

08003f06 <memmove>:
 8003f06:	4288      	cmp	r0, r1
 8003f08:	b510      	push	{r4, lr}
 8003f0a:	eb01 0302 	add.w	r3, r1, r2
 8003f0e:	d801      	bhi.n	8003f14 <memmove+0xe>
 8003f10:	1e42      	subs	r2, r0, #1
 8003f12:	e00b      	b.n	8003f2c <memmove+0x26>
 8003f14:	4298      	cmp	r0, r3
 8003f16:	d2fb      	bcs.n	8003f10 <memmove+0xa>
 8003f18:	1881      	adds	r1, r0, r2
 8003f1a:	1ad2      	subs	r2, r2, r3
 8003f1c:	42d3      	cmn	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <memmove+0x24>
 8003f20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f24:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003f28:	e7f8      	b.n	8003f1c <memmove+0x16>
 8003f2a:	bd10      	pop	{r4, pc}
 8003f2c:	4299      	cmp	r1, r3
 8003f2e:	d004      	beq.n	8003f3a <memmove+0x34>
 8003f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f34:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003f38:	e7f8      	b.n	8003f2c <memmove+0x26>
 8003f3a:	bd10      	pop	{r4, pc}

08003f3c <memset>:
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	4402      	add	r2, r0
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d002      	beq.n	8003f4a <memset+0xe>
 8003f44:	f803 1b01 	strb.w	r1, [r3], #1
 8003f48:	e7fa      	b.n	8003f40 <memset+0x4>
 8003f4a:	4770      	bx	lr

08003f4c <strchr>:
 8003f4c:	b2c9      	uxtb	r1, r1
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f54:	b11a      	cbz	r2, 8003f5e <strchr+0x12>
 8003f56:	4291      	cmp	r1, r2
 8003f58:	d1f9      	bne.n	8003f4e <strchr+0x2>
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	4770      	bx	lr
 8003f5e:	2900      	cmp	r1, #0
 8003f60:	bf0c      	ite	eq
 8003f62:	4618      	moveq	r0, r3
 8003f64:	2000      	movne	r0, #0
 8003f66:	4770      	bx	lr

08003f68 <strcpy>:
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f6e:	f803 2b01 	strb.w	r2, [r3], #1
 8003f72:	2a00      	cmp	r2, #0
 8003f74:	d1f9      	bne.n	8003f6a <strcpy+0x2>
 8003f76:	4770      	bx	lr

08003f78 <strncmp>:
 8003f78:	b530      	push	{r4, r5, lr}
 8003f7a:	b182      	cbz	r2, 8003f9e <strncmp+0x26>
 8003f7c:	1e45      	subs	r5, r0, #1
 8003f7e:	3901      	subs	r1, #1
 8003f80:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003f84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003f88:	42a3      	cmp	r3, r4
 8003f8a:	d106      	bne.n	8003f9a <strncmp+0x22>
 8003f8c:	43ec      	mvns	r4, r5
 8003f8e:	4414      	add	r4, r2
 8003f90:	42e0      	cmn	r0, r4
 8003f92:	d001      	beq.n	8003f98 <strncmp+0x20>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f3      	bne.n	8003f80 <strncmp+0x8>
 8003f98:	461c      	mov	r4, r3
 8003f9a:	1b18      	subs	r0, r3, r4
 8003f9c:	bd30      	pop	{r4, r5, pc}
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	bd30      	pop	{r4, r5, pc}
	...

08003fa4 <_init>:
 8003fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa6:	bf00      	nop
 8003fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003faa:	bc08      	pop	{r3}
 8003fac:	469e      	mov	lr, r3
 8003fae:	4770      	bx	lr

08003fb0 <_fini>:
 8003fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb2:	bf00      	nop
 8003fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fb6:	bc08      	pop	{r3}
 8003fb8:	469e      	mov	lr, r3
 8003fba:	4770      	bx	lr
